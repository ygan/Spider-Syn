[
  {
    "db_id": "concert_singer",
    "query": "SELECT count(*) FROM singer",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question": "How many sing do we have ?",
    "question_toks": [
      "How",
      "many",
      "sing",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT count(*) FROM singer",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question": "What is the total number of sing ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "sing",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "country",
      ",",
      "age",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "country",
      ",",
      "age",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "desc"
    ],
    "question": "Show name , country , age for all choirs ordered by age from the oldest to the youngest .",
    "question_toks": [
      "Show",
      "name",
      ",",
      "country",
      ",",
      "age",
      "for",
      "all",
      "choirs",
      "ordered",
      "by",
      "age",
      "from",
      "the",
      "oldest",
      "to",
      "the",
      "youngest",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "country",
      ",",
      "age",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "country",
      ",",
      "age",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "desc"
    ],
    "question": "What are the names , countries , and ages for every singing in descending order of age ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      ",",
      "countries",
      ",",
      "and",
      "ages",
      "for",
      "every",
      "singing",
      "in",
      "descending",
      "order",
      "of",
      "age",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "singer",
      "WHERE",
      "country",
      "=",
      "'France",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "from",
      "singer",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "What is the average , minimum , and maximum age of all singing from France ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      ",",
      "minimum",
      ",",
      "and",
      "maximum",
      "age",
      "of",
      "all",
      "singing",
      "from",
      "France",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "singer",
      "WHERE",
      "country",
      "=",
      "'France",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      ",",
      "min",
      "(",
      "age",
      ")",
      ",",
      "max",
      "(",
      "age",
      ")",
      "from",
      "singer",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "What is the average , minimum , and maximum age for all French sing ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      ",",
      "minimum",
      ",",
      "and",
      "maximum",
      "age",
      "for",
      "all",
      "French",
      "sing",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "query_toks": [
      "SELECT",
      "song_name",
      ",",
      "song_release_year",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "song_name",
      ",",
      "song_release_year",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "limit",
      "value"
    ],
    "question": "Show the name and the release year of the song by the youngest sing .",
    "question_toks": [
      "Show",
      "the",
      "name",
      "and",
      "the",
      "release",
      "year",
      "of",
      "the",
      "song",
      "by",
      "the",
      "youngest",
      "sing",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "query_toks": [
      "SELECT",
      "song_name",
      ",",
      "song_release_year",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "song_name",
      ",",
      "song_release_year",
      "from",
      "singer",
      "order",
      "by",
      "age",
      "limit",
      "value"
    ],
    "question": "What are the names and release years for all the songs of the youngest sing ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "release",
      "years",
      "for",
      "all",
      "the",
      "songs",
      "of",
      "the",
      "youngest",
      "sing",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "20"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "value"
    ],
    "question": "What are all distinct countries where sings above age 20 are from ?",
    "question_toks": [
      "What",
      "are",
      "all",
      "distinct",
      "countries",
      "where",
      "sings",
      "above",
      "age",
      "20",
      "are",
      "from",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "20"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "value"
    ],
    "question": "What are the different countries with sing above age 20 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "countries",
      "with",
      "sing",
      "above",
      "age",
      "20",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "query_toks": [
      "SELECT",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "country"
    ],
    "question": "Show all countries and the number of singers in each nation .",
    "question_toks": [
      "Show",
      "all",
      "countries",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "nation",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "query_toks": [
      "SELECT",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "country"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "country"
    ],
    "question": "How many singers are from each nations ?",
    "question_toks": [
      "How",
      "many",
      "singers",
      "are",
      "from",
      "each",
      "nations",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "query_toks": [
      "SELECT",
      "song_name",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "singer",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "song_name",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "singer",
      ")"
    ],
    "question": "List all song names by sing above the average age .",
    "question_toks": [
      "List",
      "all",
      "song",
      "names",
      "by",
      "sing",
      "above",
      "the",
      "average",
      "age",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "query_toks": [
      "SELECT",
      "song_name",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "singer",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "song_name",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "singer",
      ")"
    ],
    "question": "What are all the song names by singers who are older than most ?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "song",
      "names",
      "by",
      "singers",
      "who",
      "are",
      "older",
      "than",
      "most",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "query_toks": [
      "SELECT",
      "LOCATION",
      ",",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "capacity",
      "BETWEEN",
      "5000",
      "AND",
      "10000"
    ],
    "query_toks_no_value": [
      "select",
      "location",
      ",",
      "name",
      "from",
      "stadium",
      "where",
      "capacity",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "Show place and name for all stadiums with a capacity between 5000 and 10000 .",
    "question_toks": [
      "Show",
      "place",
      "and",
      "name",
      "for",
      "all",
      "stadiums",
      "with",
      "a",
      "capacity",
      "between",
      "5000",
      "and",
      "10000",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5000.0,
          10000.0
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "query_toks": [
      "SELECT",
      "LOCATION",
      ",",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "capacity",
      "BETWEEN",
      "5000",
      "AND",
      "10000"
    ],
    "query_toks_no_value": [
      "select",
      "location",
      ",",
      "name",
      "from",
      "stadium",
      "where",
      "capacity",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "What are the places and names of all stations with capacity between 5000 and 10000 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "places",
      "and",
      "names",
      "of",
      "all",
      "stations",
      "with",
      "capacity",
      "between",
      "5000",
      "and",
      "10000",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5000.0,
          10000.0
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "stadium"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "from",
      "stadium"
    ],
    "question": "What is the average and the maximum capacity of all venues ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "and",
      "the",
      "maximum",
      "capacity",
      "of",
      "all",
      "venues",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "FROM",
      "stadium"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "capacity",
      ")",
      ",",
      "max",
      "(",
      "capacity",
      ")",
      "from",
      "stadium"
    ],
    "question": "What is the average and maximum capabilities for all stations ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "and",
      "maximum",
      "capabilities",
      "for",
      "all",
      "stations",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "capacity",
      "FROM",
      "stadium",
      "ORDER",
      "BY",
      "average",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "capacity",
      "from",
      "stadium",
      "order",
      "by",
      "average",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name and ability for the stadium with highest average attendance ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "ability",
      "for",
      "the",
      "stadium",
      "with",
      "highest",
      "average",
      "attendance",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "capacity",
      "FROM",
      "stadium",
      "ORDER",
      "BY",
      "average",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "capacity",
      "from",
      "stadium",
      "order",
      "by",
      "average",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name and ability for the stadium with the highest average attendance ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "ability",
      "for",
      "the",
      "stadium",
      "with",
      "the",
      "highest",
      "average",
      "attendance",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "WHERE",
      "YEAR",
      "=",
      "2014",
      "OR",
      "YEAR",
      "=",
      "2015"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question": "How many bands are there in year 2014 or 2015 ?",
    "question_toks": [
      "How",
      "many",
      "bands",
      "are",
      "there",
      "in",
      "year",
      "2014",
      "or",
      "2015",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "WHERE",
      "YEAR",
      "=",
      "2014",
      "OR",
      "YEAR",
      "=",
      "2015"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question": "How many venues occurred in 2014 or 2015 ?",
    "question_toks": [
      "How",
      "many",
      "venues",
      "occurred",
      "in",
      "2014",
      "or",
      "2015",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2015.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "GROUP",
      "BY",
      "T1.stadium_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "group",
      "by",
      "t1",
      ".",
      "stadium_id"
    ],
    "question": "Show the place name and the number of concerts in each stadium .",
    "question_toks": [
      "Show",
      "the",
      "place",
      "name",
      "and",
      "the",
      "number",
      "of",
      "concerts",
      "in",
      "each",
      "stadium",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "GROUP",
      "BY",
      "T1.stadium_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "group",
      "by",
      "t1",
      ".",
      "stadium_id"
    ],
    "question": "For each game , how many concerts play there ?",
    "question_toks": [
      "For",
      "each",
      "game",
      ",",
      "how",
      "many",
      "concerts",
      "play",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "T2.capacity",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.year",
      ">",
      "=",
      "2014",
      "GROUP",
      "BY",
      "T2.stadium_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "capacity",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      ">",
      "=",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "stadium_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Show the stadium name and capacity with most number of gigs in year 2014 or after .",
    "question_toks": [
      "Show",
      "the",
      "stadium",
      "name",
      "and",
      "capacity",
      "with",
      "most",
      "number",
      "of",
      "gigs",
      "in",
      "year",
      "2014",
      "or",
      "after",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          5,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "T2.capacity",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.year",
      ">",
      "=",
      "2014",
      "GROUP",
      "BY",
      "T2.stadium_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "capacity",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      ">",
      "=",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "stadium_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name and capability of the stadium with the most concerts after 2013 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "capability",
      "of",
      "the",
      "stadium",
      "with",
      "the",
      "most",
      "concerts",
      "after",
      "2013",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          5,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "YEAR",
      "FROM",
      "concert",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year",
      "from",
      "concert",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which year has most number of gigs ?",
    "question_toks": [
      "Which",
      "year",
      "has",
      "most",
      "number",
      "of",
      "gigs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "YEAR",
      "FROM",
      "concert",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year",
      "from",
      "concert",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the year that had the most bands ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "year",
      "that",
      "had",
      "the",
      "most",
      "bands",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "stadium_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "stadium_id",
      "FROM",
      "concert",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "stadium",
      "where",
      "stadium_id",
      "not",
      "in",
      "(",
      "select",
      "stadium_id",
      "from",
      "concert",
      ")"
    ],
    "question": "Show the sporting names without any concert .",
    "question_toks": [
      "Show",
      "the",
      "sporting",
      "names",
      "without",
      "any",
      "concert",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      18,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "stadium",
      "WHERE",
      "stadium_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "stadium_id",
      "FROM",
      "concert",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "stadium",
      "where",
      "stadium_id",
      "not",
      "in",
      "(",
      "select",
      "stadium_id",
      "from",
      "concert",
      ")"
    ],
    "question": "What are the names of the stadiums without any gigs ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "stadiums",
      "without",
      "any",
      "gigs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      18,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
    "query_toks": [
      "SELECT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      ">",
      "40",
      "INTERSECT",
      "SELECT",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "age",
      "<",
      "30"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      "from",
      "singer",
      "where",
      "age",
      ">",
      "value",
      "intersect",
      "select",
      "country",
      "from",
      "singer",
      "where",
      "age",
      "<",
      "value"
    ],
    "question": "Show countries where a singing above age 40 and a singer below 30 are from .",
    "question_toks": [
      "Show",
      "countries",
      "where",
      "a",
      "singing",
      "above",
      "age",
      "40",
      "and",
      "a",
      "singer",
      "below",
      "30",
      "are",
      "from",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            4,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            30.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          40.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "stadium",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.year",
      "=",
      "2014"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "stadium",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "Show names for all stadiums except for stadiums having a band in year 2014 .",
    "question_toks": [
      "Show",
      "names",
      "for",
      "all",
      "stadiums",
      "except",
      "for",
      "stadiums",
      "having",
      "a",
      "band",
      "in",
      "year",
      "2014",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2014.0,
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "stadium",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.year",
      "=",
      "2014"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "stadium",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "What are the names of all venues that did not have a concert in 2014 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "venues",
      "that",
      "did",
      "not",
      "have",
      "a",
      "concert",
      "in",
      "2014",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2014.0,
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
    "query_toks": [
      "SELECT",
      "T2.concert_name",
      ",",
      "T2.theme",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "concert",
      "AS",
      "T2",
      "ON",
      "T1.concert_id",
      "=",
      "T2.concert_id",
      "GROUP",
      "BY",
      "T2.concert_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "concert_name",
      ",",
      "t2",
      ".",
      "theme",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "concert",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "concert_id",
      "=",
      "t2",
      ".",
      "concert_id",
      "group",
      "by",
      "t2",
      ".",
      "concert_id"
    ],
    "question": "Show the name and theme for all concerts and the number of singers in each tour .",
    "question_toks": [
      "Show",
      "the",
      "name",
      "and",
      "theme",
      "for",
      "all",
      "concerts",
      "and",
      "the",
      "number",
      "of",
      "singers",
      "in",
      "each",
      "tour",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
    "query_toks": [
      "SELECT",
      "T2.concert_name",
      ",",
      "T2.theme",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "concert",
      "AS",
      "T2",
      "ON",
      "T1.concert_id",
      "=",
      "T2.concert_id",
      "GROUP",
      "BY",
      "T2.concert_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "concert_name",
      ",",
      "t2",
      ".",
      "theme",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "concert",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "concert_id",
      "=",
      "t2",
      ".",
      "concert_id",
      "group",
      "by",
      "t2",
      ".",
      "concert_id"
    ],
    "question": "What are the names , thematic , and number of singers for each and every concert ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      ",",
      "thematic",
      ",",
      "and",
      "number",
      "of",
      "singers",
      "for",
      "each",
      "and",
      "every",
      "concert",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "singer",
      "AS",
      "T2",
      "ON",
      "T1.singer_id",
      "=",
      "T2.singer_id",
      "GROUP",
      "BY",
      "T2.singer_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t2",
      ".",
      "singer_id"
    ],
    "question": "List singer names and number of concerts for each one .",
    "question_toks": [
      "List",
      "singer",
      "names",
      "and",
      "number",
      "of",
      "concerts",
      "for",
      "each",
      "one",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "singer",
      "AS",
      "T2",
      "ON",
      "T1.singer_id",
      "=",
      "T2.singer_id",
      "GROUP",
      "BY",
      "T2.singer_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t2",
      ".",
      "singer_id"
    ],
    "question": "What are the names of the singers and number of venues for each person ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "and",
      "number",
      "of",
      "venues",
      "for",
      "each",
      "person",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "singer",
      "AS",
      "T2",
      "ON",
      "T1.singer_id",
      "=",
      "T2.singer_id",
      "JOIN",
      "concert",
      "AS",
      "T3",
      "ON",
      "T1.concert_id",
      "=",
      "T3.concert_id",
      "WHERE",
      "T3.year",
      "=",
      "2014"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "join",
      "concert",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "concert_id",
      "=",
      "t3",
      ".",
      "concert_id",
      "where",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "List all singing names in concerts in year 2014 .",
    "question_toks": [
      "List",
      "all",
      "singing",
      "names",
      "in",
      "concerts",
      "in",
      "year",
      "2014",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "singer_in_concert",
      "AS",
      "T1",
      "JOIN",
      "singer",
      "AS",
      "T2",
      "ON",
      "T1.singer_id",
      "=",
      "T2.singer_id",
      "JOIN",
      "concert",
      "AS",
      "T3",
      "ON",
      "T1.concert_id",
      "=",
      "T3.concert_id",
      "WHERE",
      "T3.year",
      "=",
      "2014"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "singer_in_concert",
      "as",
      "t1",
      "join",
      "singer",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "join",
      "concert",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "concert_id",
      "=",
      "t3",
      ".",
      "concert_id",
      "where",
      "t3",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "What are the names of the singers who performed in a live in 2014 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "who",
      "performed",
      "in",
      "a",
      "live",
      "in",
      "2014",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "song_name",
      "LIKE",
      "'",
      "%",
      "Hey",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "country",
      "from",
      "singer",
      "where",
      "song_name",
      "like",
      "value"
    ],
    "question": "what is the name and nation of the person who have a song having ' Hey ' in its name ?",
    "question_toks": [
      "what",
      "is",
      "the",
      "name",
      "and",
      "nation",
      "of",
      "the",
      "person",
      "who",
      "have",
      "a",
      "song",
      "having",
      "'",
      "Hey",
      "'",
      "in",
      "its",
      "name",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"%Hey%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "country",
      "FROM",
      "singer",
      "WHERE",
      "song_name",
      "LIKE",
      "'",
      "%",
      "Hey",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "country",
      "from",
      "singer",
      "where",
      "song_name",
      "like",
      "value"
    ],
    "question": "What is the name and country of origin of every singer who has a music with the word ' Hey ' in its title ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "country",
      "of",
      "origin",
      "of",
      "every",
      "singer",
      "who",
      "has",
      "a",
      "music",
      "with",
      "the",
      "word",
      "'",
      "Hey",
      "'",
      "in",
      "its",
      "title",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"%Hey%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2014",
      "INTERSECT",
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2015"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "Find the name and place of the stadiums which some concerts happened in the years of both 2014 and 2015 .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "place",
      "of",
      "the",
      "stadiums",
      "which",
      "some",
      "concerts",
      "happened",
      "in",
      "the",
      "years",
      "of",
      "both",
      "2014",
      "and",
      "2015",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2015.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2014",
      "INTERSECT",
      "SELECT",
      "T2.name",
      ",",
      "T2.location",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "WHERE",
      "T1.Year",
      "=",
      "2015"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "location",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "What are the names and locations of the stadiums that had venues that occurred in both 2014 and 2015 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "locations",
      "of",
      "the",
      "stadiums",
      "that",
      "had",
      "venues",
      "that",
      "occurred",
      "in",
      "both",
      "2014",
      "and",
      "2015",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            2015.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          2014.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "ORDER",
      "BY",
      "T2.Capacity",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "order",
      "by",
      "t2",
      ".",
      "capacity",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the number of concerts happened in the stadium with the highest capability .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "concerts",
      "happened",
      "in",
      "the",
      "stadium",
      "with",
      "the",
      "highest",
      "capability",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "concert_singer",
    "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "concert",
      "AS",
      "T1",
      "JOIN",
      "stadium",
      "AS",
      "T2",
      "ON",
      "T1.stadium_id",
      "=",
      "T2.stadium_id",
      "ORDER",
      "BY",
      "T2.Capacity",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "concert",
      "as",
      "t1",
      "join",
      "stadium",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stadium_id",
      "=",
      "t2",
      ".",
      "stadium_id",
      "order",
      "by",
      "t2",
      ".",
      "capacity",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the number of concerts that occurred in the stadium with the largest capability ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "concerts",
      "that",
      "occurred",
      "in",
      "the",
      "stadium",
      "with",
      "the",
      "largest",
      "capability",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM pets WHERE weight  >  10",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "pets",
      "WHERE",
      "weight",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "pets",
      "where",
      "weight",
      ">",
      "value"
    ],
    "question": "Find the number of livestock whose weight is heavier than 10 .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "livestock",
      "whose",
      "weight",
      "is",
      "heavier",
      "than",
      "10",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM pets WHERE weight  >  10",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "pets",
      "WHERE",
      "weight",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "pets",
      "where",
      "weight",
      ">",
      "value"
    ],
    "question": "How many pets have a greater weigh than 10 ?",
    "question_toks": [
      "How",
      "many",
      "pets",
      "have",
      "a",
      "greater",
      "weigh",
      "than",
      "10",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks": [
      "SELECT",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question": "Find the weigh of the youngest dog .",
    "question_toks": [
      "Find",
      "the",
      "weigh",
      "of",
      "the",
      "youngest",
      "dog",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks": [
      "SELECT",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question": "How much does the youngest canine weigh ?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "youngest",
      "canine",
      "weigh",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "weight",
      ")",
      ",",
      "petType",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "petType"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "Find the maximum weight for each type of vet . List the maximum weight and pet type .",
    "question_toks": [
      "Find",
      "the",
      "maximum",
      "weight",
      "for",
      "each",
      "type",
      "of",
      "vet",
      ".",
      "List",
      "the",
      "maximum",
      "weight",
      "and",
      "pet",
      "type",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "weight",
      ")",
      ",",
      "petType",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "petType"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "List the maximum weight and type for each type of dog .",
    "question_toks": [
      "List",
      "the",
      "maximum",
      "weight",
      "and",
      "type",
      "for",
      "each",
      "type",
      "of",
      "dog",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.age",
      ">",
      "20"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "age",
      ">",
      "value"
    ],
    "question": "Find number of pets owned by school who are older than 20 .",
    "question_toks": [
      "Find",
      "number",
      "of",
      "pets",
      "owned",
      "by",
      "school",
      "who",
      "are",
      "older",
      "than",
      "20",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.age",
      ">",
      "20"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "age",
      ">",
      "value"
    ],
    "question": "How many livestock are owned by students that have an age greater than 20 ?",
    "question_toks": [
      "How",
      "many",
      "livestock",
      "are",
      "owned",
      "by",
      "students",
      "that",
      "have",
      "an",
      "age",
      "greater",
      "than",
      "20",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          20.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T2.petid",
      "=",
      "T3.petid",
      "WHERE",
      "T1.sex",
      "=",
      "'F",
      "'",
      "AND",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "petid",
      "=",
      "t3",
      ".",
      "petid",
      "where",
      "t1",
      ".",
      "sex",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "Find the number of canine pets that are raised by female students ( with sex F ) .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "canine",
      "pets",
      "that",
      "are",
      "raised",
      "by",
      "female",
      "students",
      "(",
      "with",
      "sex",
      "F",
      ")",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"F\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T2.petid",
      "=",
      "T3.petid",
      "WHERE",
      "T1.sex",
      "=",
      "'F",
      "'",
      "AND",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "petid",
      "=",
      "t3",
      ".",
      "petid",
      "where",
      "t1",
      ".",
      "sex",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "How many dogs pets are raised by female pupils ?",
    "question_toks": [
      "How",
      "many",
      "dogs",
      "pets",
      "are",
      "raised",
      "by",
      "female",
      "pupils",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"F\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(DISTINCT pettype) FROM pets",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "pettype",
      ")",
      "FROM",
      "pets"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "pettype",
      ")",
      "from",
      "pets"
    ],
    "question": "Find the number of distinct type of veterinary .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "distinct",
      "type",
      "of",
      "veterinary",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(DISTINCT pettype) FROM pets",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "pettype",
      ")",
      "FROM",
      "pets"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "pettype",
      ")",
      "from",
      "pets"
    ],
    "question": "How many different kinds of pet are there ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "kinds",
      "of",
      "pet",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                12,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      "OR",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "or",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "Find the first name of students who have cat or dog dog .",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "of",
      "students",
      "who",
      "have",
      "cat",
      "or",
      "dog",
      "dog",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      "OR",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "or",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "What are the one names of every student who has a cat or dog as a pet ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "one",
      "names",
      "of",
      "every",
      "student",
      "who",
      "has",
      "a",
      "cat",
      "or",
      "dog",
      "as",
      "a",
      "pet",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "query_toks": [
      "SELECT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "Find the name of students who have both cat and dog dog .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "students",
      "who",
      "have",
      "both",
      "cat",
      "and",
      "dog",
      "dog",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"dog\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
    "query_toks": [
      "SELECT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.Fname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'dog",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "fname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "What are the students ' first names who have both cats and dogs as dogs ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "students",
      "'",
      "first",
      "names",
      "who",
      "have",
      "both",
      "cats",
      "and",
      "dogs",
      "as",
      "dogs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"dog\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "query_toks": [
      "SELECT",
      "major",
      ",",
      "age",
      "FROM",
      "student",
      "WHERE",
      "stuid",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "major",
      ",",
      "age",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      ")"
    ],
    "question": "Find the major and age of students who do not have a kitty pet .",
    "question_toks": [
      "Find",
      "the",
      "major",
      "and",
      "age",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "a",
      "kitty",
      "pet",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "query_toks": [
      "SELECT",
      "major",
      ",",
      "age",
      "FROM",
      "student",
      "WHERE",
      "stuid",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "major",
      ",",
      "age",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      ")"
    ],
    "question": "What major is every school who does not own a cat as a pet , and also how old are they ?",
    "question_toks": [
      "What",
      "major",
      "is",
      "every",
      "school",
      "who",
      "does",
      "not",
      "own",
      "a",
      "cat",
      "as",
      "a",
      "pet",
      ",",
      "and",
      "also",
      "how",
      "old",
      "are",
      "they",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "query_toks": [
      "SELECT",
      "stuid",
      "FROM",
      "student",
      "EXCEPT",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "stuid",
      "from",
      "student",
      "except",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "Find the id of students who do not have a kitty pet .",
    "question_toks": [
      "Find",
      "the",
      "id",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "a",
      "kitty",
      "pet",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"cat\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
    "query_toks": [
      "SELECT",
      "stuid",
      "FROM",
      "student",
      "EXCEPT",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "stuid",
      "from",
      "student",
      "except",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "What are the ids of the students who do not own kitty as pets ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "the",
      "students",
      "who",
      "do",
      "not",
      "own",
      "kitty",
      "as",
      "pets",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"cat\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "query_toks": [
      "SELECT",
      "T1.fname",
      ",",
      "T1.age",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'dog",
      "'",
      "AND",
      "T1.stuid",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      ")"
    ],
    "question": "Find the full name and age of students who have a dog but do not have a cat as a pet .",
    "question_toks": [
      "Find",
      "the",
      "full",
      "name",
      "and",
      "age",
      "of",
      "students",
      "who",
      "have",
      "a",
      "dog",
      "but",
      "do",
      "not",
      "have",
      "a",
      "cat",
      "as",
      "a",
      "pet",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "query_toks": [
      "SELECT",
      "T1.fname",
      ",",
      "T1.age",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'dog",
      "'",
      "AND",
      "T1.stuid",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pettype",
      "=",
      "'cat",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pettype",
      "=",
      "value",
      ")"
    ],
    "question": "What is the first name of every school who has a dog but does not have a cat ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "of",
      "every",
      "school",
      "who",
      "has",
      "a",
      "dog",
      "but",
      "does",
      "not",
      "have",
      "a",
      "cat",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"dog\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    12,
                    false
                  ],
                  null
                ],
                "\"cat\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks": [
      "SELECT",
      "pettype",
      ",",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "pettype",
      ",",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question": "Find the type and weight of the youngest vet .",
    "question_toks": [
      "Find",
      "the",
      "type",
      "and",
      "weight",
      "of",
      "the",
      "youngest",
      "vet",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "query_toks": [
      "SELECT",
      "pettype",
      ",",
      "weight",
      "FROM",
      "pets",
      "ORDER",
      "BY",
      "pet_age",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "pettype",
      ",",
      "weight",
      "from",
      "pets",
      "order",
      "by",
      "pet_age",
      "limit",
      "value"
    ],
    "question": "What kind of pet is the youngest animal , and how much does it weigh ?",
    "question_toks": [
      "What",
      "kind",
      "of",
      "pet",
      "is",
      "the",
      "youngest",
      "animal",
      ",",
      "and",
      "how",
      "much",
      "does",
      "it",
      "weigh",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "query_toks": [
      "SELECT",
      "petid",
      ",",
      "weight",
      "FROM",
      "pets",
      "WHERE",
      "pet_age",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "petid",
      ",",
      "weight",
      "from",
      "pets",
      "where",
      "pet_age",
      ">",
      "value"
    ],
    "question": "Find the id and amount of all pets whose age is older than 1 .",
    "question_toks": [
      "Find",
      "the",
      "id",
      "and",
      "amount",
      "of",
      "all",
      "pets",
      "whose",
      "age",
      "is",
      "older",
      "than",
      "1",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "query_toks": [
      "SELECT",
      "petid",
      ",",
      "weight",
      "FROM",
      "pets",
      "WHERE",
      "pet_age",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "petid",
      ",",
      "weight",
      "from",
      "pets",
      "where",
      "pet_age",
      ">",
      "value"
    ],
    "question": "What is the id and weighing of every pet who is older than 1 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "id",
      "and",
      "weighing",
      "of",
      "every",
      "pet",
      "who",
      "is",
      "older",
      "than",
      "1",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "pet_age",
      ")",
      ",",
      "max",
      "(",
      "pet_age",
      ")",
      ",",
      "pettype",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "pettype"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "pet_age",
      ")",
      ",",
      "max",
      "(",
      "pet_age",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "Find the average and maximum age for each kind of pet .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "and",
      "maximum",
      "age",
      "for",
      "each",
      "kind",
      "of",
      "pet",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "pet_age",
      ")",
      ",",
      "max",
      "(",
      "pet_age",
      ")",
      ",",
      "pettype",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "pettype"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "pet_age",
      ")",
      ",",
      "max",
      "(",
      "pet_age",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "What is the average and maximum age for each dog type ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "and",
      "maximum",
      "age",
      "for",
      "each",
      "dog",
      "type",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "pettype"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "Find the average weigh for each pet type .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "weigh",
      "for",
      "each",
      "pet",
      "type",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "FROM",
      "pets",
      "GROUP",
      "BY",
      "pettype"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "pettype",
      "from",
      "pets",
      "group",
      "by",
      "pettype"
    ],
    "question": "What is the average weigh for each type of pet ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "weigh",
      "for",
      "each",
      "type",
      "of",
      "pet",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          12,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.fname",
      ",",
      "T1.age",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid"
    ],
    "question": "Find the first name and age of pupils who have a pet .",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "and",
      "age",
      "of",
      "pupils",
      "who",
      "have",
      "a",
      "pet",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.fname",
      ",",
      "T1.age",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid"
    ],
    "question": "What are the different first names and ages of the pupils who do have pets ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "first",
      "names",
      "and",
      "ages",
      "of",
      "the",
      "pupils",
      "who",
      "do",
      "have",
      "pets",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "query_toks": [
      "SELECT",
      "T2.petid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.Lname",
      "=",
      "'Smith",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "petid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "lname",
      "=",
      "value"
    ],
    "question": "Find the id of the vet owned by student whose last name is \u2018 Smith \u2019 .",
    "question_toks": [
      "Find",
      "the",
      "id",
      "of",
      "the",
      "vet",
      "owned",
      "by",
      "student",
      "whose",
      "last",
      "name",
      "is",
      "\u2018",
      "Smith",
      "\u2019",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Smith\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "query_toks": [
      "SELECT",
      "T2.petid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "WHERE",
      "T1.Lname",
      "=",
      "'Smith",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "petid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "where",
      "t1",
      ".",
      "lname",
      "=",
      "value"
    ],
    "question": "What is the id of the vet owned by the student whose last name is ' Smith ' ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "id",
      "of",
      "the",
      "vet",
      "owned",
      "by",
      "the",
      "student",
      "whose",
      "last",
      "name",
      "is",
      "'",
      "Smith",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Smith\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "GROUP",
      "BY",
      "T1.stuid"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "group",
      "by",
      "t1",
      ".",
      "stuid"
    ],
    "question": "Find the number of pets for each student who has any one and student id .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "pets",
      "for",
      "each",
      "student",
      "who",
      "has",
      "any",
      "one",
      "and",
      "student",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "GROUP",
      "BY",
      "T1.stuid"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "group",
      "by",
      "t1",
      ".",
      "stuid"
    ],
    "question": "For students who have pets , how many one does each student have ?",
    "question_toks": [
      "For",
      "students",
      "who",
      "have",
      "pets",
      ",",
      "how",
      "many",
      "one",
      "does",
      "each",
      "student",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.fname",
      ",",
      "T1.sex",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "GROUP",
      "BY",
      "T1.stuid",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "sex",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "group",
      "by",
      "t1",
      ".",
      "stuid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find the one name and gender of student who have more than one pet .",
    "question_toks": [
      "Find",
      "the",
      "one",
      "name",
      "and",
      "gender",
      "of",
      "student",
      "who",
      "have",
      "more",
      "than",
      "one",
      "pet",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.fname",
      ",",
      "T1.sex",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "GROUP",
      "BY",
      "T1.stuid",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fname",
      ",",
      "t1",
      ".",
      "sex",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "group",
      "by",
      "t1",
      ".",
      "stuid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What is the first name and gender of the all the pupils who have more than one pet ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "and",
      "gender",
      "of",
      "the",
      "all",
      "the",
      "pupils",
      "who",
      "have",
      "more",
      "than",
      "one",
      "pet",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "query_toks": [
      "SELECT",
      "T1.lname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pet_age",
      "=",
      "3",
      "AND",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "lname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pet_age",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "Find the original name of the student who has a cat that is age 3 .",
    "question_toks": [
      "Find",
      "the",
      "original",
      "name",
      "of",
      "the",
      "student",
      "who",
      "has",
      "a",
      "cat",
      "that",
      "is",
      "age",
      "3",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          3.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "query_toks": [
      "SELECT",
      "T1.lname",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      "JOIN",
      "pets",
      "AS",
      "T3",
      "ON",
      "T3.petid",
      "=",
      "T2.petid",
      "WHERE",
      "T3.pet_age",
      "=",
      "3",
      "AND",
      "T3.pettype",
      "=",
      "'cat",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "lname",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      "join",
      "pets",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "petid",
      "=",
      "t2",
      ".",
      "petid",
      "where",
      "t3",
      ".",
      "pet_age",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "pettype",
      "=",
      "value"
    ],
    "question": "What is the last name of the student who has a kitty that is 3 years old ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "last",
      "name",
      "of",
      "the",
      "student",
      "who",
      "has",
      "a",
      "kitty",
      "that",
      "is",
      "3",
      "years",
      "old",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          3.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"cat\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "student",
      "WHERE",
      "stuid",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      ")"
    ],
    "question": "Find the average age of pupils who do not have any pet .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "age",
      "of",
      "pupils",
      "who",
      "do",
      "not",
      "have",
      "any",
      "pet",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "student",
      "WHERE",
      "stuid",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.stuid",
      "FROM",
      "student",
      "AS",
      "T1",
      "JOIN",
      "has_pet",
      "AS",
      "T2",
      "ON",
      "T1.stuid",
      "=",
      "T2.stuid",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "student",
      "where",
      "stuid",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "stuid",
      "from",
      "student",
      "as",
      "t1",
      "join",
      "has_pet",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "stuid",
      "=",
      "t2",
      ".",
      "stuid",
      ")"
    ],
    "question": "What is the average age for all students who do not own any dogs ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "for",
      "all",
      "students",
      "who",
      "do",
      "not",
      "own",
      "any",
      "dogs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CONTINENTS;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents"
    ],
    "question": "How many oceans are there ?",
    "question_toks": [
      "How",
      "many",
      "oceans",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CONTINENTS;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents"
    ],
    "question": "What is the number of global ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "global",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "query_toks": [
      "SELECT",
      "T1.ContId",
      ",",
      "T1.Continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.ContId",
      "=",
      "T2.Continent",
      "GROUP",
      "BY",
      "T1.ContId",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "contid",
      ",",
      "t1",
      ".",
      "continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contid",
      "=",
      "t2",
      ".",
      "continent",
      "group",
      "by",
      "t1",
      ".",
      "contid"
    ],
    "question": "How many places does each continent have ? List the continent id , continent name and the number of countries .",
    "question_toks": [
      "How",
      "many",
      "places",
      "does",
      "each",
      "continent",
      "have",
      "?",
      "List",
      "the",
      "continent",
      "id",
      ",",
      "continent",
      "name",
      "and",
      "the",
      "number",
      "of",
      "countries",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "query_toks": [
      "SELECT",
      "T1.ContId",
      ",",
      "T1.Continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.ContId",
      "=",
      "T2.Continent",
      "GROUP",
      "BY",
      "T1.ContId",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "contid",
      ",",
      "t1",
      ".",
      "continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contid",
      "=",
      "t2",
      ".",
      "continent",
      "group",
      "by",
      "t1",
      ".",
      "contid"
    ],
    "question": "For each land , list its id , name , and how many countries it has ?",
    "question_toks": [
      "For",
      "each",
      "land",
      ",",
      "list",
      "its",
      "id",
      ",",
      "name",
      ",",
      "and",
      "how",
      "many",
      "countries",
      "it",
      "has",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM COUNTRIES;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "COUNTRIES",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries"
    ],
    "question": "How many lands are listed ?",
    "question_toks": [
      "How",
      "many",
      "lands",
      "are",
      "listed",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM COUNTRIES;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "COUNTRIES",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries"
    ],
    "question": "How many places exist ?",
    "question_toks": [
      "How",
      "many",
      "places",
      "exist",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
    "query_toks": [
      "SELECT",
      "T1.FullName",
      ",",
      "T1.Id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "GROUP",
      "BY",
      "T1.Id",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fullname",
      ",",
      "t1",
      ".",
      "id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id"
    ],
    "question": "How many designs does each car maker produce ? List maker full name , id and the number .",
    "question_toks": [
      "How",
      "many",
      "designs",
      "does",
      "each",
      "car",
      "maker",
      "produce",
      "?",
      "List",
      "maker",
      "full",
      "name",
      ",",
      "id",
      "and",
      "the",
      "number",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
    "query_toks": [
      "SELECT",
      "T1.FullName",
      ",",
      "T1.Id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "GROUP",
      "BY",
      "T1.Id",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fullname",
      ",",
      "t1",
      ".",
      "id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id"
    ],
    "question": "What is the full name of each auto maker , along with its id and how many models it produces ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "full",
      "name",
      "of",
      "each",
      "auto",
      "maker",
      ",",
      "along",
      "with",
      "its",
      "id",
      "and",
      "how",
      "many",
      "models",
      "it",
      "produces",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "ORDER",
      "BY",
      "T2.horsepower",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "asc",
      "limit",
      "value"
    ],
    "question": "Which model of the driving has the minimum horsepower ?",
    "question_toks": [
      "Which",
      "model",
      "of",
      "the",
      "driving",
      "has",
      "the",
      "minimum",
      "horsepower",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "ORDER",
      "BY",
      "T2.horsepower",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the model of the car with the smallest amount of hp ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "model",
      "of",
      "the",
      "car",
      "with",
      "the",
      "smallest",
      "amount",
      "of",
      "hp",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "query_toks": [
      "SELECT",
      "T1.model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.Weight",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "Weight",
      ")",
      "FROM",
      "CARS_DATA",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "weight",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "weight",
      ")",
      "from",
      "cars_data",
      ")"
    ],
    "question": "Find the model of the automotive whose weight is below the average weight .",
    "question_toks": [
      "Find",
      "the",
      "model",
      "of",
      "the",
      "automotive",
      "whose",
      "weight",
      "is",
      "below",
      "the",
      "average",
      "weight",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "query_toks": [
      "SELECT",
      "T1.model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.Weight",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "Weight",
      ")",
      "FROM",
      "CARS_DATA",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "weight",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "weight",
      ")",
      "from",
      "cars_data",
      ")"
    ],
    "question": "What is the model for the car with a weighed smaller than the average ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "model",
      "for",
      "the",
      "car",
      "with",
      "a",
      "weighed",
      "smaller",
      "than",
      "the",
      "average",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T3",
      "ON",
      "T2.model",
      "=",
      "T3.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T3.MakeId",
      "=",
      "T4.id",
      "WHERE",
      "T4.year",
      "=",
      "'1970",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "model",
      "=",
      "t3",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t4",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "Find the name of the making that produced some cars in the year of 1970 ?",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "making",
      "that",
      "produced",
      "some",
      "cars",
      "in",
      "the",
      "year",
      "of",
      "1970",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"1970\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T3",
      "ON",
      "T2.model",
      "=",
      "T3.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T3.MakeId",
      "=",
      "T4.id",
      "WHERE",
      "T4.year",
      "=",
      "'1970",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "model",
      "=",
      "t3",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t4",
      ".",
      "year",
      "=",
      "value"
    ],
    "question": "What is the name of the different much makers who produced a car in 1970 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "different",
      "much",
      "makers",
      "who",
      "produced",
      "a",
      "car",
      "in",
      "1970",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          "\"1970\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "query_toks": [
      "SELECT",
      "T2.Make",
      ",",
      "T1.Year",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T1.Year",
      "=",
      "(",
      "SELECT",
      "min",
      "(",
      "YEAR",
      ")",
      "FROM",
      "CARS_DATA",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "make",
      ",",
      "t1",
      ".",
      "year",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "(",
      "select",
      "min",
      "(",
      "year",
      ")",
      "from",
      "cars_data",
      ")"
    ],
    "question": "Find the make and production time of the driven that were produced in the earliest year ?",
    "question_toks": [
      "Find",
      "the",
      "make",
      "and",
      "production",
      "time",
      "of",
      "the",
      "driven",
      "that",
      "were",
      "produced",
      "in",
      "the",
      "earliest",
      "year",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "query_toks": [
      "SELECT",
      "T2.Make",
      ",",
      "T1.Year",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T1.Year",
      "=",
      "(",
      "SELECT",
      "min",
      "(",
      "YEAR",
      ")",
      "FROM",
      "CARS_DATA",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "make",
      ",",
      "t1",
      ".",
      "year",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t1",
      ".",
      "year",
      "=",
      "(",
      "select",
      "min",
      "(",
      "year",
      ")",
      "from",
      "cars_data",
      ")"
    ],
    "question": "What is the creator of the carr produced in the earliest year and what year was it ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "creator",
      "of",
      "the",
      "carr",
      "produced",
      "in",
      "the",
      "earliest",
      "year",
      "and",
      "what",
      "year",
      "was",
      "it",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.model",
      "=",
      "T2.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.id",
      "WHERE",
      "T3.year",
      ">",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question": "Which distinct car edition are the produced after 1980 ?",
    "question_toks": [
      "Which",
      "distinct",
      "car",
      "edition",
      "are",
      "the",
      "produced",
      "after",
      "1980",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.model",
      "=",
      "T2.model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.id",
      "WHERE",
      "T3.year",
      ">",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "year",
      ">",
      "value"
    ],
    "question": "What are the different designs for the cards produced after 1980 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "designs",
      "for",
      "the",
      "cards",
      "produced",
      "after",
      "1980",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "query_toks": [
      "SELECT",
      "T1.Continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.ContId",
      "=",
      "T2.continent",
      "JOIN",
      "car_makers",
      "AS",
      "T3",
      "ON",
      "T2.CountryId",
      "=",
      "T3.Country",
      "GROUP",
      "BY",
      "T1.Continent",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contid",
      "=",
      "t2",
      ".",
      "continent",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "countryid",
      "=",
      "t3",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "continent"
    ],
    "question": "How many driving makers are there in each continents ? List the continent name and the count .",
    "question_toks": [
      "How",
      "many",
      "driving",
      "makers",
      "are",
      "there",
      "in",
      "each",
      "continents",
      "?",
      "List",
      "the",
      "continent",
      "name",
      "and",
      "the",
      "count",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "query_toks": [
      "SELECT",
      "T1.Continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CONTINENTS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.ContId",
      "=",
      "T2.continent",
      "JOIN",
      "car_makers",
      "AS",
      "T3",
      "ON",
      "T2.CountryId",
      "=",
      "T3.Country",
      "GROUP",
      "BY",
      "T1.Continent",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "continent",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "continents",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contid",
      "=",
      "t2",
      ".",
      "continent",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "countryid",
      "=",
      "t3",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "continent"
    ],
    "question": "What is the name of each continent and how many car produced are there in each one ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "each",
      "continent",
      "and",
      "how",
      "many",
      "car",
      "produced",
      "are",
      "there",
      "in",
      "each",
      "one",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T2.CountryName",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.Country",
      "=",
      "T2.CountryId",
      "GROUP",
      "BY",
      "T1.Country",
      "ORDER",
      "BY",
      "Count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "countryname",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "country",
      "=",
      "t2",
      ".",
      "countryid",
      "group",
      "by",
      "t1",
      ".",
      "country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which of the countries has the most car makers ? List the place name .",
    "question_toks": [
      "Which",
      "of",
      "the",
      "countries",
      "has",
      "the",
      "most",
      "car",
      "makers",
      "?",
      "List",
      "the",
      "place",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T2.CountryName",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.Country",
      "=",
      "T2.CountryId",
      "GROUP",
      "BY",
      "T1.Country",
      "ORDER",
      "BY",
      "Count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "countryname",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "country",
      "=",
      "t2",
      ".",
      "countryid",
      "group",
      "by",
      "t1",
      ".",
      "country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the country with the most driving makers ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "country",
      "with",
      "the",
      "most",
      "driving",
      "makers",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
    "query_toks": [
      "SELECT",
      "Count",
      "(",
      "*",
      ")",
      ",",
      "T2.FullName",
      ",",
      "T2.id",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.Maker",
      "=",
      "T2.Id",
      "GROUP",
      "BY",
      "T2.id",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2",
      ".",
      "fullname",
      ",",
      "t2",
      ".",
      "id",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t2",
      ".",
      "id"
    ],
    "question": "How many car models are produced by each maker ? List the count and the one full name .",
    "question_toks": [
      "How",
      "many",
      "car",
      "models",
      "are",
      "produced",
      "by",
      "each",
      "maker",
      "?",
      "List",
      "the",
      "count",
      "and",
      "the",
      "one",
      "full",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
    "query_toks": [
      "SELECT",
      "Count",
      "(",
      "*",
      ")",
      ",",
      "T2.FullName",
      ",",
      "T2.id",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.Maker",
      "=",
      "T2.Id",
      "GROUP",
      "BY",
      "T2.id",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2",
      ".",
      "fullname",
      ",",
      "t2",
      ".",
      "id",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t2",
      ".",
      "id"
    ],
    "question": "What is the number of car models that are produced by each making and what is the id and full name of each maker ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "car",
      "models",
      "that",
      "are",
      "produced",
      "by",
      "each",
      "making",
      "and",
      "what",
      "is",
      "the",
      "id",
      "and",
      "full",
      "name",
      "of",
      "each",
      "maker",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "query_toks": [
      "SELECT",
      "T1.Accelerate",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Make",
      "=",
      "'amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "accelerate",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "make",
      "=",
      "value"
    ],
    "question": "What is the advance of the car make amc hornet sportabout ( sw ) ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "advance",
      "of",
      "the",
      "car",
      "make",
      "amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"amc hornet sportabout (sw)\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "query_toks": [
      "SELECT",
      "T1.Accelerate",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Make",
      "=",
      "'amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "accelerate",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "make",
      "=",
      "value"
    ],
    "question": "How much does the car accelerate that gives amc hornet sportabout ( sw ) ?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "car",
      "accelerate",
      "that",
      "gives",
      "amc",
      "hornet",
      "sportabout",
      "(",
      "sw",
      ")",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"amc hornet sportabout (sw)\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.Country",
      "=",
      "T2.CountryId",
      "WHERE",
      "T2.CountryName",
      "=",
      "'france",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "country",
      "=",
      "t2",
      ".",
      "countryid",
      "where",
      "t2",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question": "How many auto makers are there in france ?",
    "question_toks": [
      "How",
      "many",
      "auto",
      "makers",
      "are",
      "there",
      "in",
      "france",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"france\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T2",
      "ON",
      "T1.Country",
      "=",
      "T2.CountryId",
      "WHERE",
      "T2.CountryName",
      "=",
      "'france",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "countries",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "country",
      "=",
      "t2",
      ".",
      "countryid",
      "where",
      "t2",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question": "What is the number of who of care in France ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "who",
      "of",
      "care",
      "in",
      "France",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"france\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.Maker",
      "=",
      "T2.Id",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T3",
      "ON",
      "T2.Country",
      "=",
      "T3.CountryId",
      "WHERE",
      "T3.CountryName",
      "=",
      "'usa",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "countries",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "country",
      "=",
      "t3",
      ".",
      "countryid",
      "where",
      "t3",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question": "How many sedan models are produced in the usa ?",
    "question_toks": [
      "How",
      "many",
      "sedan",
      "models",
      "are",
      "produced",
      "in",
      "the",
      "usa",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"usa\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.Maker",
      "=",
      "T2.Id",
      "JOIN",
      "COUNTRIES",
      "AS",
      "T3",
      "ON",
      "T2.Country",
      "=",
      "T3.CountryId",
      "WHERE",
      "T3.CountryName",
      "=",
      "'usa",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "countries",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "country",
      "=",
      "t3",
      ".",
      "countryid",
      "where",
      "t3",
      ".",
      "countryname",
      "=",
      "value"
    ],
    "question": "What is the count of the car shows produced in the United States ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "count",
      "of",
      "the",
      "car",
      "shows",
      "produced",
      "in",
      "the",
      "United",
      "States",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"usa\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "mpg",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "4",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value"
    ],
    "question": "What is the average miles per gallon(mpg ) of the cars with 4 litre ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "miles",
      "per",
      "gallon(mpg",
      ")",
      "of",
      "the",
      "cars",
      "with",
      "4",
      "litre",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "mpg",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "4",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "mpg",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value"
    ],
    "question": "What is the average miles per gallon of all the cards with 4 engine ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "miles",
      "per",
      "gallon",
      "of",
      "all",
      "the",
      "cards",
      "with",
      "4",
      "engine",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "Weight",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "4",
      "AND",
      "YEAR",
      "=",
      "1974",
      "ORDER",
      "BY",
      "Weight",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "weight",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "and",
      "year",
      "=",
      "value",
      "order",
      "by",
      "weight",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the smallest weight of the engine produced with 8 cylinders on 1974 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "smallest",
      "weight",
      "of",
      "the",
      "engine",
      "produced",
      "with",
      "8",
      "cylinders",
      "on",
      "1974",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1974.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "Weight",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "4",
      "AND",
      "YEAR",
      "=",
      "1974",
      "ORDER",
      "BY",
      "Weight",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "weight",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "and",
      "year",
      "=",
      "value",
      "order",
      "by",
      "weight",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the minimu weight of the car with 8 engine produced in 1974 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "minimu",
      "weight",
      "of",
      "the",
      "car",
      "with",
      "8",
      "engine",
      "produced",
      "in",
      "1974",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1974.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "query_toks": [
      "SELECT",
      "Maker",
      ",",
      "Model",
      "FROM",
      "MODEL_LIST",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "maker",
      ",",
      "model",
      "from",
      "model_list"
    ],
    "question": "What are all the makers and kinds ?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "makers",
      "and",
      "kinds",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "query_toks": [
      "SELECT",
      "Maker",
      ",",
      "Model",
      "FROM",
      "MODEL_LIST",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "maker",
      ",",
      "model",
      "from",
      "model_list"
    ],
    "question": "What are the makers and designs ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "makers",
      "and",
      "designs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "query_toks": [
      "SELECT",
      "T1.CountryName",
      ",",
      "T1.CountryId",
      "FROM",
      "COUNTRIES",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "GROUP",
      "BY",
      "T1.CountryId",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryname",
      ",",
      "t1",
      ".",
      "countryid",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the nationalities having at least one car maker ? List name and id .",
    "question_toks": [
      "What",
      "are",
      "the",
      "nationalities",
      "having",
      "at",
      "least",
      "one",
      "car",
      "maker",
      "?",
      "List",
      "name",
      "and",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "query_toks": [
      "SELECT",
      "T1.CountryName",
      ",",
      "T1.CountryId",
      "FROM",
      "COUNTRIES",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "GROUP",
      "BY",
      "T1.CountryId",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryname",
      ",",
      "t1",
      ".",
      "countryid",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names and ids of all countries with at least one car based ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ids",
      "of",
      "all",
      "countries",
      "with",
      "at",
      "least",
      "one",
      "car",
      "based",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "horsepower",
      ">",
      "150",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "horsepower",
      ">",
      "value"
    ],
    "question": "What is the number of the cars with engine more than 150 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "the",
      "cars",
      "with",
      "engine",
      "more",
      "than",
      "150",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          150.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "horsepower",
      ">",
      "150",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "horsepower",
      ">",
      "value"
    ],
    "question": "What is the number of one with a horsepower greater than 150 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "one",
      "with",
      "a",
      "horsepower",
      "greater",
      "than",
      "150",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          150.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Weight",
      ")",
      ",",
      "YEAR",
      "FROM",
      "CARS_DATA",
      "GROUP",
      "BY",
      "YEAR",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "year",
      "from",
      "cars_data",
      "group",
      "by",
      "year"
    ],
    "question": "What is the average weight of all each year ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "weight",
      "of",
      "all",
      "each",
      "year",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Weight",
      ")",
      ",",
      "YEAR",
      "FROM",
      "CARS_DATA",
      "GROUP",
      "BY",
      "YEAR",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "weight",
      ")",
      ",",
      "year",
      "from",
      "cars_data",
      "group",
      "by",
      "year"
    ],
    "question": "What is the average weigh and year for each year ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "weigh",
      "and",
      "year",
      "for",
      "each",
      "year",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "query_toks": [
      "SELECT",
      "T1.CountryName",
      "FROM",
      "COUNTRIES",
      "AS",
      "T1",
      "JOIN",
      "CONTINENTS",
      "AS",
      "T2",
      "ON",
      "T1.Continent",
      "=",
      "T2.ContId",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T3",
      "ON",
      "T1.CountryId",
      "=",
      "T3.Country",
      "WHERE",
      "T2.Continent",
      "=",
      "'europe",
      "'",
      "GROUP",
      "BY",
      "T1.CountryName",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "continents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "continent",
      "=",
      "t2",
      ".",
      "contid",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t3",
      ".",
      "country",
      "where",
      "t2",
      ".",
      "continent",
      "=",
      "value",
      "group",
      "by",
      "t1",
      ".",
      "countryname",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Which countries in european have at least 3 car manufacturers ?",
    "question_toks": [
      "Which",
      "countries",
      "in",
      "european",
      "have",
      "at",
      "least",
      "3",
      "car",
      "manufacturers",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"europe\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "query_toks": [
      "SELECT",
      "T1.CountryName",
      "FROM",
      "COUNTRIES",
      "AS",
      "T1",
      "JOIN",
      "CONTINENTS",
      "AS",
      "T2",
      "ON",
      "T1.Continent",
      "=",
      "T2.ContId",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T3",
      "ON",
      "T1.CountryId",
      "=",
      "T3.Country",
      "WHERE",
      "T2.Continent",
      "=",
      "'europe",
      "'",
      "GROUP",
      "BY",
      "T1.CountryName",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "continents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "continent",
      "=",
      "t2",
      ".",
      "contid",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t3",
      ".",
      "country",
      "where",
      "t2",
      ".",
      "continent",
      "=",
      "value",
      "group",
      "by",
      "t1",
      ".",
      "countryname",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names of all European places with at least 3 manufacturers ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "European",
      "places",
      "with",
      "at",
      "least",
      "3",
      "manufacturers",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"europe\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T2.horsepower",
      ",",
      "T1.Make",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.cylinders",
      "=",
      "3",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "horsepower",
      ",",
      "t1",
      ".",
      "make",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the maximum horsepower and the make of the car ones with 3 cylinders ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "horsepower",
      "and",
      "the",
      "make",
      "of",
      "the",
      "car",
      "ones",
      "with",
      "3",
      "cylinders",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T2.horsepower",
      ",",
      "T1.Make",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.cylinders",
      "=",
      "3",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "horsepower",
      ",",
      "t1",
      ".",
      "make",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the largest amount of horsepower for the models with 3 engine and what make is it ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "largest",
      "amount",
      "of",
      "horsepower",
      "for",
      "the",
      "models",
      "with",
      "3",
      "engine",
      "and",
      "what",
      "make",
      "is",
      "it",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "ORDER",
      "BY",
      "T2.mpg",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "mpg",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which fitted saves the most gasoline ? That is to say , have the maximum miles per gallon .",
    "question_toks": [
      "Which",
      "fitted",
      "saves",
      "the",
      "most",
      "gasoline",
      "?",
      "That",
      "is",
      "to",
      "say",
      ",",
      "have",
      "the",
      "maximum",
      "miles",
      "per",
      "gallon",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "ORDER",
      "BY",
      "T2.mpg",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "t2",
      ".",
      "mpg",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the way wmodel with the highest mpg ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "way",
      "wmodel",
      "with",
      "the",
      "highest",
      "mpg",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "horsepower",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "YEAR",
      "<",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "<",
      "value"
    ],
    "question": "What is the average horsepower of the lots before 1980 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "horsepower",
      "of",
      "the",
      "lots",
      "before",
      "1980",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "horsepower",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "YEAR",
      "<",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "<",
      "value"
    ],
    "question": "What is the average hp for all cards produced before 1980 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "hp",
      "for",
      "all",
      "cards",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "T2.edispl",
      ")",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T1.Model",
      "=",
      "'volvo",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "edispl",
      ")",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t1",
      ".",
      "model",
      "=",
      "value"
    ],
    "question": "What is the average edispl of the cars of all ford ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "edispl",
      "of",
      "the",
      "cars",
      "of",
      "all",
      "ford",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "T2.edispl",
      ")",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T1.Model",
      "=",
      "'volvo",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "edispl",
      ")",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t1",
      ".",
      "model",
      "=",
      "value"
    ],
    "question": "What is the average edispl for all volvos ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "edispl",
      "for",
      "all",
      "volvos",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "Accelerate",
      ")",
      ",",
      "Cylinders",
      "FROM",
      "CARS_DATA",
      "GROUP",
      "BY",
      "Cylinders",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "accelerate",
      ")",
      ",",
      "cylinders",
      "from",
      "cars_data",
      "group",
      "by",
      "cylinders"
    ],
    "question": "What is the maximum stop for different number of cylinders ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "stop",
      "for",
      "different",
      "number",
      "of",
      "cylinders",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "Accelerate",
      ")",
      ",",
      "Cylinders",
      "FROM",
      "CARS_DATA",
      "GROUP",
      "BY",
      "Cylinders",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "accelerate",
      ")",
      ",",
      "cylinders",
      "from",
      "cars_data",
      "group",
      "by",
      "cylinders"
    ],
    "question": "What is the maximum accelerate for all the different manifold ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "accelerate",
      "for",
      "all",
      "the",
      "different",
      "manifold",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "Model",
      "FROM",
      "CAR_NAMES",
      "GROUP",
      "BY",
      "Model",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "model",
      "from",
      "car_names",
      "group",
      "by",
      "model",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which model has the most version(make ) of driven ?",
    "question_toks": [
      "Which",
      "model",
      "has",
      "the",
      "most",
      "version(make",
      ")",
      "of",
      "driven",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [
        [
          0,
          14,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "Model",
      "FROM",
      "CAR_NAMES",
      "GROUP",
      "BY",
      "Model",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "model",
      "from",
      "car_names",
      "group",
      "by",
      "model",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What kind has the most different versions ?",
    "question_toks": [
      "What",
      "kind",
      "has",
      "the",
      "most",
      "different",
      "versions",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [
        [
          0,
          14,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "4",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question": "How many cars have more than 4 engine ?",
    "question_toks": [
      "How",
      "many",
      "cars",
      "have",
      "more",
      "than",
      "4",
      "engine",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "4",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question": "What is the number of people with more than 4 cylinders ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "people",
      "with",
      "more",
      "than",
      "4",
      "cylinders",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "YEAR",
      "=",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "=",
      "value"
    ],
    "question": "how many lots were produced in 1980 ?",
    "question_toks": [
      "how",
      "many",
      "lots",
      "were",
      "produced",
      "in",
      "1980",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "YEAR",
      "=",
      "1980",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "year",
      "=",
      "value"
    ],
    "question": "In 1980 , how many cars were produced ?",
    "question_toks": [
      "In",
      "1980",
      ",",
      "how",
      "many",
      "cars",
      "were",
      "produced",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "WHERE",
      "T1.FullName",
      "=",
      "'American",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "where",
      "t1",
      ".",
      "fullname",
      "=",
      "value"
    ],
    "question": "How many car models were produced by the manufactures with full name American Motor Company ?",
    "question_toks": [
      "How",
      "many",
      "car",
      "models",
      "were",
      "produced",
      "by",
      "the",
      "manufactures",
      "with",
      "full",
      "name",
      "American",
      "Motor",
      "Company",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"American Motor Company\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "WHERE",
      "T1.FullName",
      "=",
      "'American",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "where",
      "t1",
      ".",
      "fullname",
      "=",
      "value"
    ],
    "question": "What is the number of car designs created by the car maker American Motor Company ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "car",
      "designs",
      "created",
      "by",
      "the",
      "car",
      "maker",
      "American",
      "Motor",
      "Company",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"American Motor Company\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "query_toks": [
      "SELECT",
      "T1.FullName",
      ",",
      "T1.Id",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "GROUP",
      "BY",
      "T1.Id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fullname",
      ",",
      "t1",
      ".",
      "id",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Which manufactured designed more than 3 car models ? List full name and the id .",
    "question_toks": [
      "Which",
      "manufactured",
      "designed",
      "more",
      "than",
      "3",
      "car",
      "models",
      "?",
      "List",
      "full",
      "name",
      "and",
      "the",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "query_toks": [
      "SELECT",
      "T1.FullName",
      ",",
      "T1.Id",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "GROUP",
      "BY",
      "T1.Id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "fullname",
      ",",
      "t1",
      ".",
      "id",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the names and ids of all makers with more than 3 designs ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ids",
      "of",
      "all",
      "makers",
      "with",
      "more",
      "than",
      "3",
      "designs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T3",
      "ON",
      "T2.Maker",
      "=",
      "T3.Id",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T1.MakeId",
      "=",
      "T4.Id",
      "WHERE",
      "T3.FullName",
      "=",
      "'General",
      "Motors",
      "'",
      "OR",
      "T4.weight",
      ">",
      "3500",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "maker",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "fullname",
      "=",
      "value",
      "or",
      "t4",
      ".",
      "weight",
      ">",
      "value"
    ],
    "question": "Which distinctive version are produced by maker with the full name General Motors or weighed more than 3500 ?",
    "question_toks": [
      "Which",
      "distinctive",
      "version",
      "are",
      "produced",
      "by",
      "maker",
      "with",
      "the",
      "full",
      "name",
      "General",
      "Motors",
      "or",
      "weighed",
      "more",
      "than",
      "3500",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"General Motors\"",
          null
        ],
        "or",
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T3",
      "ON",
      "T2.Maker",
      "=",
      "T3.Id",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T4",
      "ON",
      "T1.MakeId",
      "=",
      "T4.Id",
      "WHERE",
      "T3.FullName",
      "=",
      "'General",
      "Motors",
      "'",
      "OR",
      "T4.weight",
      ">",
      "3500",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "car_makers",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "maker",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "cars_data",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "fullname",
      "=",
      "value",
      "or",
      "t4",
      ".",
      "weight",
      ">",
      "value"
    ],
    "question": "What are the different designs created by either the car maker General Motors or weighed more than 3500 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "designs",
      "created",
      "by",
      "either",
      "the",
      "car",
      "maker",
      "General",
      "Motors",
      "or",
      "weighed",
      "more",
      "than",
      "3500",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"General Motors\"",
          null
        ],
        "or",
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Year",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "WHERE",
      "T1.Weight",
      ">",
      "3000",
      "AND",
      "T1.weight",
      "<",
      "4000",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "year",
      "from",
      "cars_data",
      "as",
      "t1",
      "where",
      "t1",
      ".",
      "weight",
      ">",
      "value",
      "and",
      "t1",
      ".",
      "weight",
      "<",
      "value"
    ],
    "question": "In which years lots were produced weighing no less than 3000 and no more than 4000 ?",
    "question_toks": [
      "In",
      "which",
      "years",
      "lots",
      "were",
      "produced",
      "weighing",
      "no",
      "less",
      "than",
      "3000",
      "and",
      "no",
      "more",
      "than",
      "4000",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3000.0,
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          4000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Year",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "WHERE",
      "T1.Weight",
      ">",
      "3000",
      "AND",
      "T1.weight",
      "<",
      "4000",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "year",
      "from",
      "cars_data",
      "as",
      "t1",
      "where",
      "t1",
      ".",
      "weight",
      ">",
      "value",
      "and",
      "t1",
      ".",
      "weight",
      "<",
      "value"
    ],
    "question": "What are the different years in which there were things produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "years",
      "in",
      "which",
      "there",
      "were",
      "things",
      "produced",
      "that",
      "weighed",
      "less",
      "than",
      "4000",
      "and",
      "also",
      "cars",
      "that",
      "weighted",
      "more",
      "than",
      "3000",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3000.0,
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          4000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.horsepower",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "ORDER",
      "BY",
      "T1.accelerate",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "horsepower",
      "from",
      "cars_data",
      "as",
      "t1",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the engine of the car with the largest accelerate ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "engine",
      "of",
      "the",
      "car",
      "with",
      "the",
      "largest",
      "accelerate",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.horsepower",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "ORDER",
      "BY",
      "T1.accelerate",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "horsepower",
      "from",
      "cars_data",
      "as",
      "t1",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the powered of the car with the greatest accelerate ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "powered",
      "of",
      "the",
      "car",
      "with",
      "the",
      "greatest",
      "accelerate",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.cylinders",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Model",
      "=",
      "'volvo",
      "'",
      "ORDER",
      "BY",
      "T1.accelerate",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "cylinders",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "model",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "asc",
      "limit",
      "value"
    ],
    "question": "For model volvo , how many engines does the car with the least accelerate have ?",
    "question_toks": [
      "For",
      "model",
      "volvo",
      ",",
      "how",
      "many",
      "engines",
      "does",
      "the",
      "car",
      "with",
      "the",
      "least",
      "accelerate",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.cylinders",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T2.Model",
      "=",
      "'volvo",
      "'",
      "ORDER",
      "BY",
      "T1.accelerate",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "cylinders",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t2",
      ".",
      "model",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "accelerate",
      "asc",
      "limit",
      "value"
    ],
    "question": "For a volvo one , how many cylinders does the version with least accelerate have ?",
    "question_toks": [
      "For",
      "a",
      "volvo",
      "one",
      ",",
      "how",
      "many",
      "cylinders",
      "does",
      "the",
      "version",
      "with",
      "least",
      "accelerate",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"volvo\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Accelerate",
      ">",
      "(",
      "SELECT",
      "Accelerate",
      "FROM",
      "CARS_DATA",
      "ORDER",
      "BY",
      "Horsepower",
      "DESC",
      "LIMIT",
      "1",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "accelerate",
      ">",
      "(",
      "select",
      "accelerate",
      "from",
      "cars_data",
      "order",
      "by",
      "horsepower",
      "desc",
      "limit",
      "value",
      ")"
    ],
    "question": "How many cars have a larger acceleration than the car with the largest horsepower ?",
    "question_toks": [
      "How",
      "many",
      "cars",
      "have",
      "a",
      "larger",
      "acceleration",
      "than",
      "the",
      "car",
      "with",
      "the",
      "largest",
      "horsepower",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
              "desc",
              [
                [
                  0,
                  [
                    0,
                    20,
                    false
                  ],
                  null
                ]
              ]
            ],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      22,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Accelerate",
      ">",
      "(",
      "SELECT",
      "Accelerate",
      "FROM",
      "CARS_DATA",
      "ORDER",
      "BY",
      "Horsepower",
      "DESC",
      "LIMIT",
      "1",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "accelerate",
      ">",
      "(",
      "select",
      "accelerate",
      "from",
      "cars_data",
      "order",
      "by",
      "horsepower",
      "desc",
      "limit",
      "value",
      ")"
    ],
    "question": "What is the number of cars with a greater accelerate than the one with the most hp ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "cars",
      "with",
      "a",
      "greater",
      "accelerate",
      "than",
      "the",
      "one",
      "with",
      "the",
      "most",
      "hp",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
              "desc",
              [
                [
                  0,
                  [
                    0,
                    20,
                    false
                  ],
                  null
                ]
              ]
            ],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      22,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "(",
      "SELECT",
      "T1.CountryId",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "COUNTRIES",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "GROUP",
      "BY",
      "T1.CountryId",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1",
      ".",
      "countryid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value",
      ")"
    ],
    "question": "How many places has more than 2 car makers ?",
    "question_toks": [
      "How",
      "many",
      "places",
      "has",
      "more",
      "than",
      "2",
      "car",
      "makers",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "sql",
            {
              "except": null,
              "from": {
                "conds": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        3,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ],
                "table_units": [
                  [
                    "table_unit",
                    1
                  ],
                  [
                    "table_unit",
                    2
                  ]
                ]
              },
              "groupBy": [
                [
                  0,
                  3,
                  false
                ]
              ],
              "having": [
                [
                  false,
                  3,
                  [
                    0,
                    [
                      3,
                      0,
                      false
                    ],
                    null
                  ],
                  2.0,
                  null
                ]
              ],
              "intersect": null,
              "limit": null,
              "orderBy": [],
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        3,
                        false
                      ],
                      null
                    ]
                  ],
                  [
                    3,
                    [
                      0,
                      [
                        0,
                        0,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "union": null,
              "where": []
            }
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "(",
      "SELECT",
      "T1.CountryId",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "COUNTRIES",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "GROUP",
      "BY",
      "T1.CountryId",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1",
      ".",
      "countryid",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value",
      ")"
    ],
    "question": "What is the number of where with more than 2 car makers ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "where",
      "with",
      "more",
      "than",
      "2",
      "car",
      "makers",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "sql",
            {
              "except": null,
              "from": {
                "conds": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        3,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ],
                "table_units": [
                  [
                    "table_unit",
                    1
                  ],
                  [
                    "table_unit",
                    2
                  ]
                ]
              },
              "groupBy": [
                [
                  0,
                  3,
                  false
                ]
              ],
              "having": [
                [
                  false,
                  3,
                  [
                    0,
                    [
                      3,
                      0,
                      false
                    ],
                    null
                  ],
                  2.0,
                  null
                ]
              ],
              "intersect": null,
              "limit": null,
              "orderBy": [],
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        3,
                        false
                      ],
                      null
                    ]
                  ],
                  [
                    3,
                    [
                      0,
                      [
                        0,
                        0,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "union": null,
              "where": []
            }
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "6",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question": "How many cars has over 6 engines ?",
    "question_toks": [
      "How",
      "many",
      "cars",
      "has",
      "over",
      "6",
      "engines",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          6.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      ">",
      "6",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cars_data",
      "where",
      "cylinders",
      ">",
      "value"
    ],
    "question": "What is the number of carsw ith over 6 engines ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "carsw",
      "ith",
      "over",
      "6",
      "engines",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          6.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.Cylinders",
      "=",
      "4",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question": "For the cars with 4 cylinders , which model has the largest engine ?",
    "question_toks": [
      "For",
      "the",
      "cars",
      "with",
      "4",
      "cylinders",
      ",",
      "which",
      "model",
      "has",
      "the",
      "largest",
      "engine",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "T1.Model",
      "FROM",
      "CAR_NAMES",
      "AS",
      "T1",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T2",
      "ON",
      "T1.MakeId",
      "=",
      "T2.Id",
      "WHERE",
      "T2.Cylinders",
      "=",
      "4",
      "ORDER",
      "BY",
      "T2.horsepower",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "model",
      "from",
      "car_names",
      "as",
      "t1",
      "join",
      "cars_data",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "makeid",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "cylinders",
      "=",
      "value",
      "order",
      "by",
      "t2",
      ".",
      "horsepower",
      "desc",
      "limit",
      "value"
    ],
    "question": "For all of the 4 cylinder ones , which model has the most horsepower ?",
    "question_toks": [
      "For",
      "all",
      "of",
      "the",
      "4",
      "cylinder",
      "ones",
      ",",
      "which",
      "model",
      "has",
      "the",
      "most",
      "horsepower",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              16,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
    "query_toks": [
      "SELECT",
      "T2.MakeId",
      ",",
      "T2.Make",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T1.Horsepower",
      ">",
      "(",
      "SELECT",
      "min",
      "(",
      "Horsepower",
      ")",
      "FROM",
      "CARS_DATA",
      ")",
      "AND",
      "T1.Cylinders",
      "<",
      "=",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "makeid",
      ",",
      "t2",
      ".",
      "make",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t1",
      ".",
      "horsepower",
      ">",
      "(",
      "select",
      "min",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      ")",
      "and",
      "t1",
      ".",
      "cylinders",
      "<",
      "=",
      "value"
    ],
    "question": "Among the cars with more than lowest hp , which ones do not have more than 3 cylinders ? List the car makeid and make name .",
    "question_toks": [
      "Among",
      "the",
      "cars",
      "with",
      "more",
      "than",
      "lowest",
      "hp",
      ",",
      "which",
      "ones",
      "do",
      "not",
      "have",
      "more",
      "than",
      "3",
      "cylinders",
      "?",
      "List",
      "the",
      "car",
      "makeid",
      "and",
      "make",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      20,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ],
        "and",
        [
          false,
          6,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
    "query_toks": [
      "SELECT",
      "T2.MakeId",
      ",",
      "T2.Make",
      "FROM",
      "CARS_DATA",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.MakeId",
      "WHERE",
      "T1.Horsepower",
      ">",
      "(",
      "SELECT",
      "min",
      "(",
      "Horsepower",
      ")",
      "FROM",
      "CARS_DATA",
      ")",
      "AND",
      "T1.Cylinders",
      "<",
      "=",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "makeid",
      ",",
      "t2",
      ".",
      "make",
      "from",
      "cars_data",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "makeid",
      "where",
      "t1",
      ".",
      "horsepower",
      ">",
      "(",
      "select",
      "min",
      "(",
      "horsepower",
      ")",
      "from",
      "cars_data",
      ")",
      "and",
      "t1",
      ".",
      "cylinders",
      "<",
      "=",
      "value"
    ],
    "question": "Among the all that do not have the minimum horsepower , what are the make ids and names of al those with less than 4 cylinders ?",
    "question_toks": [
      "Among",
      "the",
      "all",
      "that",
      "do",
      "not",
      "have",
      "the",
      "minimum",
      "horsepower",
      ",",
      "what",
      "are",
      "the",
      "make",
      "ids",
      "and",
      "names",
      "of",
      "al",
      "those",
      "with",
      "less",
      "than",
      "4",
      "cylinders",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      20,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ],
        "and",
        [
          false,
          6,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "mpg",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "8",
      "OR",
      "YEAR",
      "<",
      "1980",
      "ORDER",
      "BY",
      "mpg",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "mpg",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "or",
      "year",
      "<",
      "value",
      "order",
      "by",
      "mpg",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the maximum miles per gallon of the car with 8 engines or produced before 1980 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "miles",
      "per",
      "gallon",
      "of",
      "the",
      "car",
      "with",
      "8",
      "engines",
      "or",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          8.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "mpg",
      "FROM",
      "CARS_DATA",
      "WHERE",
      "Cylinders",
      "=",
      "8",
      "OR",
      "YEAR",
      "<",
      "1980",
      "ORDER",
      "BY",
      "mpg",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "mpg",
      "from",
      "cars_data",
      "where",
      "cylinders",
      "=",
      "value",
      "or",
      "year",
      "<",
      "value",
      "order",
      "by",
      "mpg",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the maximum mph of the cars that had 8 cylinders or that were produced before 1980 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "mph",
      "of",
      "the",
      "cars",
      "that",
      "had",
      "8",
      "cylinders",
      "or",
      "that",
      "were",
      "produced",
      "before",
      "1980",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              18,
              false
            ],
            null
          ],
          8.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          1980.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.Id",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T4",
      "ON",
      "T1.Maker",
      "=",
      "T4.Id",
      "WHERE",
      "T3.weight",
      "<",
      "3500",
      "AND",
      "T4.FullName",
      "!",
      "=",
      "'Ford",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "car_makers",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "weight",
      "<",
      "value",
      "and",
      "t4",
      ".",
      "fullname",
      "!",
      "=",
      "value"
    ],
    "question": "Which ones are lighter than 3500 but not built by the ' Ford Motor Company ' ?",
    "question_toks": [
      "Which",
      "ones",
      "are",
      "lighter",
      "than",
      "3500",
      "but",
      "not",
      "built",
      "by",
      "the",
      "'",
      "Ford",
      "Motor",
      "Company",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ],
        "and",
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Ford Motor Company\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.model",
      "FROM",
      "MODEL_LIST",
      "AS",
      "T1",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T2",
      "ON",
      "T1.Model",
      "=",
      "T2.Model",
      "JOIN",
      "CARS_DATA",
      "AS",
      "T3",
      "ON",
      "T2.MakeId",
      "=",
      "T3.Id",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T4",
      "ON",
      "T1.Maker",
      "=",
      "T4.Id",
      "WHERE",
      "T3.weight",
      "<",
      "3500",
      "AND",
      "T4.FullName",
      "!",
      "=",
      "'Ford",
      "Motor",
      "Company",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "model",
      "from",
      "model_list",
      "as",
      "t1",
      "join",
      "car_names",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "model",
      "=",
      "t2",
      ".",
      "model",
      "join",
      "cars_data",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "makeid",
      "=",
      "t3",
      ".",
      "id",
      "join",
      "car_makers",
      "as",
      "t4",
      "on",
      "t1",
      ".",
      "maker",
      "=",
      "t4",
      ".",
      "id",
      "where",
      "t3",
      ".",
      "weight",
      "<",
      "value",
      "and",
      "t4",
      ".",
      "fullname",
      "!",
      "=",
      "value"
    ],
    "question": "What are the different designs wthat are lighter than 3500 but were not built by the Ford Motor Company ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "designs",
      "wthat",
      "are",
      "lighter",
      "than",
      "3500",
      "but",
      "were",
      "not",
      "built",
      "by",
      "the",
      "Ford",
      "Motor",
      "Company",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          3500.0,
          null
        ],
        "and",
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Ford Motor Company\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "query_toks": [
      "SELECT",
      "CountryName",
      "FROM",
      "countries",
      "EXCEPT",
      "SELECT",
      "T1.CountryName",
      "FROM",
      "countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.countryId",
      "=",
      "T2.Country",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "countryname",
      "from",
      "countries",
      "except",
      "select",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country"
    ],
    "question": "What are the name of the places where there is not a single car maker ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "of",
      "the",
      "places",
      "where",
      "there",
      "is",
      "not",
      "a",
      "single",
      "car",
      "maker",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "query_toks": [
      "SELECT",
      "CountryName",
      "FROM",
      "countries",
      "EXCEPT",
      "SELECT",
      "T1.CountryName",
      "FROM",
      "countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.countryId",
      "=",
      "T2.Country",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "countryname",
      "from",
      "countries",
      "except",
      "select",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country"
    ],
    "question": "What are the names of the jurisdictions with no car makers ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "jurisdictions",
      "with",
      "no",
      "car",
      "makers",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
    "query_toks": [
      "SELECT",
      "T1.Id",
      ",",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "GROUP",
      "BY",
      "T1.Id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2",
      "INTERSECT",
      "SELECT",
      "T1.Id",
      ",",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T3",
      "ON",
      "T2.model",
      "=",
      "T3.model",
      "GROUP",
      "BY",
      "T1.Id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "model",
      "=",
      "t3",
      ".",
      "model",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Which are the car manufactures which produce at least 2 models and more than 3 car makes ? List the id and the maker .",
    "question_toks": [
      "Which",
      "are",
      "the",
      "car",
      "manufactures",
      "which",
      "produce",
      "at",
      "least",
      "2",
      "models",
      "and",
      "more",
      "than",
      "3",
      "car",
      "makes",
      "?",
      "List",
      "the",
      "id",
      "and",
      "the",
      "maker",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ],
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [
          [
            0,
            6,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            3.0,
            null
          ]
        ],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
    "query_toks": [
      "SELECT",
      "T1.Id",
      ",",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "GROUP",
      "BY",
      "T1.Id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2",
      "INTERSECT",
      "SELECT",
      "T1.Id",
      ",",
      "T1.Maker",
      "FROM",
      "CAR_MAKERS",
      "AS",
      "T1",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T2",
      "ON",
      "T1.Id",
      "=",
      "T2.Maker",
      "JOIN",
      "CAR_NAMES",
      "AS",
      "T3",
      "ON",
      "T2.model",
      "=",
      "T3.model",
      "GROUP",
      "BY",
      "T1.Id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "maker",
      "from",
      "car_makers",
      "as",
      "t1",
      "join",
      "model_list",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "maker",
      "join",
      "car_names",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "model",
      "=",
      "t3",
      ".",
      "model",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the ids and makers of all car makers that produce at least 2 modeling and make more than 3 cars ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "makers",
      "of",
      "all",
      "car",
      "makers",
      "that",
      "produce",
      "at",
      "least",
      "2",
      "modeling",
      "and",
      "make",
      "more",
      "than",
      "3",
      "cars",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              11,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ],
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [
          [
            0,
            6,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            3.0,
            null
          ]
        ],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
    "query_toks": [
      "SELECT",
      "T1.countryId",
      ",",
      "T1.CountryName",
      "FROM",
      "Countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "GROUP",
      "BY",
      "T1.countryId",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      "UNION",
      "SELECT",
      "T1.countryId",
      ",",
      "T1.CountryName",
      "FROM",
      "Countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T3",
      "ON",
      "T2.Id",
      "=",
      "T3.Maker",
      "WHERE",
      "T3.Model",
      "=",
      "'fiat",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryid",
      ",",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value",
      "union",
      "select",
      "t1",
      ".",
      "countryid",
      ",",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "join",
      "model_list",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "maker",
      "where",
      "t3",
      ".",
      "model",
      "=",
      "value"
    ],
    "question": "What are the id and names of the countries which have more than 3 car manufactures or produce the ' fiat ' model ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "id",
      "and",
      "names",
      "of",
      "the",
      "countries",
      "which",
      "have",
      "more",
      "than",
      "3",
      "car",
      "manufactures",
      "or",
      "produce",
      "the",
      "'",
      "fiat",
      "'",
      "model",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"fiat\"",
            null
          ]
        ]
      },
      "where": []
    }
  },
  {
    "db_id": "car_1",
    "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
    "query_toks": [
      "SELECT",
      "T1.countryId",
      ",",
      "T1.CountryName",
      "FROM",
      "Countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "GROUP",
      "BY",
      "T1.countryId",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "3",
      "UNION",
      "SELECT",
      "T1.countryId",
      ",",
      "T1.CountryName",
      "FROM",
      "Countries",
      "AS",
      "T1",
      "JOIN",
      "CAR_MAKERS",
      "AS",
      "T2",
      "ON",
      "T1.CountryId",
      "=",
      "T2.Country",
      "JOIN",
      "MODEL_LIST",
      "AS",
      "T3",
      "ON",
      "T2.Id",
      "=",
      "T3.Maker",
      "WHERE",
      "T3.Model",
      "=",
      "'fiat",
      "'",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "countryid",
      ",",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "group",
      "by",
      "t1",
      ".",
      "countryid",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value",
      "union",
      "select",
      "t1",
      ".",
      "countryid",
      ",",
      "t1",
      ".",
      "countryname",
      "from",
      "countries",
      "as",
      "t1",
      "join",
      "car_makers",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countryid",
      "=",
      "t2",
      ".",
      "country",
      "join",
      "model_list",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "maker",
      "where",
      "t3",
      ".",
      "model",
      "=",
      "value"
    ],
    "question": "What are the ids and names of all places that either have more than 3 car makers or produce fiats ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "names",
      "of",
      "all",
      "places",
      "that",
      "either",
      "have",
      "more",
      "than",
      "3",
      "car",
      "makers",
      "or",
      "produce",
      "fiats",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"fiat\"",
            null
          ]
        ]
      },
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "Country",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question": "Which nation does Airline \" JetBlue Airways \" belong to ?",
    "question_toks": [
      "Which",
      "nation",
      "does",
      "Airline",
      "\"",
      "JetBlue",
      "Airways",
      "\"",
      "belong",
      "to",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "Country",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question": "What place is Jetblue Airways affiliated with ?",
    "question_toks": [
      "What",
      "place",
      "is",
      "Jetblue",
      "Airways",
      "affiliated",
      "with",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question": "What is the acronym of Airline \" JetBlue Airways \" ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "acronym",
      "of",
      "Airline",
      "\"",
      "JetBlue",
      "Airways",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "airline",
      "=",
      "value"
    ],
    "question": "Which term corresponds to Jetblue Airways ?",
    "question_toks": [
      "Which",
      "term",
      "corresponds",
      "to",
      "Jetblue",
      "Airways",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks": [
      "SELECT",
      "Airline",
      ",",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airline",
      ",",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "List all aircraft names and their abbreviations in \" USA \" .",
    "question_toks": [
      "List",
      "all",
      "aircraft",
      "names",
      "and",
      "their",
      "abbreviations",
      "in",
      "\"",
      "USA",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks": [
      "SELECT",
      "Airline",
      ",",
      "Abbreviation",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airline",
      ",",
      "abbreviation",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "What are the airline names and abbreviations for flown in the USA ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "airline",
      "names",
      "and",
      "abbreviations",
      "for",
      "flown",
      "in",
      "the",
      "USA",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "query_toks": [
      "SELECT",
      "AirportCode",
      ",",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "city",
      "=",
      "``",
      "Anthony",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportcode",
      ",",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "List the airport code and name in the municipality of Anthony .",
    "question_toks": [
      "List",
      "the",
      "airport",
      "code",
      "and",
      "name",
      "in",
      "the",
      "municipality",
      "of",
      "Anthony",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Anthony\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "query_toks": [
      "SELECT",
      "AirportCode",
      ",",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "city",
      "=",
      "``",
      "Anthony",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportcode",
      ",",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "Give the airport lot and airport name corresonding to the city Anthony .",
    "question_toks": [
      "Give",
      "the",
      "airport",
      "lot",
      "and",
      "airport",
      "name",
      "corresonding",
      "to",
      "the",
      "city",
      "Anthony",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Anthony\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines"
    ],
    "question": "How many aircraft do we have ?",
    "question_toks": [
      "How",
      "many",
      "aircraft",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines"
    ],
    "question": "What is the total count of airlines ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "count",
      "of",
      "airlines",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRPORTS",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRPORTS"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airports"
    ],
    "question": "How many planes do we have ?",
    "question_toks": [
      "How",
      "many",
      "planes",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRPORTS",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRPORTS"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airports"
    ],
    "question": "Return the quantity of airports .",
    "question_toks": [
      "Return",
      "the",
      "quantity",
      "of",
      "airports",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights"
    ],
    "question": "How many flown do we have ?",
    "question_toks": [
      "How",
      "many",
      "flown",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights"
    ],
    "question": "Return the number of flown .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "flown",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "query_toks": [
      "SELECT",
      "Airline",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Abbreviation",
      "=",
      "``",
      "UAL",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airline",
      "from",
      "airlines",
      "where",
      "abbreviation",
      "=",
      "value"
    ],
    "question": "Which airplane has abbreviation ' UAL ' ?",
    "question_toks": [
      "Which",
      "airplane",
      "has",
      "abbreviation",
      "'",
      "UAL",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"UAL\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "query_toks": [
      "SELECT",
      "Airline",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Abbreviation",
      "=",
      "``",
      "UAL",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airline",
      "from",
      "airlines",
      "where",
      "abbreviation",
      "=",
      "value"
    ],
    "question": "Give the airline with acronym ' UAL ' .",
    "question_toks": [
      "Give",
      "the",
      "airline",
      "with",
      "acronym",
      "'",
      "UAL",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"UAL\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "How many aviation are from USA ?",
    "question_toks": [
      "How",
      "many",
      "aviation",
      "are",
      "from",
      "USA",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "WHERE",
      "Country",
      "=",
      "``",
      "USA",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "where",
      "country",
      "=",
      "value"
    ],
    "question": "Return the number of airplanes in the USA .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "airplanes",
      "in",
      "the",
      "USA",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "query_toks": [
      "SELECT",
      "City",
      ",",
      "Country",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportName",
      "=",
      "``",
      "Alton",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "city",
      ",",
      "country",
      "from",
      "airports",
      "where",
      "airportname",
      "=",
      "value"
    ],
    "question": "Which place and country is the Alton airport at ?",
    "question_toks": [
      "Which",
      "place",
      "and",
      "country",
      "is",
      "the",
      "Alton",
      "airport",
      "at",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Alton\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "query_toks": [
      "SELECT",
      "City",
      ",",
      "Country",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportName",
      "=",
      "``",
      "Alton",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "city",
      ",",
      "country",
      "from",
      "airports",
      "where",
      "airportname",
      "=",
      "value"
    ],
    "question": "Give the city and country for the Alton aviation .",
    "question_toks": [
      "Give",
      "the",
      "city",
      "and",
      "country",
      "for",
      "the",
      "Alton",
      "aviation",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Alton\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportCode",
      "=",
      "``",
      "AKO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "=",
      "value"
    ],
    "question": "What is the airport name for place ' AKO ' ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "airport",
      "name",
      "for",
      "place",
      "'",
      "AKO",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"AKO\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "AirportCode",
      "=",
      "``",
      "AKO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "=",
      "value"
    ],
    "question": "Return the name of the airplane with code ' AKO ' .",
    "question_toks": [
      "Return",
      "the",
      "name",
      "of",
      "the",
      "airplane",
      "with",
      "code",
      "'",
      "AKO",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"AKO\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "What are aviation names at City ' Aberdeen ' ?",
    "question_toks": [
      "What",
      "are",
      "aviation",
      "names",
      "at",
      "City",
      "'",
      "Aberdeen",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "AIRPORTS",
      "WHERE",
      "City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "What are the names of aviation in Aberdeen ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "aviation",
      "in",
      "Aberdeen",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "How many flying depart from ' APG ' ?",
    "question_toks": [
      "How",
      "many",
      "flying",
      "depart",
      "from",
      "'",
      "APG",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Count the quantity of flights departing from ' APG ' .",
    "question_toks": [
      "Count",
      "the",
      "quantity",
      "of",
      "flights",
      "departing",
      "from",
      "'",
      "APG",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "ATO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question": "How many flights have place ATO ?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "have",
      "place",
      "ATO",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ATO\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "ATO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question": "Count the quantity of flights into ATO .",
    "question_toks": [
      "Count",
      "the",
      "quantity",
      "of",
      "flights",
      "into",
      "ATO",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ATO\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "How many flown depart from City Aberdeen ?",
    "question_toks": [
      "How",
      "many",
      "flown",
      "depart",
      "from",
      "City",
      "Aberdeen",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "Return the numbered of flights departing from Aberdeen .",
    "question_toks": [
      "Return",
      "the",
      "numbered",
      "of",
      "flights",
      "departing",
      "from",
      "Aberdeen",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "How many flights arriving in Aberdeen place ?",
    "question_toks": [
      "How",
      "many",
      "flights",
      "arriving",
      "in",
      "Aberdeen",
      "place",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "Return the number of flying arriving in Aberdeen .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "flying",
      "arriving",
      "in",
      "Aberdeen",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T3",
      "ON",
      "T1.SourceAirport",
      "=",
      "T3.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Ashley",
      "''",
      "AND",
      "T3.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airports",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t3",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "How many flown depart from City ' Aberdeen ' and have destination City ' Ashley ' ?",
    "question_toks": [
      "How",
      "many",
      "flown",
      "depart",
      "from",
      "City",
      "'",
      "Aberdeen",
      "'",
      "and",
      "have",
      "destination",
      "City",
      "'",
      "Ashley",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Ashley\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T3",
      "ON",
      "T1.SourceAirport",
      "=",
      "T3.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Ashley",
      "''",
      "AND",
      "T3.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airports",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t3",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "How many voyages fly from Aberdeen to Ashley ?",
    "question_toks": [
      "How",
      "many",
      "voyages",
      "fly",
      "from",
      "Aberdeen",
      "to",
      "Ashley",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Ashley\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T1.Airline",
      "=",
      "T2.uid",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airline",
      "=",
      "t2",
      ".",
      "uid",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "How many flown does airline ' JetBlue Airways ' have ?",
    "question_toks": [
      "How",
      "many",
      "flown",
      "does",
      "airline",
      "'",
      "JetBlue",
      "Airways",
      "'",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T1.Airline",
      "=",
      "T2.uid",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "JetBlue",
      "Airways",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airline",
      "=",
      "t2",
      ".",
      "uid",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "Give the quantity of Jetblue Airways flights .",
    "question_toks": [
      "Give",
      "the",
      "quantity",
      "of",
      "Jetblue",
      "Airways",
      "flights",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"JetBlue Airways\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.DestAirport",
      "=",
      "``",
      "ASY",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question": "How many ' United Airlines ' flown go to Airport ' ASY ' ?",
    "question_toks": [
      "How",
      "many",
      "'",
      "United",
      "Airlines",
      "'",
      "flown",
      "go",
      "to",
      "Airport",
      "'",
      "ASY",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ASY\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.DestAirport",
      "=",
      "``",
      "ASY",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question": "Count the number of United Airlines flying arriving in ASY Airport .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "flying",
      "arriving",
      "in",
      "ASY",
      "Airport",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"ASY\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "How many ' United Airlines ' flown depart from Airport ' AHD ' ?",
    "question_toks": [
      "How",
      "many",
      "'",
      "United",
      "Airlines",
      "'",
      "flown",
      "depart",
      "from",
      "Airport",
      "'",
      "AHD",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T2.Airline",
      "=",
      "T1.uid",
      "WHERE",
      "T1.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''",
      "AND",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "airline",
      "=",
      "t1",
      ".",
      "uid",
      "where",
      "t1",
      ".",
      "airline",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Return the number of United Airlines aircraft leaving from AHD Airport .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "aircraft",
      "leaving",
      "from",
      "AHD",
      "Airport",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRLINES",
      "AS",
      "T3",
      "ON",
      "T3.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''",
      "AND",
      "T3.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airlines",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "How many United Airlines flown go to City ' Aberdeen ' ?",
    "question_toks": [
      "How",
      "many",
      "United",
      "Airlines",
      "flown",
      "go",
      "to",
      "City",
      "'",
      "Aberdeen",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "JOIN",
      "AIRLINES",
      "AS",
      "T3",
      "ON",
      "T3.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''",
      "AND",
      "T3.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "join",
      "airlines",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "and",
      "t3",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "Count the number of United Airlines flown that arrive in Aberdeen .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "United",
      "Airlines",
      "flown",
      "that",
      "arrive",
      "in",
      "Aberdeen",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.City",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "GROUP",
      "BY",
      "T1.City",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "group",
      "by",
      "t1",
      ".",
      "city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which city has most count of arriving flights ?",
    "question_toks": [
      "Which",
      "city",
      "has",
      "most",
      "count",
      "of",
      "arriving",
      "flights",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.City",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "GROUP",
      "BY",
      "T1.City",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "group",
      "by",
      "t1",
      ".",
      "city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which place has the most frequent destination airport ?",
    "question_toks": [
      "Which",
      "place",
      "has",
      "the",
      "most",
      "frequent",
      "destination",
      "airport",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.City",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.City",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which city has most count of departing flights ?",
    "question_toks": [
      "Which",
      "city",
      "has",
      "most",
      "count",
      "of",
      "departing",
      "flights",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.City",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.City",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "city",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "city",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which locality is the most frequent source airport ?",
    "question_toks": [
      "Which",
      "locality",
      "is",
      "the",
      "most",
      "frequent",
      "source",
      "airport",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              12,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.AirportCode",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "OR",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.AirportCode",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "or",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the code of aviation that has the highest number of flights ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "code",
      "of",
      "aviation",
      "that",
      "has",
      "the",
      "highest",
      "number",
      "of",
      "flights",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.AirportCode",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "OR",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.AirportCode",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "or",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the airport code of the airport with the most flown ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "airport",
      "code",
      "of",
      "the",
      "airport",
      "with",
      "the",
      "most",
      "flown",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.AirportCode",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "OR",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.AirportCode",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "or",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "value"
    ],
    "question": "What is the code of airport that has fewest number of flown ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "code",
      "of",
      "airport",
      "that",
      "has",
      "fewest",
      "number",
      "of",
      "flown",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.AirportCode",
      "FROM",
      "AIRPORTS",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.AirportCode",
      "=",
      "T2.DestAirport",
      "OR",
      "T1.AirportCode",
      "=",
      "T2.SourceAirport",
      "GROUP",
      "BY",
      "T1.AirportCode",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airportcode",
      "from",
      "airports",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "destairport",
      "or",
      "t1",
      ".",
      "airportcode",
      "=",
      "t2",
      ".",
      "sourceairport",
      "group",
      "by",
      "t1",
      ".",
      "airportcode",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "value"
    ],
    "question": "Give the code of the plane with the least flights .",
    "question_toks": [
      "Give",
      "the",
      "code",
      "of",
      "the",
      "plane",
      "with",
      "the",
      "least",
      "flights",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which aircraft has most number of flights ?",
    "question_toks": [
      "Which",
      "aircraft",
      "has",
      "most",
      "number",
      "of",
      "flights",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What aircraft serves the most flights ?",
    "question_toks": [
      "What",
      "aircraft",
      "serves",
      "the",
      "most",
      "flights",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Abbreviation",
      ",",
      "T1.Country",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "abbreviation",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "value"
    ],
    "question": "Find the abbreviation and country of the airline that has fewest count of flights ?",
    "question_toks": [
      "Find",
      "the",
      "abbreviation",
      "and",
      "country",
      "of",
      "the",
      "airline",
      "that",
      "has",
      "fewest",
      "count",
      "of",
      "flights",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Abbreviation",
      ",",
      "T1.Country",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "abbreviation",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "limit",
      "value"
    ],
    "question": "What is the abbreviation of the airilne has the fewest flights and what nation is it in ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "abbreviation",
      "of",
      "the",
      "airilne",
      "has",
      "the",
      "fewest",
      "flights",
      "and",
      "what",
      "nation",
      "is",
      "it",
      "in",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "What are airlines that have some flying departing from airport ' AHD ' ?",
    "question_toks": [
      "What",
      "are",
      "airlines",
      "that",
      "have",
      "some",
      "flying",
      "departing",
      "from",
      "airport",
      "'",
      "AHD",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Which airlines have a flight with source to AHD ?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "a",
      "flight",
      "with",
      "source",
      "to",
      "AHD",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.DestAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question": "What are airlines that have flying arriving at airport ' AHD ' ?",
    "question_toks": [
      "What",
      "are",
      "airlines",
      "that",
      "have",
      "flying",
      "arriving",
      "at",
      "airport",
      "'",
      "AHD",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.DestAirport",
      "=",
      "``",
      "AHD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "destairport",
      "=",
      "value"
    ],
    "question": "Which airlines have a flying with destination airport AHD ?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "a",
      "flying",
      "with",
      "destination",
      "airport",
      "AHD",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"AHD\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Find all airlines that have flights from both aircraft ' APG ' and ' CVO ' .",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "flights",
      "from",
      "both",
      "aircraft",
      "'",
      "APG",
      "'",
      "and",
      "'",
      "CVO",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"CVO\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Which aircraft have departing flights from both APG and CVO airports ?",
    "question_toks": [
      "Which",
      "aircraft",
      "have",
      "departing",
      "flights",
      "from",
      "both",
      "APG",
      "and",
      "CVO",
      "airports",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"CVO\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''",
      "EXCEPT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "except",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Find all airlines that have fly from airport ' CVO ' but not from ' APG ' .",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "fly",
      "from",
      "airport",
      "'",
      "CVO",
      "'",
      "but",
      "not",
      "from",
      "'",
      "APG",
      "'",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"APG\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"CVO\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "CVO",
      "''",
      "EXCEPT",
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "WHERE",
      "T2.SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value",
      "except",
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Which aircraft have departures from CVO but not from APG airports ?",
    "question_toks": [
      "Which",
      "aircraft",
      "have",
      "departures",
      "from",
      "CVO",
      "but",
      "not",
      "from",
      "APG",
      "airports",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"APG\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"CVO\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find all airlines that have at least 10 flown .",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "at",
      "least",
      "10",
      "flown",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Which airlines have at least 10 flown ?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "at",
      "least",
      "10",
      "flown",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "200"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "value"
    ],
    "question": "Find all airlines that have fewer than 200 flown .",
    "question_toks": [
      "Find",
      "all",
      "airlines",
      "that",
      "have",
      "fewer",
      "than",
      "200",
      "flown",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "query_toks": [
      "SELECT",
      "T1.Airline",
      "FROM",
      "AIRLINES",
      "AS",
      "T1",
      "JOIN",
      "FLIGHTS",
      "AS",
      "T2",
      "ON",
      "T1.uid",
      "=",
      "T2.Airline",
      "GROUP",
      "BY",
      "T1.Airline",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "200"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "airline",
      "from",
      "airlines",
      "as",
      "t1",
      "join",
      "flights",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "uid",
      "=",
      "t2",
      ".",
      "airline",
      "group",
      "by",
      "t1",
      ".",
      "airline",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "value"
    ],
    "question": "Which airlines have less than 200 flown ?",
    "question_toks": [
      "Which",
      "airlines",
      "have",
      "less",
      "than",
      "200",
      "flown",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T2.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "What are flight records of Airline \" United Airlines \" ?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "records",
      "of",
      "Airline",
      "\"",
      "United",
      "Airlines",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRLINES",
      "AS",
      "T2",
      "ON",
      "T2.uid",
      "=",
      "T1.Airline",
      "WHERE",
      "T2.Airline",
      "=",
      "``",
      "United",
      "Airlines",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airlines",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "uid",
      "=",
      "t1",
      ".",
      "airline",
      "where",
      "t2",
      ".",
      "airline",
      "=",
      "value"
    ],
    "question": "Which flying numbers correspond to United Airlines flights ?",
    "question_toks": [
      "Which",
      "flying",
      "numbers",
      "correspond",
      "to",
      "United",
      "Airlines",
      "flights",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"United Airlines\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "What are flight numbers of flown departing from Airport \" APG \" ?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flown",
      "departing",
      "from",
      "Airport",
      "\"",
      "APG",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "SourceAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "sourceairport",
      "=",
      "value"
    ],
    "question": "Give the flight records of flights leaving from APG .",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "records",
      "of",
      "flights",
      "leaving",
      "from",
      "APG",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question": "What are flying numbers of flights arriving at Airport \" APG \" ?",
    "question_toks": [
      "What",
      "are",
      "flying",
      "numbers",
      "of",
      "flights",
      "arriving",
      "at",
      "Airport",
      "\"",
      "APG",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "query_toks": [
      "SELECT",
      "FlightNo",
      "FROM",
      "FLIGHTS",
      "WHERE",
      "DestAirport",
      "=",
      "``",
      "APG",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "flightno",
      "from",
      "flights",
      "where",
      "destairport",
      "=",
      "value"
    ],
    "question": "Give the flight numbers of flying landing at APG .",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flying",
      "landing",
      "at",
      "APG",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"APG\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "What are flight numbers of flown departing from City \" Aberdeen \" ?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "numbers",
      "of",
      "flown",
      "departing",
      "from",
      "City",
      "\"",
      "Aberdeen",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.SourceAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "sourceairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "Give the flight records of flights leaving from Aberdeen .",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "records",
      "of",
      "flights",
      "leaving",
      "from",
      "Aberdeen",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "What are flight count of flights arriving at City \" Aberdeen \" ?",
    "question_toks": [
      "What",
      "are",
      "flight",
      "count",
      "of",
      "flights",
      "arriving",
      "at",
      "City",
      "\"",
      "Aberdeen",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "query_toks": [
      "SELECT",
      "T1.FlightNo",
      "FROM",
      "FLIGHTS",
      "AS",
      "T1",
      "JOIN",
      "AIRPORTS",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.City",
      "=",
      "``",
      "Aberdeen",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "flightno",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "Give the flight numbers of flying arriving in Aberdeen .",
    "question_toks": [
      "Give",
      "the",
      "flight",
      "numbers",
      "of",
      "flying",
      "arriving",
      "in",
      "Aberdeen",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Flights",
      "AS",
      "T1",
      "JOIN",
      "Airports",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.city",
      "=",
      "``",
      "Aberdeen",
      "''",
      "OR",
      "T2.city",
      "=",
      "``",
      "Abilene",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "Find the extent of flights landing in the city of Aberdeen or Abilene .",
    "question_toks": [
      "Find",
      "the",
      "extent",
      "of",
      "flights",
      "landing",
      "in",
      "the",
      "city",
      "of",
      "Aberdeen",
      "or",
      "Abilene",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Abilene\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Flights",
      "AS",
      "T1",
      "JOIN",
      "Airports",
      "AS",
      "T2",
      "ON",
      "T1.DestAirport",
      "=",
      "T2.AirportCode",
      "WHERE",
      "T2.city",
      "=",
      "``",
      "Aberdeen",
      "''",
      "OR",
      "T2.city",
      "=",
      "``",
      "Abilene",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "flights",
      "as",
      "t1",
      "join",
      "airports",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "destairport",
      "=",
      "t2",
      ".",
      "airportcode",
      "where",
      "t2",
      ".",
      "city",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "city",
      "=",
      "value"
    ],
    "question": "How many planes land in Aberdeen or Abilene ?",
    "question_toks": [
      "How",
      "many",
      "planes",
      "land",
      "in",
      "Aberdeen",
      "or",
      "Abilene",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ],
            [
              0,
              6,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Aberdeen\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Abilene\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "Airports",
      "WHERE",
      "AirportCode",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "SourceAirport",
      "FROM",
      "Flights",
      "UNION",
      "SELECT",
      "DestAirport",
      "FROM",
      "Flights",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "not",
      "in",
      "(",
      "select",
      "sourceairport",
      "from",
      "flights",
      "union",
      "select",
      "destairport",
      "from",
      "flights",
      ")"
    ],
    "question": "Find the name of airplanes which do not have any flight in and out .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "airplanes",
      "which",
      "do",
      "not",
      "have",
      "any",
      "flight",
      "in",
      "and",
      "out",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": {
              "except": null,
              "from": {
                "conds": [],
                "table_units": [
                  [
                    "table_unit",
                    2
                  ]
                ]
              },
              "groupBy": [],
              "having": [],
              "intersect": null,
              "limit": null,
              "orderBy": [],
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        13,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "union": null,
              "where": []
            },
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "query_toks": [
      "SELECT",
      "AirportName",
      "FROM",
      "Airports",
      "WHERE",
      "AirportCode",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "SourceAirport",
      "FROM",
      "Flights",
      "UNION",
      "SELECT",
      "DestAirport",
      "FROM",
      "Flights",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "airportname",
      "from",
      "airports",
      "where",
      "airportcode",
      "not",
      "in",
      "(",
      "select",
      "sourceairport",
      "from",
      "flights",
      "union",
      "select",
      "destairport",
      "from",
      "flights",
      ")"
    ],
    "question": "Which airports do not have departing or arriving flown ?",
    "question_toks": [
      "Which",
      "airports",
      "do",
      "not",
      "have",
      "departing",
      "or",
      "arriving",
      "flown",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": {
              "except": null,
              "from": {
                "conds": [],
                "table_units": [
                  [
                    "table_unit",
                    2
                  ]
                ]
              },
              "groupBy": [],
              "having": [],
              "intersect": null,
              "limit": null,
              "orderBy": [],
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        13,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "union": null,
              "where": []
            },
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) FROM employee",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "employee"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "employee"
    ],
    "question": "How many personnel are there ?",
    "question_toks": [
      "How",
      "many",
      "personnel",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) FROM employee",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "employee"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "employee"
    ],
    "question": "Count the number of associates",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "associates"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM employee ORDER BY age",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "employee",
      "ORDER",
      "BY",
      "age"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "employee",
      "order",
      "by",
      "age"
    ],
    "question": "Sort employer names by their age in ascending order .",
    "question_toks": [
      "Sort",
      "employer",
      "names",
      "by",
      "their",
      "age",
      "in",
      "ascending",
      "order",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM employee ORDER BY age",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "employee",
      "ORDER",
      "BY",
      "age"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "employee",
      "order",
      "by",
      "age"
    ],
    "question": "List the names of employed and sort in ascending order of age .",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "employed",
      "and",
      "sort",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "city",
      "FROM",
      "employee",
      "GROUP",
      "BY",
      "city"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "city",
      "from",
      "employee",
      "group",
      "by",
      "city"
    ],
    "question": "What is the number of employees from each metropolitan ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "employees",
      "from",
      "each",
      "metropolitan",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "city",
      "FROM",
      "employee",
      "GROUP",
      "BY",
      "city"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "city",
      "from",
      "employee",
      "group",
      "by",
      "city"
    ],
    "question": "Count the number of employees for each locality .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "employees",
      "for",
      "each",
      "locality",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "city",
      "FROM",
      "employee",
      "WHERE",
      "age",
      "<",
      "30",
      "GROUP",
      "BY",
      "city",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "city",
      "from",
      "employee",
      "where",
      "age",
      "<",
      "value",
      "group",
      "by",
      "city",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Which metropolitan do more than one employee under age 30 come from ?",
    "question_toks": [
      "Which",
      "metropolitan",
      "do",
      "more",
      "than",
      "one",
      "employee",
      "under",
      "age",
      "30",
      "come",
      "from",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          30.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "city",
      "FROM",
      "employee",
      "WHERE",
      "age",
      "<",
      "30",
      "GROUP",
      "BY",
      "city",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "city",
      "from",
      "employee",
      "where",
      "age",
      "<",
      "value",
      "group",
      "by",
      "city",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find the cities that have more than one employed under age 30 .",
    "question_toks": [
      "Find",
      "the",
      "cities",
      "that",
      "have",
      "more",
      "than",
      "one",
      "employed",
      "under",
      "age",
      "30",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          30.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "LOCATION",
      "FROM",
      "shop",
      "GROUP",
      "BY",
      "LOCATION"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "location",
      "from",
      "shop",
      "group",
      "by",
      "location"
    ],
    "question": "Find the number of shops in each place .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "shops",
      "in",
      "each",
      "place",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "LOCATION",
      "FROM",
      "shop",
      "GROUP",
      "BY",
      "LOCATION"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "location",
      "from",
      "shop",
      "group",
      "by",
      "location"
    ],
    "question": "How many shops are there in each place ?",
    "question_toks": [
      "How",
      "many",
      "shops",
      "are",
      "there",
      "in",
      "each",
      "place",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "manager_name",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "manager_name",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the manager name and district of the boutique whose number of products is the largest .",
    "question_toks": [
      "Find",
      "the",
      "manager",
      "name",
      "and",
      "district",
      "of",
      "the",
      "boutique",
      "whose",
      "number",
      "of",
      "products",
      "is",
      "the",
      "largest",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "manager_name",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "manager_name",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the manager name and region of the shop that sells the largest number of products ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "manager",
      "name",
      "and",
      "region",
      "of",
      "the",
      "shop",
      "that",
      "sells",
      "the",
      "largest",
      "number",
      "of",
      "products",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "Number_products",
      ")",
      ",",
      "max",
      "(",
      "Number_products",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "number_products",
      ")",
      ",",
      "max",
      "(",
      "number_products",
      ")",
      "from",
      "shop"
    ],
    "question": "find the minimum and maximum amount of products of all stores .",
    "question_toks": [
      "find",
      "the",
      "minimum",
      "and",
      "maximum",
      "amount",
      "of",
      "products",
      "of",
      "all",
      "stores",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "Number_products",
      ")",
      ",",
      "max",
      "(",
      "Number_products",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "number_products",
      ")",
      ",",
      "max",
      "(",
      "number_products",
      ")",
      "from",
      "shop"
    ],
    "question": "What are the minimum and maximum number of products across all the shopping ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "minimum",
      "and",
      "maximum",
      "number",
      "of",
      "products",
      "across",
      "all",
      "the",
      "shopping",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "LOCATION",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "location",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc"
    ],
    "question": "Return the name , place and district of all shops in descending order of number of products .",
    "question_toks": [
      "Return",
      "the",
      "name",
      ",",
      "place",
      "and",
      "district",
      "of",
      "all",
      "shops",
      "in",
      "descending",
      "order",
      "of",
      "number",
      "of",
      "products",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "LOCATION",
      ",",
      "district",
      "FROM",
      "shop",
      "ORDER",
      "BY",
      "number_products",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "location",
      ",",
      "district",
      "from",
      "shop",
      "order",
      "by",
      "number_products",
      "desc"
    ],
    "question": "Sort all the shops by number products in descending order , and return the name , place and district of each shop .",
    "question_toks": [
      "Sort",
      "all",
      "the",
      "shops",
      "by",
      "number",
      "products",
      "in",
      "descending",
      "order",
      ",",
      "and",
      "return",
      "the",
      "name",
      ",",
      "place",
      "and",
      "district",
      "of",
      "each",
      "shop",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "shop",
      "WHERE",
      "number_products",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "number_products",
      ")",
      "FROM",
      "shop",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "number_products",
      ")",
      "from",
      "shop",
      ")"
    ],
    "question": "Find the names of stores whose number products is more than the average amount of products .",
    "question_toks": [
      "Find",
      "the",
      "names",
      "of",
      "stores",
      "whose",
      "number",
      "products",
      "is",
      "more",
      "than",
      "the",
      "average",
      "amount",
      "of",
      "products",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "shop",
      "WHERE",
      "number_products",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "number_products",
      ")",
      "FROM",
      "shop",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "number_products",
      ")",
      "from",
      "shop",
      ")"
    ],
    "question": "Which retailers ' number products is above the average ? Give me the shop names .",
    "question_toks": [
      "Which",
      "retailers",
      "'",
      "number",
      "products",
      "is",
      "above",
      "the",
      "average",
      "?",
      "Give",
      "me",
      "the",
      "shop",
      "names",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t1.name",
      "FROM",
      "employee",
      "AS",
      "t1",
      "JOIN",
      "evaluation",
      "AS",
      "t2",
      "ON",
      "t1.Employee_ID",
      "=",
      "t2.Employee_ID",
      "GROUP",
      "BY",
      "t2.Employee_ID",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "employee_id",
      "=",
      "t2",
      ".",
      "employee_id",
      "group",
      "by",
      "t2",
      ".",
      "employee_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "find the name of employee who was awarded the most times in the evaluating .",
    "question_toks": [
      "find",
      "the",
      "name",
      "of",
      "employee",
      "who",
      "was",
      "awarded",
      "the",
      "most",
      "times",
      "in",
      "the",
      "evaluating",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t1.name",
      "FROM",
      "employee",
      "AS",
      "t1",
      "JOIN",
      "evaluation",
      "AS",
      "t2",
      "ON",
      "t1.Employee_ID",
      "=",
      "t2.Employee_ID",
      "GROUP",
      "BY",
      "t2.Employee_ID",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "employee_id",
      "=",
      "t2",
      ".",
      "employee_id",
      "group",
      "by",
      "t2",
      ".",
      "employee_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which employee received the most awards in evaluations ? Give me the job name .",
    "question_toks": [
      "Which",
      "employee",
      "received",
      "the",
      "most",
      "awards",
      "in",
      "evaluations",
      "?",
      "Give",
      "me",
      "the",
      "job",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t1.name",
      "FROM",
      "employee",
      "AS",
      "t1",
      "JOIN",
      "evaluation",
      "AS",
      "t2",
      "ON",
      "t1.Employee_ID",
      "=",
      "t2.Employee_ID",
      "ORDER",
      "BY",
      "t2.bonus",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "employee_id",
      "=",
      "t2",
      ".",
      "employee_id",
      "order",
      "by",
      "t2",
      ".",
      "bonus",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the name of the person who got the highest one time bonus .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "person",
      "who",
      "got",
      "the",
      "highest",
      "one",
      "time",
      "bonus",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t1.name",
      "FROM",
      "employee",
      "AS",
      "t1",
      "JOIN",
      "evaluation",
      "AS",
      "t2",
      "ON",
      "t1.Employee_ID",
      "=",
      "t2.Employee_ID",
      "ORDER",
      "BY",
      "t2.bonus",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "employee",
      "as",
      "t1",
      "join",
      "evaluation",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "employee_id",
      "=",
      "t2",
      ".",
      "employee_id",
      "order",
      "by",
      "t2",
      ".",
      "bonus",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which individual received the biggest bonus ? Give me the employee name .",
    "question_toks": [
      "Which",
      "individual",
      "received",
      "the",
      "biggest",
      "bonus",
      "?",
      "Give",
      "me",
      "the",
      "employee",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              15,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              17,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "employee",
      "WHERE",
      "Employee_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Employee_ID",
      "FROM",
      "evaluation",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "employee",
      "where",
      "employee_id",
      "not",
      "in",
      "(",
      "select",
      "employee_id",
      "from",
      "evaluation",
      ")"
    ],
    "question": "Find the names of employees who never won any outstanding in the evaluation .",
    "question_toks": [
      "Find",
      "the",
      "names",
      "of",
      "employees",
      "who",
      "never",
      "won",
      "any",
      "outstanding",
      "in",
      "the",
      "evaluation",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  3
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      15,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "employee",
      "WHERE",
      "Employee_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Employee_ID",
      "FROM",
      "evaluation",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "employee",
      "where",
      "employee_id",
      "not",
      "in",
      "(",
      "select",
      "employee_id",
      "from",
      "evaluation",
      ")"
    ],
    "question": "What are the names of the employees who never received any evaluating ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "employees",
      "who",
      "never",
      "received",
      "any",
      "evaluating",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  3
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      15,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t2.name",
      "FROM",
      "hiring",
      "AS",
      "t1",
      "JOIN",
      "shop",
      "AS",
      "t2",
      "ON",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "GROUP",
      "BY",
      "t1.shop_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "shop_id",
      "=",
      "t2",
      ".",
      "shop_id",
      "group",
      "by",
      "t1",
      ".",
      "shop_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the shop that is employment the largest number of employees ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "shop",
      "that",
      "is",
      "employment",
      "the",
      "largest",
      "number",
      "of",
      "employees",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t2.name",
      "FROM",
      "hiring",
      "AS",
      "t1",
      "JOIN",
      "shop",
      "AS",
      "t2",
      "ON",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "GROUP",
      "BY",
      "t1.shop_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "shop_id",
      "=",
      "t2",
      ".",
      "shop_id",
      "group",
      "by",
      "t1",
      ".",
      "shop_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which boutique has the most employees ? Give me the shop name .",
    "question_toks": [
      "Which",
      "boutique",
      "has",
      "the",
      "most",
      "employees",
      "?",
      "Give",
      "me",
      "the",
      "shop",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "shop",
      "WHERE",
      "shop_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "shop_id",
      "FROM",
      "hiring",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "shop_id",
      "not",
      "in",
      "(",
      "select",
      "shop_id",
      "from",
      "hiring",
      ")"
    ],
    "question": "Find the name of the shops that do not hire any employed .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "shops",
      "that",
      "do",
      "not",
      "hire",
      "any",
      "employed",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "shop",
      "WHERE",
      "shop_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "shop_id",
      "FROM",
      "hiring",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "shop",
      "where",
      "shop_id",
      "not",
      "in",
      "(",
      "select",
      "shop_id",
      "from",
      "hiring",
      ")"
    ],
    "question": "Which shops run with no personnel ? Find the shop names",
    "question_toks": [
      "Which",
      "shops",
      "run",
      "with",
      "no",
      "personnel",
      "?",
      "Find",
      "the",
      "shop",
      "names"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      11,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2.name",
      "FROM",
      "hiring",
      "AS",
      "t1",
      "JOIN",
      "shop",
      "AS",
      "t2",
      "ON",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "GROUP",
      "BY",
      "t2.name"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "shop_id",
      "=",
      "t2",
      ".",
      "shop_id",
      "group",
      "by",
      "t2",
      ".",
      "name"
    ],
    "question": "Find the number of employees hired in each boutique ; show the shop name as well .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "employees",
      "hired",
      "in",
      "each",
      "boutique",
      ";",
      "show",
      "the",
      "shop",
      "name",
      "as",
      "well",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2.name",
      "FROM",
      "hiring",
      "AS",
      "t1",
      "JOIN",
      "shop",
      "AS",
      "t2",
      "ON",
      "t1.shop_id",
      "=",
      "t2.shop_id",
      "GROUP",
      "BY",
      "t2.name"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "hiring",
      "as",
      "t1",
      "join",
      "shop",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "shop_id",
      "=",
      "t2",
      ".",
      "shop_id",
      "group",
      "by",
      "t2",
      ".",
      "name"
    ],
    "question": "For each boutique , return the number of employees working there and the name of the shop .",
    "question_toks": [
      "For",
      "each",
      "boutique",
      ",",
      "return",
      "the",
      "number",
      "of",
      "employees",
      "working",
      "there",
      "and",
      "the",
      "name",
      "of",
      "the",
      "shop",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT sum(bonus) FROM evaluation",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "bonus",
      ")",
      "FROM",
      "evaluation"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "bonus",
      ")",
      "from",
      "evaluation"
    ],
    "question": "What is total incentive given in all evaluations ?",
    "question_toks": [
      "What",
      "is",
      "total",
      "incentive",
      "given",
      "in",
      "all",
      "evaluations",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT sum(bonus) FROM evaluation",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "bonus",
      ")",
      "FROM",
      "evaluation"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "bonus",
      ")",
      "from",
      "evaluation"
    ],
    "question": "Find the total amount of score given in all the evaluations .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "amount",
      "of",
      "score",
      "given",
      "in",
      "all",
      "the",
      "evaluations",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT * FROM hiring",
    "query_toks": [
      "SELECT",
      "*",
      "FROM",
      "hiring"
    ],
    "query_toks_no_value": [
      "select",
      "*",
      "from",
      "hiring"
    ],
    "question": "Give me all the information about employment .",
    "question_toks": [
      "Give",
      "me",
      "all",
      "the",
      "information",
      "about",
      "employment",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT * FROM hiring",
    "query_toks": [
      "SELECT",
      "*",
      "FROM",
      "hiring"
    ],
    "query_toks_no_value": [
      "select",
      "*",
      "from",
      "hiring"
    ],
    "question": "What is all the information about job ?",
    "question_toks": [
      "What",
      "is",
      "all",
      "the",
      "information",
      "about",
      "job",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "query_toks": [
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      "<",
      "3000",
      "INTERSECT",
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      ">",
      "10000"
    ],
    "query_toks_no_value": [
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      "<",
      "value",
      "intersect",
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "value"
    ],
    "question": "Which district has both stores with less than 3000 products and stores with more than 10000 produce ?",
    "question_toks": [
      "Which",
      "district",
      "has",
      "both",
      "stores",
      "with",
      "less",
      "than",
      "3000",
      "products",
      "and",
      "stores",
      "with",
      "more",
      "than",
      "10000",
      "produce",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            10000.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "query_toks": [
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      "<",
      "3000",
      "INTERSECT",
      "SELECT",
      "district",
      "FROM",
      "shop",
      "WHERE",
      "Number_products",
      ">",
      "10000"
    ],
    "query_toks_no_value": [
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      "<",
      "value",
      "intersect",
      "select",
      "district",
      "from",
      "shop",
      "where",
      "number_products",
      ">",
      "value"
    ],
    "question": "Find the neighborhoods in which there are both shops selling less than 3000 products and shops selling more than 10000 products .",
    "question_toks": [
      "Find",
      "the",
      "neighborhoods",
      "in",
      "which",
      "there",
      "are",
      "both",
      "shops",
      "selling",
      "less",
      "than",
      "3000",
      "products",
      "and",
      "shops",
      "selling",
      "more",
      "than",
      "10000",
      "products",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            10000.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(DISTINCT LOCATION) FROM shop",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LOCATION",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "location",
      ")",
      "from",
      "shop"
    ],
    "question": "How many different store places are there ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "store",
      "places",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "query": "SELECT count(DISTINCT LOCATION) FROM shop",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LOCATION",
      ")",
      "FROM",
      "shop"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "location",
      ")",
      "from",
      "shop"
    ],
    "question": "Count the number of distinct store places .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "distinct",
      "store",
      "places",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                7,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Documents",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents"
    ],
    "question": "How many records do we have ?",
    "question_toks": [
      "How",
      "many",
      "records",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Documents",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents"
    ],
    "question": "Count the number of documentation .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "documentation",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "from",
      "documents"
    ],
    "question": "List document IDs , document names , and document descriptions for all documentation .",
    "question_toks": [
      "List",
      "document",
      "IDs",
      ",",
      "document",
      "names",
      ",",
      "and",
      "document",
      "descriptions",
      "for",
      "all",
      "documentation",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "document_name",
      ",",
      "document_description",
      "from",
      "documents"
    ],
    "question": "What are the ids , names , and features for all documents ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      ",",
      "names",
      ",",
      "and",
      "features",
      "for",
      "all",
      "documents",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "query_toks": [
      "SELECT",
      "document_name",
      ",",
      "template_id",
      "FROM",
      "Documents",
      "WHERE",
      "Document_Description",
      "LIKE",
      "``",
      "%",
      "w",
      "%",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "document_name",
      ",",
      "template_id",
      "from",
      "documents",
      "where",
      "document_description",
      "like",
      "value"
    ],
    "question": "What is the document name and template id for form with description with the letter ' w ' in it ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "name",
      "and",
      "template",
      "id",
      "for",
      "form",
      "with",
      "description",
      "with",
      "the",
      "letter",
      "'",
      "w",
      "'",
      "in",
      "it",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"%w%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "query_toks": [
      "SELECT",
      "document_name",
      ",",
      "template_id",
      "FROM",
      "Documents",
      "WHERE",
      "Document_Description",
      "LIKE",
      "``",
      "%",
      "w",
      "%",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "document_name",
      ",",
      "template_id",
      "from",
      "documents",
      "where",
      "document_description",
      "like",
      "value"
    ],
    "question": "Return the names and template ids for documents that contain the letter wo in their description .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "template",
      "ids",
      "for",
      "documents",
      "that",
      "contain",
      "the",
      "letter",
      "wo",
      "in",
      "their",
      "description",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          "\"%w%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "template_id",
      ",",
      "Document_Description",
      "FROM",
      "Documents",
      "WHERE",
      "document_name",
      "=",
      "``",
      "Robbin",
      "CV",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "template_id",
      ",",
      "document_description",
      "from",
      "documents",
      "where",
      "document_name",
      "=",
      "value"
    ],
    "question": "What is the document id , template id and description for form named \" Robbin CV \" ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "document",
      "id",
      ",",
      "template",
      "id",
      "and",
      "description",
      "for",
      "form",
      "named",
      "\"",
      "Robbin",
      "CV",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Robbin CV\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "template_id",
      ",",
      "Document_Description",
      "FROM",
      "Documents",
      "WHERE",
      "document_name",
      "=",
      "``",
      "Robbin",
      "CV",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "template_id",
      ",",
      "document_description",
      "from",
      "documents",
      "where",
      "document_name",
      "=",
      "value"
    ],
    "question": "Return the document id , template id , and designation for the document with the name Robbin CV .",
    "question_toks": [
      "Return",
      "the",
      "document",
      "id",
      ",",
      "template",
      "id",
      ",",
      "and",
      "designation",
      "for",
      "the",
      "document",
      "with",
      "the",
      "name",
      "Robbin",
      "CV",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Robbin CV\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(DISTINCT template_id) FROM Documents",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "template_id",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "template_id",
      ")",
      "from",
      "documents"
    ],
    "question": "How many different templates do all documentation use ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "templates",
      "do",
      "all",
      "documentation",
      "use",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(DISTINCT template_id) FROM Documents",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "template_id",
      ")",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "template_id",
      ")",
      "from",
      "documents"
    ],
    "question": "Count the number of different templates used for records .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "different",
      "templates",
      "used",
      "for",
      "records",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.Template_ID",
      "=",
      "T2.Template_ID",
      "WHERE",
      "T2.Template_Type_Code",
      "=",
      "'PPT",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "How many documentation are using the template with type code ' PPT ' ?",
    "question_toks": [
      "How",
      "many",
      "documentation",
      "are",
      "using",
      "the",
      "template",
      "with",
      "type",
      "code",
      "'",
      "PPT",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.Template_ID",
      "=",
      "T2.Template_ID",
      "WHERE",
      "T2.Template_Type_Code",
      "=",
      "'PPT",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "Count the number of documents that use the PPT model type .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "documents",
      "that",
      "use",
      "the",
      "PPT",
      "model",
      "type",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "query_toks": [
      "SELECT",
      "template_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents",
      "GROUP",
      "BY",
      "template_id"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "group",
      "by",
      "template_id"
    ],
    "question": "Show all template ids and number of documentation using each template .",
    "question_toks": [
      "Show",
      "all",
      "template",
      "ids",
      "and",
      "number",
      "of",
      "documentation",
      "using",
      "each",
      "template",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "query_toks": [
      "SELECT",
      "template_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Documents",
      "GROUP",
      "BY",
      "template_id"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "documents",
      "group",
      "by",
      "template_id"
    ],
    "question": "What are all different template ids used for records , and how many times were each of them used ?",
    "question_toks": [
      "What",
      "are",
      "all",
      "different",
      "template",
      "ids",
      "used",
      "for",
      "records",
      ",",
      "and",
      "how",
      "many",
      "times",
      "were",
      "each",
      "of",
      "them",
      "used",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.template_id",
      ",",
      "T2.Template_Type_Code",
      "FROM",
      "Documents",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_id",
      ",",
      "t2",
      ".",
      "template_type_code",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the id and type function for the template used by the most documents ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "id",
      "and",
      "type",
      "function",
      "for",
      "the",
      "template",
      "used",
      "by",
      "the",
      "most",
      "documents",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.template_id",
      ",",
      "T2.Template_Type_Code",
      "FROM",
      "Documents",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_id",
      ",",
      "t2",
      ".",
      "template_type_code",
      "from",
      "documents",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the id and type coding of the template that is used for the greatest number of documents .",
    "question_toks": [
      "Return",
      "the",
      "id",
      "and",
      "type",
      "coding",
      "of",
      "the",
      "template",
      "that",
      "is",
      "used",
      "for",
      "the",
      "greatest",
      "number",
      "of",
      "documents",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Documents",
      "GROUP",
      "BY",
      "template_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "documents",
      "group",
      "by",
      "template_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Show ids for all templates that are used by more than one record .",
    "question_toks": [
      "Show",
      "ids",
      "for",
      "all",
      "templates",
      "that",
      "are",
      "used",
      "by",
      "more",
      "than",
      "one",
      "record",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Documents",
      "GROUP",
      "BY",
      "template_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "documents",
      "group",
      "by",
      "template_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the model ids of any templates used in more than a single document ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "model",
      "ids",
      "of",
      "any",
      "templates",
      "used",
      "in",
      "more",
      "than",
      "a",
      "single",
      "document",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_id",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "templates",
      "except",
      "select",
      "template_id",
      "from",
      "documents"
    ],
    "question": "Show ids for all templates not used by any documentation .",
    "question_toks": [
      "Show",
      "ids",
      "for",
      "all",
      "templates",
      "not",
      "used",
      "by",
      "any",
      "documentation",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_id",
      "FROM",
      "Documents"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "templates",
      "except",
      "select",
      "template_id",
      "from",
      "documents"
    ],
    "question": "What are the ids for templates that are not used in any records ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "for",
      "templates",
      "that",
      "are",
      "not",
      "used",
      "in",
      "any",
      "records",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  10,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Templates",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates"
    ],
    "question": "How many templates do we have ?",
    "question_toks": [
      "How",
      "many",
      "templates",
      "do",
      "we",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Templates",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates"
    ],
    "question": "Count the number of templates .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "templates",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "Show template ids , release numbers , and template type codes for all templates .",
    "question_toks": [
      "Show",
      "template",
      "ids",
      ",",
      "release",
      "numbers",
      ",",
      "and",
      "template",
      "type",
      "codes",
      "for",
      "all",
      "templates",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      ",",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "What are the ids , version numbers , and like codes for each template ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      ",",
      "version",
      "numbers",
      ",",
      "and",
      "like",
      "codes",
      "for",
      "each",
      "template",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT DISTINCT template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "Show all distinct form type codes for all templates .",
    "question_toks": [
      "Show",
      "all",
      "distinct",
      "form",
      "type",
      "codes",
      "for",
      "all",
      "templates",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT DISTINCT template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "What are the different template type coding ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "template",
      "type",
      "coding",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "PP",
      "''",
      "OR",
      "template_type_code",
      "=",
      "``",
      "PPT",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value",
      "or",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "What are the ids of templates with template type way PP or PPT ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "templates",
      "with",
      "template",
      "type",
      "way",
      "PP",
      "or",
      "PPT",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PP\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "query_toks": [
      "SELECT",
      "template_id",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "PP",
      "''",
      "OR",
      "template_type_code",
      "=",
      "``",
      "PPT",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_id",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value",
      "or",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "Return the ids of templates that have the way PP or PPT .",
    "question_toks": [
      "Return",
      "the",
      "ids",
      "of",
      "templates",
      "that",
      "have",
      "the",
      "way",
      "PP",
      "or",
      "PPT",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PP\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"PPT\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "CV",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "How many templates have template type class CV ?",
    "question_toks": [
      "How",
      "many",
      "templates",
      "have",
      "template",
      "type",
      "class",
      "CV",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"CV\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "CV",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "Count the number of templates of the kind CV .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "templates",
      "of",
      "the",
      "kind",
      "CV",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"CV\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "query_toks": [
      "SELECT",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates",
      "WHERE",
      "version_number",
      ">",
      "5"
    ],
    "query_toks_no_value": [
      "select",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates",
      "where",
      "version_number",
      ">",
      "value"
    ],
    "question": "What is the version number and template type code for the model with version number later than 5 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "version",
      "number",
      "and",
      "template",
      "type",
      "code",
      "for",
      "the",
      "model",
      "with",
      "version",
      "number",
      "later",
      "than",
      "5",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "query_toks": [
      "SELECT",
      "version_number",
      ",",
      "template_type_code",
      "FROM",
      "Templates",
      "WHERE",
      "version_number",
      ">",
      "5"
    ],
    "query_toks_no_value": [
      "select",
      "version_number",
      ",",
      "template_type_code",
      "from",
      "templates",
      "where",
      "version_number",
      ">",
      "value"
    ],
    "question": "Return the version numbers and template type codes of templates with a release number greater than 5 .",
    "question_toks": [
      "Return",
      "the",
      "version",
      "numbers",
      "and",
      "template",
      "type",
      "codes",
      "of",
      "templates",
      "with",
      "a",
      "release",
      "number",
      "greater",
      "than",
      "5",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "query_toks": [
      "SELECT",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code"
    ],
    "question": "Show all template type coding and number of templates for each .",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "coding",
      "and",
      "number",
      "of",
      "templates",
      "for",
      "each",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "query_toks": [
      "SELECT",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code"
    ],
    "question": "What are the different template type coding , and how many templates correspond to each ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "template",
      "type",
      "coding",
      ",",
      "and",
      "how",
      "many",
      "templates",
      "correspond",
      "to",
      "each",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which template type up has most number of templates ?",
    "question_toks": [
      "Which",
      "template",
      "type",
      "up",
      "has",
      "most",
      "number",
      "of",
      "templates",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the kind code of the template type that the most templates belong to .",
    "question_toks": [
      "Return",
      "the",
      "kind",
      "code",
      "of",
      "the",
      "template",
      "type",
      "that",
      "the",
      "most",
      "templates",
      "belong",
      "to",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "value"
    ],
    "question": "Show all simple type codes with less than three templates .",
    "question_toks": [
      "Show",
      "all",
      "simple",
      "type",
      "codes",
      "with",
      "less",
      "than",
      "three",
      "templates",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "GROUP",
      "BY",
      "template_type_code",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "group",
      "by",
      "template_type_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "value"
    ],
    "question": "What are the codes of first types that have fewer than 3 templates ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "codes",
      "of",
      "first",
      "types",
      "that",
      "have",
      "fewer",
      "than",
      "3",
      "templates",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "Version_Number",
      ")",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "version_number",
      ")",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "What the smallest version number and its template type end ?",
    "question_toks": [
      "What",
      "the",
      "smallest",
      "version",
      "number",
      "and",
      "its",
      "template",
      "type",
      "end",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "Version_Number",
      ")",
      ",",
      "template_type_code",
      "FROM",
      "Templates"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "version_number",
      ")",
      ",",
      "template_type_code",
      "from",
      "templates"
    ],
    "question": "Return the lowest version number , along with its corresponding template type statement .",
    "question_toks": [
      "Return",
      "the",
      "lowest",
      "version",
      "number",
      ",",
      "along",
      "with",
      "its",
      "corresponding",
      "template",
      "type",
      "statement",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Data",
      "base",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "What is the template type code of the model used by document with the name \" Data base \" ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "template",
      "type",
      "code",
      "of",
      "the",
      "model",
      "used",
      "by",
      "document",
      "with",
      "the",
      "name",
      "\"",
      "Data",
      "base",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Data base\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Data",
      "base",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "Return the template type code of the template that is used by a work named Data base .",
    "question_toks": [
      "Return",
      "the",
      "template",
      "type",
      "code",
      "of",
      "the",
      "template",
      "that",
      "is",
      "used",
      "by",
      "a",
      "work",
      "named",
      "Data",
      "base",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Data base\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "query_toks": [
      "SELECT",
      "T2.document_name",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T1.template_type_code",
      "=",
      "``",
      "BK",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "document_name",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t1",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "Show all document names using templates with template type way BK .",
    "question_toks": [
      "Show",
      "all",
      "document",
      "names",
      "using",
      "templates",
      "with",
      "template",
      "type",
      "way",
      "BK",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"BK\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "query_toks": [
      "SELECT",
      "T2.document_name",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "WHERE",
      "T1.template_type_code",
      "=",
      "``",
      "BK",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "document_name",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "where",
      "t1",
      ".",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "What are the names of documentation that use templates with the code BK ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "documentation",
      "that",
      "use",
      "templates",
      "with",
      "the",
      "code",
      "BK",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"BK\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_type_code"
    ],
    "question": "Show all pre type codes and the number of documents using each type .",
    "question_toks": [
      "Show",
      "all",
      "pre",
      "type",
      "codes",
      "and",
      "the",
      "number",
      "of",
      "documents",
      "using",
      "each",
      "type",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_type_code"
    ],
    "question": "What are the different template type codes , and how many documents use each kind ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "template",
      "type",
      "codes",
      ",",
      "and",
      "how",
      "many",
      "documents",
      "use",
      "each",
      "kind",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_type_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which model type code is used by most number of documents ?",
    "question_toks": [
      "Which",
      "model",
      "type",
      "code",
      "is",
      "used",
      "by",
      "most",
      "number",
      "of",
      "documents",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id",
      "GROUP",
      "BY",
      "T1.template_type_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id",
      "group",
      "by",
      "t1",
      ".",
      "template_type_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the code of the template way that is most commonly used in documents .",
    "question_toks": [
      "Return",
      "the",
      "code",
      "of",
      "the",
      "template",
      "way",
      "that",
      "is",
      "most",
      "commonly",
      "used",
      "in",
      "documents",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "except",
      "select",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id"
    ],
    "question": "Show all pre type codes that are not used by any document .",
    "question_toks": [
      "Show",
      "all",
      "pre",
      "type",
      "codes",
      "that",
      "are",
      "not",
      "used",
      "by",
      "any",
      "document",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "EXCEPT",
      "SELECT",
      "template_type_code",
      "FROM",
      "Templates",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.template_id",
      "=",
      "T2.template_id"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "templates",
      "except",
      "select",
      "template_type_code",
      "from",
      "templates",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_id",
      "=",
      "t2",
      ".",
      "template_id"
    ],
    "question": "What are the coding of template types that are not used for any document ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "coding",
      "of",
      "template",
      "types",
      "that",
      "are",
      "not",
      "used",
      "for",
      "any",
      "document",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "query_toks": [
      "SELECT",
      "template_type_code",
      ",",
      "template_type_description",
      "FROM",
      "Ref_template_types"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      ",",
      "template_type_description",
      "from",
      "ref_template_types"
    ],
    "question": "Show all template type codes and terms .",
    "question_toks": [
      "Show",
      "all",
      "template",
      "type",
      "codes",
      "and",
      "terms",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "query_toks": [
      "SELECT",
      "template_type_code",
      ",",
      "template_type_description",
      "FROM",
      "Ref_template_types"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      ",",
      "template_type_description",
      "from",
      "ref_template_types"
    ],
    "question": "What are the kind codes and descriptions for all template types ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "kind",
      "codes",
      "and",
      "descriptions",
      "for",
      "all",
      "template",
      "types",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "query_toks": [
      "SELECT",
      "template_type_description",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "AD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_description",
      "from",
      "ref_template_types",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "What is the template type descriptions for template type class \" AD \" .",
    "question_toks": [
      "What",
      "is",
      "the",
      "template",
      "type",
      "descriptions",
      "for",
      "template",
      "type",
      "class",
      "\"",
      "AD",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"AD\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "query_toks": [
      "SELECT",
      "template_type_description",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_code",
      "=",
      "``",
      "AD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_description",
      "from",
      "ref_template_types",
      "where",
      "template_type_code",
      "=",
      "value"
    ],
    "question": "Return the template type description of the model type with the code AD .",
    "question_toks": [
      "Return",
      "the",
      "template",
      "type",
      "description",
      "of",
      "the",
      "model",
      "type",
      "with",
      "the",
      "code",
      "AD",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          "\"AD\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_description",
      "=",
      "``",
      "Book",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "ref_template_types",
      "where",
      "template_type_description",
      "=",
      "value"
    ],
    "question": "What is the template type code for template type designation \" Book \" .",
    "question_toks": [
      "What",
      "is",
      "the",
      "template",
      "type",
      "code",
      "for",
      "template",
      "type",
      "designation",
      "\"",
      "Book",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Book\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "query_toks": [
      "SELECT",
      "template_type_code",
      "FROM",
      "Ref_template_types",
      "WHERE",
      "template_type_description",
      "=",
      "``",
      "Book",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "template_type_code",
      "from",
      "ref_template_types",
      "where",
      "template_type_description",
      "=",
      "value"
    ],
    "question": "Return the type code of the template type with the word \" Book \" .",
    "question_toks": [
      "Return",
      "the",
      "type",
      "code",
      "of",
      "the",
      "template",
      "type",
      "with",
      "the",
      "word",
      "\"",
      "Book",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Book\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.template_type_description",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "JOIN",
      "Documents",
      "AS",
      "T3",
      "ON",
      "T2.Template_ID",
      "=",
      "T3.template_ID"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "template_type_description",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "join",
      "documents",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "template_id",
      "=",
      "t3",
      ".",
      "template_id"
    ],
    "question": "What are the distinct template type terms for the templates ever used by any document ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "distinct",
      "template",
      "type",
      "terms",
      "for",
      "the",
      "templates",
      "ever",
      "used",
      "by",
      "any",
      "document",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.template_type_description",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "JOIN",
      "Documents",
      "AS",
      "T3",
      "ON",
      "T2.Template_ID",
      "=",
      "T3.template_ID"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "template_type_description",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "join",
      "documents",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "template_id",
      "=",
      "t3",
      ".",
      "template_id"
    ],
    "question": "Return the different terms for templates that have been used in a document .",
    "question_toks": [
      "Return",
      "the",
      "different",
      "terms",
      "for",
      "templates",
      "that",
      "have",
      "been",
      "used",
      "in",
      "a",
      "document",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "query_toks": [
      "SELECT",
      "T2.template_id",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "WHERE",
      "T1.template_type_description",
      "=",
      "``",
      "Presentation",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "template_id",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "where",
      "t1",
      ".",
      "template_type_description",
      "=",
      "value"
    ],
    "question": "What are the template ids with model type description \" Presentation \" .",
    "question_toks": [
      "What",
      "are",
      "the",
      "template",
      "ids",
      "with",
      "model",
      "type",
      "description",
      "\"",
      "Presentation",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Presentation\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "query_toks": [
      "SELECT",
      "T2.template_id",
      "FROM",
      "Ref_template_types",
      "AS",
      "T1",
      "JOIN",
      "Templates",
      "AS",
      "T2",
      "ON",
      "T1.template_type_code",
      "=",
      "T2.template_type_code",
      "WHERE",
      "T1.template_type_description",
      "=",
      "``",
      "Presentation",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "template_id",
      "from",
      "ref_template_types",
      "as",
      "t1",
      "join",
      "templates",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "template_type_code",
      "=",
      "t2",
      ".",
      "template_type_code",
      "where",
      "t1",
      ".",
      "template_type_description",
      "=",
      "value"
    ],
    "question": "Return the ids corresponding to templates with the designation ' Presentation ' .",
    "question_toks": [
      "Return",
      "the",
      "ids",
      "corresponding",
      "to",
      "templates",
      "with",
      "the",
      "designation",
      "'",
      "Presentation",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              5,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Presentation\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Paragraphs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs"
    ],
    "question": "How many paragraphs in total ?",
    "question_toks": [
      "How",
      "many",
      "paragraphs",
      "in",
      "total",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Paragraphs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs"
    ],
    "question": "Count the number of paragraphs .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "paragraphs",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_ID",
      "=",
      "T2.document_ID",
      "WHERE",
      "T2.document_name",
      "=",
      "'Summer",
      "Show",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "How many paragraphs for the record with name ' Summer Show ' ?",
    "question_toks": [
      "How",
      "many",
      "paragraphs",
      "for",
      "the",
      "record",
      "with",
      "name",
      "'",
      "Summer",
      "Show",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Summer Show\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_ID",
      "=",
      "T2.document_ID",
      "WHERE",
      "T2.document_name",
      "=",
      "'Summer",
      "Show",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "Count the number of paragraphs in the document called ' Summer Show ' .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "the",
      "document",
      "called",
      "'",
      "Summer",
      "Show",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Summer Show\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
    "query_toks": [
      "SELECT",
      "Other_Details",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Korea",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "other_details",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value"
    ],
    "question": "Show paragraph details for section with text ' Korea ' .",
    "question_toks": [
      "Show",
      "paragraph",
      "details",
      "for",
      "section",
      "with",
      "text",
      "'",
      "Korea",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Korea\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
    "query_toks": [
      "SELECT",
      "Other_Details",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Korea",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "other_details",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value"
    ],
    "question": "What are the details for the section that includes the text ' Korea ' ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "details",
      "for",
      "the",
      "section",
      "that",
      "includes",
      "the",
      "text",
      "'",
      "Korea",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Korea\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "query_toks": [
      "SELECT",
      "T1.paragraph_id",
      ",",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.Document_Name",
      "=",
      "'Welcome",
      "to",
      "NY",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "paragraph_id",
      ",",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "Show all article ids and texts for the document with name ' Welcome to NY ' .",
    "question_toks": [
      "Show",
      "all",
      "article",
      "ids",
      "and",
      "texts",
      "for",
      "the",
      "document",
      "with",
      "name",
      "'",
      "Welcome",
      "to",
      "NY",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Welcome to NY\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "query_toks": [
      "SELECT",
      "T1.paragraph_id",
      ",",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.Document_Name",
      "=",
      "'Welcome",
      "to",
      "NY",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "paragraph_id",
      ",",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "What are the ids and texts of paragraphs in the thing titled ' Welcome to NY ' ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "texts",
      "of",
      "paragraphs",
      "in",
      "the",
      "thing",
      "titled",
      "'",
      "Welcome",
      "to",
      "NY",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Welcome to NY\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "query_toks": [
      "SELECT",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Customer",
      "reviews",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "Show all paragraph writings for the document \" Customer reviews \" .",
    "question_toks": [
      "Show",
      "all",
      "paragraph",
      "writings",
      "for",
      "the",
      "document",
      "\"",
      "Customer",
      "reviews",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Customer reviews\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "query_toks": [
      "SELECT",
      "T1.paragraph_text",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "WHERE",
      "T2.document_name",
      "=",
      "``",
      "Customer",
      "reviews",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "paragraph_text",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "where",
      "t2",
      ".",
      "document_name",
      "=",
      "value"
    ],
    "question": "What are the section texts for the document with the name ' Customer reviews ' ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "section",
      "texts",
      "for",
      "the",
      "document",
      "with",
      "the",
      "name",
      "'",
      "Customer",
      "reviews",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Customer reviews\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "ORDER",
      "BY",
      "document_id"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "document_id"
    ],
    "question": "Show all document ids and the number of paragraphs in each document . Order by manner id .",
    "question_toks": [
      "Show",
      "all",
      "document",
      "ids",
      "and",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "each",
      "document",
      ".",
      "Order",
      "by",
      "manner",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "query_toks": [
      "SELECT",
      "document_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "ORDER",
      "BY",
      "document_id"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "document_id"
    ],
    "question": "Return the different thing ids along with the number of paragraphs corresponding to each , ordered by id .",
    "question_toks": [
      "Return",
      "the",
      "different",
      "thing",
      "ids",
      "along",
      "with",
      "the",
      "number",
      "of",
      "paragraphs",
      "corresponding",
      "to",
      "each",
      ",",
      "ordered",
      "by",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
    "query_toks": [
      "SELECT",
      "T1.document_id",
      ",",
      "T2.document_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "GROUP",
      "BY",
      "T1.document_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "document_id",
      ",",
      "t2",
      ".",
      "document_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "group",
      "by",
      "t1",
      ".",
      "document_id"
    ],
    "question": "Show all thing ids , names and the number of paragraphs in each document .",
    "question_toks": [
      "Show",
      "all",
      "thing",
      "ids",
      ",",
      "names",
      "and",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "each",
      "document",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
    "query_toks": [
      "SELECT",
      "T1.document_id",
      ",",
      "T2.document_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "GROUP",
      "BY",
      "T1.document_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "document_id",
      ",",
      "t2",
      ".",
      "document_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "group",
      "by",
      "t1",
      ".",
      "document_id"
    ],
    "question": "What are the ids and names of each record , as well as the number of paragraphs in each ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "names",
      "of",
      "each",
      "record",
      ",",
      "as",
      "well",
      "as",
      "the",
      "number",
      "of",
      "paragraphs",
      "in",
      "each",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "List all present ids with at least two paragraphs .",
    "question_toks": [
      "List",
      "all",
      "present",
      "ids",
      "with",
      "at",
      "least",
      "two",
      "paragraphs",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the ids of documentation that have 2 or more paragraphs ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "documentation",
      "that",
      "have",
      "2",
      "or",
      "more",
      "paragraphs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.document_id",
      ",",
      "T2.document_name",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "GROUP",
      "BY",
      "T1.document_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "document_id",
      ",",
      "t2",
      ".",
      "document_name",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "group",
      "by",
      "t1",
      ".",
      "document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the thing id and name with greatest number of paragraphs ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "thing",
      "id",
      "and",
      "name",
      "with",
      "greatest",
      "number",
      "of",
      "paragraphs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.document_id",
      ",",
      "T2.document_name",
      "FROM",
      "Paragraphs",
      "AS",
      "T1",
      "JOIN",
      "Documents",
      "AS",
      "T2",
      "ON",
      "T1.document_id",
      "=",
      "T2.document_id",
      "GROUP",
      "BY",
      "T1.document_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "document_id",
      ",",
      "t2",
      ".",
      "document_name",
      "from",
      "paragraphs",
      "as",
      "t1",
      "join",
      "documents",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "document_id",
      "=",
      "t2",
      ".",
      "document_id",
      "group",
      "by",
      "t1",
      ".",
      "document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the id and name of the record with the most paragraphs .",
    "question_toks": [
      "Return",
      "the",
      "id",
      "and",
      "name",
      "of",
      "the",
      "record",
      "with",
      "the",
      "most",
      "paragraphs",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the documentation id with least number of paragraphs ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "documentation",
      "id",
      "with",
      "least",
      "number",
      "of",
      "paragraphs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "Return the id of the record with the fewest paragraphs .",
    "question_toks": [
      "Return",
      "the",
      "id",
      "of",
      "the",
      "record",
      "with",
      "the",
      "fewest",
      "paragraphs",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "BETWEEN",
      "1",
      "AND",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "What is the page id with 1 to 2 paragraphs ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "page",
      "id",
      "with",
      "1",
      "to",
      "2",
      "paragraphs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          1,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          2.0
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "GROUP",
      "BY",
      "document_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "BETWEEN",
      "1",
      "AND",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "group",
      "by",
      "document_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "Give the ids of documentation that have between one and two paragraphs .",
    "question_toks": [
      "Give",
      "the",
      "ids",
      "of",
      "documentation",
      "that",
      "have",
      "between",
      "one",
      "and",
      "two",
      "paragraphs",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          15,
          false
        ]
      ],
      "having": [
        [
          false,
          1,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          2.0
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Brazil",
      "'",
      "INTERSECT",
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Ireland",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value",
      "intersect",
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value"
    ],
    "question": "Show the document id with paragraph field ' Brazil ' and ' Ireland ' .",
    "question_toks": [
      "Show",
      "the",
      "document",
      "id",
      "with",
      "paragraph",
      "field",
      "'",
      "Brazil",
      "'",
      "and",
      "'",
      "Ireland",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  15,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            "\"Ireland\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "query_toks": [
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Brazil",
      "'",
      "INTERSECT",
      "SELECT",
      "document_id",
      "FROM",
      "Paragraphs",
      "WHERE",
      "paragraph_text",
      "=",
      "'Ireland",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value",
      "intersect",
      "select",
      "document_id",
      "from",
      "paragraphs",
      "where",
      "paragraph_text",
      "=",
      "value"
    ],
    "question": "What are the ids of documents that contain the section text ' Brazil ' and ' Ireland ' ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "documents",
      "that",
      "contain",
      "the",
      "section",
      "text",
      "'",
      "Brazil",
      "'",
      "and",
      "'",
      "Ireland",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  15,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ],
            "\"Ireland\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT count(*) FROM teacher",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher"
    ],
    "question": "How many educators are there ?",
    "question_toks": [
      "How",
      "many",
      "educators",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT count(*) FROM teacher",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher"
    ],
    "question": "What is the total count of educators ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "count",
      "of",
      "educators",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher ORDER BY Age ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question": "List the names of educators in ascending order of age .",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "educators",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher ORDER BY Age ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question": "What are the names of the educators ordered by ascending age ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "educators",
      "ordered",
      "by",
      "ascending",
      "age",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Age ,  Hometown FROM teacher",
    "query_toks": [
      "SELECT",
      "Age",
      ",",
      "Hometown",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value": [
      "select",
      "age",
      ",",
      "hometown",
      "from",
      "teacher"
    ],
    "question": "What are the age and home of teachers ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "age",
      "and",
      "home",
      "of",
      "teachers",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Age ,  Hometown FROM teacher",
    "query_toks": [
      "SELECT",
      "Age",
      ",",
      "Hometown",
      "FROM",
      "teacher"
    ],
    "query_toks_no_value": [
      "select",
      "age",
      ",",
      "hometown",
      "from",
      "teacher"
    ],
    "question": "What is the age and home of every teacher ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "and",
      "home",
      "of",
      "every",
      "teacher",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban Distric\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Hometown",
      "!",
      "=",
      "``",
      "Little",
      "Lever",
      "Urban",
      "Distric",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "hometown",
      "!",
      "=",
      "value"
    ],
    "question": "List the name of educators whose hometown is not \" Little Lever Urban District \" .",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "educators",
      "whose",
      "hometown",
      "is",
      "not",
      "\"",
      "Little",
      "Lever",
      "Urban",
      "District",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Little Lever Urban Distric\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban Distric\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Hometown",
      "!",
      "=",
      "``",
      "Little",
      "Lever",
      "Urban",
      "Distric",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "hometown",
      "!",
      "=",
      "value"
    ],
    "question": "What are the names of the educators whose hometown is not \" Little Lever Urban District \" ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "educators",
      "whose",
      "hometown",
      "is",
      "not",
      "\"",
      "Little",
      "Lever",
      "Urban",
      "District",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"Little Lever Urban Distric\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Age",
      "=",
      "32",
      "OR",
      "Age",
      "=",
      "33"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "age",
      "=",
      "value",
      "or",
      "age",
      "=",
      "value"
    ],
    "question": "Show the name of teachers older either 32 or 33 ?",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "teachers",
      "older",
      "either",
      "32",
      "or",
      "33",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          32.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          33.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Age",
      "=",
      "32",
      "OR",
      "Age",
      "=",
      "33"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "age",
      "=",
      "value",
      "or",
      "age",
      "=",
      "value"
    ],
    "question": "What are the names of the teachers who are older either 32 or 33 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "who",
      "are",
      "older",
      "either",
      "32",
      "or",
      "33",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          32.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          33.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the city of the youngest teacher ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "city",
      "of",
      "the",
      "youngest",
      "teacher",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "ORDER",
      "BY",
      "Age",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "order",
      "by",
      "age",
      "asc",
      "limit",
      "value"
    ],
    "question": "Where is the youngest educator from ?",
    "question_toks": [
      "Where",
      "is",
      "the",
      "youngest",
      "educator",
      "from",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "query_toks": [
      "SELECT",
      "Hometown",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher",
      "group",
      "by",
      "hometown"
    ],
    "question": "Show different town of teachers and the number of teachers from each hometown .",
    "question_toks": [
      "Show",
      "different",
      "town",
      "of",
      "teachers",
      "and",
      "the",
      "number",
      "of",
      "teachers",
      "from",
      "each",
      "hometown",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "query_toks": [
      "SELECT",
      "Hometown",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "teacher",
      "group",
      "by",
      "hometown"
    ],
    "question": "For each town , how many teachers are there ?",
    "question_toks": [
      "For",
      "each",
      "town",
      ",",
      "how",
      "many",
      "teachers",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the most common city of teachers .",
    "question_toks": [
      "List",
      "the",
      "most",
      "common",
      "city",
      "of",
      "teachers",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the most commmon hometowns for educators ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "most",
      "commmon",
      "hometowns",
      "for",
      "educators",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show the hometowns shared by at least two educators .",
    "question_toks": [
      "Show",
      "the",
      "hometowns",
      "shared",
      "by",
      "at",
      "least",
      "two",
      "educators",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "Hometown",
      "FROM",
      "teacher",
      "GROUP",
      "BY",
      "Hometown",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "hometown",
      "from",
      "teacher",
      "group",
      "by",
      "hometown",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the towns from which at least two students come from ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "towns",
      "from",
      "which",
      "at",
      "least",
      "two",
      "students",
      "come",
      "from",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          7,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "query_toks": [
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id"
    ],
    "question": "Show names of teaching and the courses they are arranged to teach .",
    "question_toks": [
      "Show",
      "names",
      "of",
      "teaching",
      "and",
      "the",
      "courses",
      "they",
      "are",
      "arranged",
      "to",
      "teach",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "query_toks": [
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id"
    ],
    "question": "What is the name of each educator and what course they teach ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "each",
      "educator",
      "and",
      "what",
      "course",
      "they",
      "teach",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "query_toks": [
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "ORDER",
      "BY",
      "T3.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "order",
      "by",
      "t3",
      ".",
      "name"
    ],
    "question": "Show names of educators and the courses they are arranged to teach in ascending alphabetical order of the teacher 's name .",
    "question_toks": [
      "Show",
      "names",
      "of",
      "educators",
      "and",
      "the",
      "courses",
      "they",
      "are",
      "arranged",
      "to",
      "teach",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "of",
      "the",
      "teacher",
      "'s",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "query_toks": [
      "SELECT",
      "T3.Name",
      ",",
      "T2.Course",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "ORDER",
      "BY",
      "T3.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "course",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "order",
      "by",
      "t3",
      ".",
      "name"
    ],
    "question": "What are the names of the teachers and the classes they taught in ascending alphabetical order by the name of the teacher ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "and",
      "the",
      "classes",
      "they",
      "taught",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "by",
      "the",
      "name",
      "of",
      "the",
      "teacher",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "query_toks": [
      "SELECT",
      "T3.Name",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "WHERE",
      "T2.Course",
      "=",
      "``",
      "Math",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "where",
      "t2",
      ".",
      "course",
      "=",
      "value"
    ],
    "question": "Show the name of the teacher for the math classes .",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "the",
      "teacher",
      "for",
      "the",
      "math",
      "classes",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Math\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "query_toks": [
      "SELECT",
      "T3.Name",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "course",
      "AS",
      "T2",
      "ON",
      "T1.Course_ID",
      "=",
      "T2.Course_ID",
      "JOIN",
      "teacher",
      "AS",
      "T3",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T3.Teacher_ID",
      "WHERE",
      "T2.Course",
      "=",
      "``",
      "Math",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "course",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "join",
      "teacher",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t3",
      ".",
      "teacher_id",
      "where",
      "t2",
      ".",
      "course",
      "=",
      "value"
    ],
    "question": "What are the names of the people who teaches math courses ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "people",
      "who",
      "teaches",
      "math",
      "courses",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          "\"Math\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "query_toks": [
      "SELECT",
      "T2.Name",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "teacher",
      "AS",
      "T2",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T2.Teacher_ID",
      "GROUP",
      "BY",
      "T2.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t2",
      ".",
      "teacher_id",
      "group",
      "by",
      "t2",
      ".",
      "name"
    ],
    "question": "Show names of teaching and the number of courses they teach .",
    "question_toks": [
      "Show",
      "names",
      "of",
      "teaching",
      "and",
      "the",
      "number",
      "of",
      "courses",
      "they",
      "teach",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "query_toks": [
      "SELECT",
      "T2.Name",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "teacher",
      "AS",
      "T2",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T2.Teacher_ID",
      "GROUP",
      "BY",
      "T2.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t2",
      ".",
      "teacher_id",
      "group",
      "by",
      "t2",
      ".",
      "name"
    ],
    "question": "What are the names of the teachers and how many courses do they instructional ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "teachers",
      "and",
      "how",
      "many",
      "courses",
      "do",
      "they",
      "instructional",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.Name",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "teacher",
      "AS",
      "T2",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T2.Teacher_ID",
      "GROUP",
      "BY",
      "T2.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t2",
      ".",
      "teacher_id",
      "group",
      "by",
      "t2",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show names of teachers that instructional at least two courses .",
    "question_toks": [
      "Show",
      "names",
      "of",
      "teachers",
      "that",
      "instructional",
      "at",
      "least",
      "two",
      "courses",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.Name",
      "FROM",
      "course_arrange",
      "AS",
      "T1",
      "JOIN",
      "teacher",
      "AS",
      "T2",
      "ON",
      "T1.Teacher_ID",
      "=",
      "T2.Teacher_ID",
      "GROUP",
      "BY",
      "T2.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "course_arrange",
      "as",
      "t1",
      "join",
      "teacher",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "teacher_id",
      "=",
      "t2",
      ".",
      "teacher_id",
      "group",
      "by",
      "t2",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names of the educators who teach at least two courses ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "educators",
      "who",
      "teach",
      "at",
      "least",
      "two",
      "courses",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            [
              0,
              4,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Teacher_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Teacher_id",
      "FROM",
      "course_arrange",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "teacher_id",
      "not",
      "in",
      "(",
      "select",
      "teacher_id",
      "from",
      "course_arrange",
      ")"
    ],
    "question": "List the names of educators who have not been arranged to teach courses .",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "educators",
      "who",
      "have",
      "not",
      "been",
      "arranged",
      "to",
      "teach",
      "courses",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "course_teach",
    "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "teacher",
      "WHERE",
      "Teacher_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Teacher_id",
      "FROM",
      "course_arrange",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "teacher",
      "where",
      "teacher_id",
      "not",
      "in",
      "(",
      "select",
      "teacher_id",
      "from",
      "course_arrange",
      ")"
    ],
    "question": "What are the names of the educators whose courses have not been arranged ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "educators",
      "whose",
      "courses",
      "have",
      "not",
      "been",
      "arranged",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT count(*) FROM visitor WHERE age  <  30",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "visitor",
      "WHERE",
      "age",
      "<",
      "30"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "visitor",
      "where",
      "age",
      "<",
      "value"
    ],
    "question": "How many patrons below age 30 are there ?",
    "question_toks": [
      "How",
      "many",
      "patrons",
      "below",
      "age",
      "30",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          30.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4",
      "ORDER",
      "BY",
      "Level_of_membership",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      ">",
      "value",
      "order",
      "by",
      "level_of_membership",
      "desc"
    ],
    "question": "Find the names of the visitors whose members level is higher than 4 , and order the results by the level from high to low .",
    "question_toks": [
      "Find",
      "the",
      "names",
      "of",
      "the",
      "visitors",
      "whose",
      "members",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "and",
      "order",
      "the",
      "results",
      "by",
      "the",
      "level",
      "from",
      "high",
      "to",
      "low",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      "<",
      "=",
      "4"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      "<",
      "=",
      "value"
    ],
    "question": "What is the average age of the patrons whose membership level is not higher than 4 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "the",
      "patrons",
      "whose",
      "membership",
      "level",
      "is",
      "not",
      "higher",
      "than",
      "4",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          6,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "Level_of_membership",
      "FROM",
      "visitor",
      "WHERE",
      "Level_of_membership",
      ">",
      "4",
      "ORDER",
      "BY",
      "age",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "level_of_membership",
      "from",
      "visitor",
      "where",
      "level_of_membership",
      ">",
      "value",
      "order",
      "by",
      "age",
      "desc"
    ],
    "question": "Find the name and membership level of the visitors whose members level is higher than 4 , and sort by their age from old to young .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "the",
      "visitors",
      "whose",
      "members",
      "level",
      "is",
      "higher",
      "than",
      "4",
      ",",
      "and",
      "sort",
      "by",
      "their",
      "age",
      "from",
      "old",
      "to",
      "young",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "museum_id",
      ",",
      "name",
      "FROM",
      "museum",
      "ORDER",
      "BY",
      "num_of_staff",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "museum_id",
      ",",
      "name",
      "from",
      "museum",
      "order",
      "by",
      "num_of_staff",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the id and name of the smithsonian that has the most staff members ?",
    "question_toks": [
      "Find",
      "the",
      "id",
      "and",
      "name",
      "of",
      "the",
      "smithsonian",
      "that",
      "has",
      "the",
      "most",
      "staff",
      "members",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "num_of_staff",
      ")",
      "FROM",
      "museum",
      "WHERE",
      "open_year",
      "<",
      "2009"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "num_of_staff",
      ")",
      "from",
      "museum",
      "where",
      "open_year",
      "<",
      "value"
    ],
    "question": "Find the average number of staff working for the museums that were closed before 2009 .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "number",
      "of",
      "staff",
      "working",
      "for",
      "the",
      "museums",
      "that",
      "were",
      "closed",
      "before",
      "2009",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2009.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "query_toks": [
      "SELECT",
      "Num_of_Staff",
      ",",
      "Open_Year",
      "FROM",
      "museum",
      "WHERE",
      "name",
      "=",
      "'Plaza",
      "Museum",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "num_of_staff",
      ",",
      "open_year",
      "from",
      "museum",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What are the opening year and staff number of the attractions named Plaza Museum ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "opening",
      "year",
      "and",
      "staff",
      "number",
      "of",
      "the",
      "attractions",
      "named",
      "Plaza",
      "Museum",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Plaza Museum\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "museum",
      "WHERE",
      "num_of_staff",
      ">",
      "(",
      "SELECT",
      "min",
      "(",
      "num_of_staff",
      ")",
      "FROM",
      "museum",
      "WHERE",
      "open_year",
      ">",
      "2010",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "museum",
      "where",
      "num_of_staff",
      ">",
      "(",
      "select",
      "min",
      "(",
      "num_of_staff",
      ")",
      "from",
      "museum",
      "where",
      "open_year",
      ">",
      "value",
      ")"
    ],
    "question": "find the names of smithsonian which have more staff than the minimum staff number of all museums opened after 2010 .",
    "question_toks": [
      "find",
      "the",
      "names",
      "of",
      "smithsonian",
      "which",
      "have",
      "more",
      "staff",
      "than",
      "the",
      "minimum",
      "staff",
      "number",
      "of",
      "all",
      "museums",
      "opened",
      "after",
      "2010",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      3,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                3,
                [
                  0,
                  [
                    0,
                    4,
                    false
                  ],
                  null
                ],
                2010.0,
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
    "query_toks": [
      "SELECT",
      "t1.id",
      ",",
      "t1.name",
      ",",
      "t1.age",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "GROUP",
      "BY",
      "t1.id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "find the id , name and age for visitors who frequented some museums more than once .",
    "question_toks": [
      "find",
      "the",
      "id",
      ",",
      "name",
      "and",
      "age",
      "for",
      "visitors",
      "who",
      "frequented",
      "some",
      "museums",
      "more",
      "than",
      "once",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t2.visitor_id",
      ",",
      "t1.name",
      ",",
      "t1.Level_of_membership",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "GROUP",
      "BY",
      "t2.visitor_id",
      "ORDER",
      "BY",
      "sum",
      "(",
      "t2.Total_spent",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "visitor_id",
      ",",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "level_of_membership",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "group",
      "by",
      "t2",
      ".",
      "visitor_id",
      "order",
      "by",
      "sum",
      "(",
      "t2",
      ".",
      "total_spent",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the id , name and membership level of visitors who have spent the largest amount of money in total in all museum seats ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "id",
      ",",
      "name",
      "and",
      "membership",
      "level",
      "of",
      "visitors",
      "who",
      "have",
      "spent",
      "the",
      "largest",
      "amount",
      "of",
      "money",
      "in",
      "total",
      "in",
      "all",
      "museum",
      "seats",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t2.Museum_ID",
      ",",
      "t1.name",
      "FROM",
      "museum",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.Museum_ID",
      "=",
      "t2.Museum_ID",
      "GROUP",
      "BY",
      "t2.Museum_ID",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "museum_id",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "museum",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "museum_id",
      "=",
      "t2",
      ".",
      "museum_id",
      "group",
      "by",
      "t2",
      ".",
      "museum_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the id and name of the smithsonian visited most times ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "id",
      "and",
      "name",
      "of",
      "the",
      "smithsonian",
      "visited",
      "most",
      "times",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              9,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "museum",
      "WHERE",
      "Museum_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "museum_id",
      "FROM",
      "visit",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "museum",
      "where",
      "museum_id",
      "not",
      "in",
      "(",
      "select",
      "museum_id",
      "from",
      "visit",
      ")"
    ],
    "question": "What is the name of the exhibit that had no visitor yet ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "exhibit",
      "that",
      "had",
      "no",
      "visitor",
      "yet",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "t1.name",
      ",",
      "t1.age",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "ORDER",
      "BY",
      "t2.num_of_ticket",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "age",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "order",
      "by",
      "t2",
      ".",
      "num_of_ticket",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the name and age of the visitor who bought the most seats at once .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "age",
      "of",
      "the",
      "visitor",
      "who",
      "bought",
      "the",
      "most",
      "seats",
      "at",
      "once",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "num_of_ticket",
      ")",
      ",",
      "max",
      "(",
      "num_of_ticket",
      ")",
      "FROM",
      "visit"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "num_of_ticket",
      ")",
      ",",
      "max",
      "(",
      "num_of_ticket",
      ")",
      "from",
      "visit"
    ],
    "question": "What are the average and maximum number of seats bought in all visits ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "average",
      "and",
      "maximum",
      "number",
      "of",
      "seats",
      "bought",
      "in",
      "all",
      "visits",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "t2.Total_spent",
      ")",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "WHERE",
      "t1.Level_of_membership",
      "=",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "t2",
      ".",
      "total_spent",
      ")",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "where",
      "t1",
      ".",
      "level_of_membership",
      "=",
      "value"
    ],
    "question": "What is the total ticket expense of the patrons whose membership level is 1 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "ticket",
      "expense",
      "of",
      "the",
      "patrons",
      "whose",
      "membership",
      "level",
      "is",
      "1",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
    "query_toks": [
      "SELECT",
      "t1.name",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "JOIN",
      "museum",
      "AS",
      "t3",
      "ON",
      "t3.Museum_ID",
      "=",
      "t2.Museum_ID",
      "WHERE",
      "t3.open_year",
      "<",
      "2009",
      "INTERSECT",
      "SELECT",
      "t1.name",
      "FROM",
      "visitor",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.id",
      "=",
      "t2.visitor_id",
      "JOIN",
      "museum",
      "AS",
      "t3",
      "ON",
      "t3.Museum_ID",
      "=",
      "t2.Museum_ID",
      "WHERE",
      "t3.open_year",
      ">",
      "2011"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "join",
      "museum",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "museum_id",
      "=",
      "t2",
      ".",
      "museum_id",
      "where",
      "t3",
      ".",
      "open_year",
      "<",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "visitor",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "visitor_id",
      "join",
      "museum",
      "as",
      "t3",
      "on",
      "t3",
      ".",
      "museum_id",
      "=",
      "t2",
      ".",
      "museum_id",
      "where",
      "t3",
      ".",
      "open_year",
      ">",
      "value"
    ],
    "question": "What is the name of the visitor who visited both a museum opened before 2009 and a smithsonian opened after 2011 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "visitor",
      "who",
      "visited",
      "both",
      "a",
      "museum",
      "opened",
      "before",
      "2009",
      "and",
      "a",
      "smithsonian",
      "opened",
      "after",
      "2011",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ],
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            2011.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2009.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "visitor",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "t2.visitor_id",
      "FROM",
      "museum",
      "AS",
      "t1",
      "JOIN",
      "visit",
      "AS",
      "t2",
      "ON",
      "t1.Museum_ID",
      "=",
      "t2.Museum_ID",
      "WHERE",
      "t1.open_year",
      ">",
      "2010",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "visitor",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "t2",
      ".",
      "visitor_id",
      "from",
      "museum",
      "as",
      "t1",
      "join",
      "visit",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "museum_id",
      "=",
      "t2",
      ".",
      "museum_id",
      "where",
      "t1",
      ".",
      "open_year",
      ">",
      "value",
      ")"
    ],
    "question": "Find the number of people who did not visit any museum opened after 2010 .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "people",
      "who",
      "did",
      "not",
      "visit",
      "any",
      "museum",
      "opened",
      "after",
      "2010",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      1,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    9,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  0
                ],
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      10,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                3,
                [
                  0,
                  [
                    0,
                    4,
                    false
                  ],
                  null
                ],
                2010.0,
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "museum",
      "WHERE",
      "open_year",
      ">",
      "2013",
      "OR",
      "open_year",
      "<",
      "2008"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "museum",
      "where",
      "open_year",
      ">",
      "value",
      "or",
      "open_year",
      "<",
      "value"
    ],
    "question": "How many smithsonian were opened after 2013 or before 2008 ?",
    "question_toks": [
      "How",
      "many",
      "smithsonian",
      "were",
      "opened",
      "after",
      "2013",
      "or",
      "before",
      "2008",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          4,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM players",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "players"
    ],
    "question": "Find the total number of playing .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "playing",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM players",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "players"
    ],
    "question": "How many teams are there ?",
    "question_toks": [
      "How",
      "many",
      "teams",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM matches",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches"
    ],
    "question": "Find the total number of fixtures .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "fixtures",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM matches",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches"
    ],
    "question": "Count the number of fixtures .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "fixtures",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "birth_date",
      "FROM",
      "players",
      "WHERE",
      "country_code",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "birth_date",
      "from",
      "players",
      "where",
      "country_code",
      "=",
      "value"
    ],
    "question": "List the first name and birth date of all players from the place with code USA .",
    "question_toks": [
      "List",
      "the",
      "first",
      "name",
      "and",
      "birth",
      "date",
      "of",
      "all",
      "players",
      "from",
      "the",
      "place",
      "with",
      "code",
      "USA",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "birth_date",
      "FROM",
      "players",
      "WHERE",
      "country_code",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "birth_date",
      "from",
      "players",
      "where",
      "country_code",
      "=",
      "value"
    ],
    "question": "What are the first names and birth dates of playing from the USA ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "playing",
      "from",
      "the",
      "USA",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "from",
      "matches"
    ],
    "question": "Find the average age of losers and winners of all places .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "age",
      "of",
      "losers",
      "and",
      "winners",
      "of",
      "all",
      "places",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "loser_age",
      ")",
      ",",
      "avg",
      "(",
      "winner_age",
      ")",
      "from",
      "matches"
    ],
    "question": "What are the average ages of losers and won across matches ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "average",
      "ages",
      "of",
      "losers",
      "and",
      "won",
      "across",
      "matches",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(winner_rank) FROM matches",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "winner_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "winner_rank",
      ")",
      "from",
      "matches"
    ],
    "question": "Find the average ranking of winners in all matches .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "ranking",
      "of",
      "winners",
      "in",
      "all",
      "matches",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(winner_rank) FROM matches",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "winner_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "winner_rank",
      ")",
      "from",
      "matches"
    ],
    "question": "What is the average ranking for winners in all matches ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "ranking",
      "for",
      "winners",
      "in",
      "all",
      "matches",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT min(loser_rank) FROM matches",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "loser_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "loser_rank",
      ")",
      "from",
      "matches"
    ],
    "question": "Find the highest rank of wins in all matches .",
    "question_toks": [
      "Find",
      "the",
      "highest",
      "rank",
      "of",
      "wins",
      "in",
      "all",
      "matches",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT min(loser_rank) FROM matches",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "loser_rank",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "loser_rank",
      ")",
      "from",
      "matches"
    ],
    "question": "What is the best rankings of losers across all matches ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "best",
      "rankings",
      "of",
      "losers",
      "across",
      "all",
      "matches",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT country_code) FROM players",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "country_code",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "country_code",
      ")",
      "from",
      "players"
    ],
    "question": "find the number of distinct country codes of all playing .",
    "question_toks": [
      "find",
      "the",
      "number",
      "of",
      "distinct",
      "country",
      "codes",
      "of",
      "all",
      "playing",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT country_code) FROM players",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "country_code",
      ")",
      "FROM",
      "players"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "country_code",
      ")",
      "from",
      "players"
    ],
    "question": "How many distinct nationalities do players come from ?",
    "question_toks": [
      "How",
      "many",
      "distinct",
      "nationalities",
      "do",
      "players",
      "come",
      "from",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT loser_name) FROM matches",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "loser_name",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "loser_name",
      ")",
      "from",
      "matches"
    ],
    "question": "Find the number of distinct name of opponents .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "distinct",
      "name",
      "of",
      "opponents",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                15,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT loser_name) FROM matches",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "loser_name",
      ")",
      "FROM",
      "matches"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "loser_name",
      ")",
      "from",
      "matches"
    ],
    "question": "How many different winning names are there ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "winning",
      "names",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                15,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "query_toks": [
      "SELECT",
      "tourney_name",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "tourney_name",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "tourney_name",
      "from",
      "matches",
      "group",
      "by",
      "tourney_name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find the name of tourney that has more than 10 teams .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "tourney",
      "that",
      "has",
      "more",
      "than",
      "10",
      "teams",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          27,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "query_toks": [
      "SELECT",
      "tourney_name",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "tourney_name",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "tourney_name",
      "from",
      "matches",
      "group",
      "by",
      "tourney_name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the names of tournaments that have more than 10 played ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "tournaments",
      "that",
      "have",
      "more",
      "than",
      "10",
      "played",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          27,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "query_toks": [
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "INTERSECT",
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value"
    ],
    "question": "List the names of all winning who played in both 2013 and 2016 .",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "all",
      "winning",
      "who",
      "played",
      "in",
      "both",
      "2013",
      "and",
      "2016",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            2016.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "query_toks": [
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "INTERSECT",
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "intersect",
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value"
    ],
    "question": "What are the names of played who won in both 2013 and 2016 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "played",
      "who",
      "won",
      "in",
      "both",
      "2013",
      "and",
      "2016",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            2016.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "OR",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question": "List the number of all matches who performed in years of 2013 or 2016 .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "all",
      "matches",
      "who",
      "performed",
      "in",
      "years",
      "of",
      "2013",
      "or",
      "2016",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "YEAR",
      "=",
      "2013",
      "OR",
      "YEAR",
      "=",
      "2016"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "matches",
      "where",
      "year",
      "=",
      "value",
      "or",
      "year",
      "=",
      "value"
    ],
    "question": "How many matches were performed in 2013 or 2016 ?",
    "question_toks": [
      "How",
      "many",
      "matches",
      "were",
      "performed",
      "in",
      "2013",
      "or",
      "2016",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2013.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          2016.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "query_toks": [
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'Australian",
      "Open",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value"
    ],
    "question": "What are the country code and first name of the team who won in both tourney WTA Championships and Australian Open ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "country",
      "code",
      "and",
      "first",
      "name",
      "of",
      "the",
      "team",
      "who",
      "won",
      "in",
      "both",
      "tourney",
      "WTA",
      "Championships",
      "and",
      "Australian",
      "Open",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                32,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ],
            "\"Australian Open\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "query_toks": [
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "WHERE",
      "T2.tourney_name",
      "=",
      "'Australian",
      "Open",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "where",
      "t2",
      ".",
      "tourney_name",
      "=",
      "value"
    ],
    "question": "What are the first names and country codes for people who won both the WTA Championships and the Australian Open ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "and",
      "country",
      "codes",
      "for",
      "people",
      "who",
      "won",
      "both",
      "the",
      "WTA",
      "Championships",
      "and",
      "the",
      "Australian",
      "Open",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                32,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                27,
                false
              ],
              null
            ],
            "\"Australian Open\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "country_code",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "country_code",
      "from",
      "players",
      "order",
      "by",
      "birth_date",
      "limit",
      "value"
    ],
    "question": "Find the initial name and country code of the oldest player .",
    "question_toks": [
      "Find",
      "the",
      "initial",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "oldest",
      "player",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "country_code",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "country_code",
      "from",
      "players",
      "order",
      "by",
      "birth_date",
      "limit",
      "value"
    ],
    "question": "What is the first name and country code of the oldest playing ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "oldest",
      "playing",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "order",
      "by",
      "birth_date"
    ],
    "question": "List the first and last name of all players in the order of born date .",
    "question_toks": [
      "List",
      "the",
      "first",
      "and",
      "last",
      "name",
      "of",
      "all",
      "players",
      "in",
      "the",
      "order",
      "of",
      "born",
      "date",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "order",
      "by",
      "birth_date"
    ],
    "question": "What are the full names of all played , sorted by birth date ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "full",
      "names",
      "of",
      "all",
      "played",
      ",",
      "sorted",
      "by",
      "birth",
      "date",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "WHERE",
      "hand",
      "=",
      "'L",
      "'",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "where",
      "hand",
      "=",
      "value",
      "order",
      "by",
      "birth_date"
    ],
    "question": "List the first and last name of all playing who are left / L hand in the order of birth date .",
    "question_toks": [
      "List",
      "the",
      "first",
      "and",
      "last",
      "name",
      "of",
      "all",
      "playing",
      "who",
      "are",
      "left",
      "/",
      "L",
      "hand",
      "in",
      "the",
      "order",
      "of",
      "birth",
      "date",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      "FROM",
      "players",
      "WHERE",
      "hand",
      "=",
      "'L",
      "'",
      "ORDER",
      "BY",
      "birth_date"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      "from",
      "players",
      "where",
      "hand",
      "=",
      "value",
      "order",
      "by",
      "birth_date"
    ],
    "question": "What are the full names of all left handed players , in order of born date ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "full",
      "names",
      "of",
      "all",
      "left",
      "handed",
      "players",
      ",",
      "in",
      "order",
      "of",
      "born",
      "date",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "ORDER",
      "BY",
      "T2.tours",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "order",
      "by",
      "t2",
      ".",
      "tours",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the initial name and country code of the player who did the most number of tours .",
    "question_toks": [
      "Find",
      "the",
      "initial",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "player",
      "who",
      "did",
      "the",
      "most",
      "number",
      "of",
      "tours",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.country_code",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "ORDER",
      "BY",
      "T2.tours",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "order",
      "by",
      "t2",
      ".",
      "tours",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the only name and country code of the player with the most tours ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "only",
      "name",
      "and",
      "country",
      "code",
      "of",
      "the",
      "player",
      "with",
      "the",
      "most",
      "tours",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "YEAR",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the year that has the most number of wins .",
    "question_toks": [
      "Find",
      "the",
      "year",
      "that",
      "has",
      "the",
      "most",
      "number",
      "of",
      "wins",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "YEAR",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which year had the most teams ?",
    "question_toks": [
      "Which",
      "year",
      "had",
      "the",
      "most",
      "teams",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      ",",
      "winner_rank_points",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "winner_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      ",",
      "winner_rank_points",
      "from",
      "matches",
      "group",
      "by",
      "winner_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the name and rank points of the winning who won the most times .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "rank",
      "points",
      "of",
      "the",
      "winning",
      "who",
      "won",
      "the",
      "most",
      "times",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          34,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      ",",
      "winner_rank_points",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "winner_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      ",",
      "winner_rank_points",
      "from",
      "matches",
      "group",
      "by",
      "winner_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the winner who has won the most matches , and how many rank points does this playing have ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "winner",
      "who",
      "has",
      "won",
      "the",
      "most",
      "matches",
      ",",
      "and",
      "how",
      "many",
      "rank",
      "points",
      "does",
      "this",
      "playing",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          34,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'Australian",
      "Open",
      "'",
      "ORDER",
      "BY",
      "winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "order",
      "by",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the name of the winner who has the highest rank scoring and participated in the Australian Open tourney .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "of",
      "the",
      "winner",
      "who",
      "has",
      "the",
      "highest",
      "rank",
      "scoring",
      "and",
      "participated",
      "in",
      "the",
      "Australian",
      "Open",
      "tourney",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Australian Open\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'Australian",
      "Open",
      "'",
      "ORDER",
      "BY",
      "winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "order",
      "by",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the winning with the most rank points who participated in the Australian Open tournament ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "winning",
      "with",
      "the",
      "most",
      "rank",
      "points",
      "who",
      "participated",
      "in",
      "the",
      "Australian",
      "Open",
      "tournament",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"Australian Open\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      ",",
      "loser_name",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "minutes",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      ",",
      "loser_name",
      "from",
      "matches",
      "order",
      "by",
      "minutes",
      "desc",
      "limit",
      "value"
    ],
    "question": "find the names of loser and winning who played in the bout with greatest number of minutes .",
    "question_toks": [
      "find",
      "the",
      "names",
      "of",
      "loser",
      "and",
      "winning",
      "who",
      "played",
      "in",
      "the",
      "bout",
      "with",
      "greatest",
      "number",
      "of",
      "minutes",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "winner_name",
      ",",
      "loser_name",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "minutes",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "winner_name",
      ",",
      "loser_name",
      "from",
      "matches",
      "order",
      "by",
      "minutes",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the names of the winner and also who played in the longest match ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "winner",
      "and",
      "also",
      "who",
      "played",
      "in",
      "the",
      "longest",
      "match",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "ranking",
      ")",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "GROUP",
      "BY",
      "T1.first_name"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "ranking",
      ")",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "group",
      "by",
      "t1",
      ".",
      "first_name"
    ],
    "question": "Find the average standings for each player and their first name .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "standings",
      "for",
      "each",
      "player",
      "and",
      "their",
      "first",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "ranking",
      ")",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "GROUP",
      "BY",
      "T1.first_name"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "ranking",
      ")",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "group",
      "by",
      "t1",
      ".",
      "first_name"
    ],
    "question": "What are the first names of all players , and their average standings ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "all",
      "players",
      ",",
      "and",
      "their",
      "average",
      "standings",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "ranking_points",
      ")",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "GROUP",
      "BY",
      "T1.first_name"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "ranking_points",
      ")",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "group",
      "by",
      "t1",
      ".",
      "first_name"
    ],
    "question": "Find the total ranking mark for each player and their first name .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "ranking",
      "mark",
      "for",
      "each",
      "player",
      "and",
      "their",
      "first",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "ranking_points",
      ")",
      ",",
      "T1.first_name",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "rankings",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.player_id",
      "GROUP",
      "BY",
      "T1.first_name"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "ranking_points",
      ")",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "rankings",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "player_id",
      "group",
      "by",
      "t1",
      ".",
      "first_name"
    ],
    "question": "What are the first names of all players , and their total ranking mark ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "names",
      "of",
      "all",
      "players",
      ",",
      "and",
      "their",
      "total",
      "ranking",
      "mark",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              41,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code"
    ],
    "question": "find the number of players for each individual .",
    "question_toks": [
      "find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "individual",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code"
    ],
    "question": "How many players are from each place ?",
    "question_toks": [
      "How",
      "many",
      "players",
      "are",
      "from",
      "each",
      "place",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "find the code of the place where has the greatest number of players .",
    "question_toks": [
      "find",
      "the",
      "code",
      "of",
      "the",
      "place",
      "where",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "players",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the code of the country with the most play ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "code",
      "of",
      "the",
      "country",
      "with",
      "the",
      "most",
      "play",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "query_toks": [
      "SELECT",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "50"
    ],
    "query_toks_no_value": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find the codes of places that have more than 50 players .",
    "question_toks": [
      "Find",
      "the",
      "codes",
      "of",
      "places",
      "that",
      "have",
      "more",
      "than",
      "50",
      "players",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "query_toks": [
      "SELECT",
      "country_code",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "country_code",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "50"
    ],
    "query_toks_no_value": [
      "select",
      "country_code",
      "from",
      "players",
      "group",
      "by",
      "country_code",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the numbers of countries with more than 50 players ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "numbers",
      "of",
      "countries",
      "with",
      "more",
      "than",
      "50",
      "players",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          50.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "FROM",
      "rankings",
      "GROUP",
      "BY",
      "ranking_date"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "from",
      "rankings",
      "group",
      "by",
      "ranking_date"
    ],
    "question": "Find the total number of tours for each ranking day .",
    "question_toks": [
      "Find",
      "the",
      "total",
      "number",
      "of",
      "tours",
      "for",
      "each",
      "ranking",
      "day",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          39,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "FROM",
      "rankings",
      "GROUP",
      "BY",
      "ranking_date"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "tours",
      ")",
      ",",
      "ranking_date",
      "from",
      "rankings",
      "group",
      "by",
      "ranking_date"
    ],
    "question": "How many total tours were there for each ranking day ?",
    "question_toks": [
      "How",
      "many",
      "total",
      "tours",
      "were",
      "there",
      "for",
      "each",
      "ranking",
      "day",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          39,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                39,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "YEAR",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year"
    ],
    "question": "Find the number of played happened in each year .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "played",
      "happened",
      "in",
      "each",
      "year",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "YEAR",
      "FROM",
      "matches",
      "GROUP",
      "BY",
      "YEAR"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "year",
      "from",
      "matches",
      "group",
      "by",
      "year"
    ],
    "question": "How many matches were performed in each year ?",
    "question_toks": [
      "How",
      "many",
      "matches",
      "were",
      "performed",
      "in",
      "each",
      "year",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          38,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "winner_name",
      ",",
      "winner_rank",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "winner_age",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "winner_name",
      ",",
      "winner_rank",
      "from",
      "matches",
      "order",
      "by",
      "winner_age",
      "limit",
      "value"
    ],
    "question": "Find the name and rank of the 3 youngest won across all matches .",
    "question_toks": [
      "Find",
      "the",
      "name",
      "and",
      "rank",
      "of",
      "the",
      "3",
      "youngest",
      "won",
      "across",
      "all",
      "matches",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 3,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "winner_name",
      ",",
      "winner_rank",
      "FROM",
      "matches",
      "ORDER",
      "BY",
      "winner_age",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "winner_name",
      ",",
      "winner_rank",
      "from",
      "matches",
      "order",
      "by",
      "winner_age",
      "limit",
      "value"
    ],
    "question": "What are the names and ranks of the three youngest won across all matches ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ranks",
      "of",
      "the",
      "three",
      "youngest",
      "won",
      "across",
      "all",
      "matches",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 3,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "winner_name",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "AND",
      "winner_hand",
      "=",
      "'L",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "winner_name",
      ")",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "and",
      "winner_hand",
      "=",
      "value"
    ],
    "question": "How many different won both participated in the WTA Championships and were left handed ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "won",
      "both",
      "participated",
      "in",
      "the",
      "WTA",
      "Championships",
      "and",
      "were",
      "left",
      "handed",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "winner_name",
      ")",
      "FROM",
      "matches",
      "WHERE",
      "tourney_name",
      "=",
      "'WTA",
      "Championships",
      "'",
      "AND",
      "winner_hand",
      "=",
      "'L",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "winner_name",
      ")",
      "from",
      "matches",
      "where",
      "tourney_name",
      "=",
      "value",
      "and",
      "winner_hand",
      "=",
      "value"
    ],
    "question": "Find the number of left handed winners who participated in the WTA Championships .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "left",
      "handed",
      "winners",
      "who",
      "participated",
      "in",
      "the",
      "WTA",
      "Championships",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                34,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              27,
              false
            ],
            null
          ],
          "\"WTA Championships\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              30,
              false
            ],
            null
          ],
          "\"L\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.country_code",
      ",",
      "T1.birth_date",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "ORDER",
      "BY",
      "T2.winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "birth_date",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "order",
      "by",
      "t2",
      ".",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the only name , country code and birth date of the winner who has the highest rank points in all matches .",
    "question_toks": [
      "Find",
      "the",
      "only",
      "name",
      ",",
      "country",
      "code",
      "and",
      "birth",
      "date",
      "of",
      "the",
      "winner",
      "who",
      "has",
      "the",
      "highest",
      "rank",
      "points",
      "in",
      "all",
      "matches",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.country_code",
      ",",
      "T1.birth_date",
      "FROM",
      "players",
      "AS",
      "T1",
      "JOIN",
      "matches",
      "AS",
      "T2",
      "ON",
      "T1.player_id",
      "=",
      "T2.winner_id",
      "ORDER",
      "BY",
      "T2.winner_rank_points",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "country_code",
      ",",
      "t1",
      ".",
      "birth_date",
      "from",
      "players",
      "as",
      "t1",
      "join",
      "matches",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "player_id",
      "=",
      "t2",
      ".",
      "winner_id",
      "order",
      "by",
      "t2",
      ".",
      "winner_rank_points",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the first name , foreign code , and birth date of the player with the most winner rank points across all matches ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      ",",
      "foreign",
      "code",
      ",",
      "and",
      "birth",
      "date",
      "of",
      "the",
      "player",
      "with",
      "the",
      "most",
      "winner",
      "rank",
      "points",
      "across",
      "all",
      "matches",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              32,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              36,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "hand",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "hand",
      "from",
      "players",
      "group",
      "by",
      "hand"
    ],
    "question": "Find the number of players for each fingers type .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "players",
      "for",
      "each",
      "fingers",
      "type",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "wta_1",
    "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "hand",
      "FROM",
      "players",
      "GROUP",
      "BY",
      "hand"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "hand",
      "from",
      "players",
      "group",
      "by",
      "hand"
    ],
    "question": "How many playing are there for each hand type ?",
    "question_toks": [
      "How",
      "many",
      "playing",
      "are",
      "there",
      "for",
      "each",
      "hand",
      "type",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "ship",
      "WHERE",
      "disposition_of_ship",
      "=",
      "'Captured",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "ship",
      "where",
      "disposition_of_ship",
      "=",
      "value"
    ],
    "question": "How many fleet ended up being ' Captured ' ?",
    "question_toks": [
      "How",
      "many",
      "fleet",
      "ended",
      "up",
      "being",
      "'",
      "Captured",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          "\"Captured\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "tonnage",
      "FROM",
      "ship",
      "ORDER",
      "BY",
      "name",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "tonnage",
      "from",
      "ship",
      "order",
      "by",
      "name",
      "desc"
    ],
    "question": "List the name and tonnage ordered by in descending alphaetical order for the names .",
    "question_toks": [
      "List",
      "the",
      "name",
      "and",
      "tonnage",
      "ordered",
      "by",
      "in",
      "descending",
      "alphaetical",
      "order",
      "for",
      "the",
      "names",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT name ,  date FROM battle",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "date",
      "FROM",
      "battle"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "date",
      "from",
      "battle"
    ],
    "question": "List the name , date and outcome of each battle .",
    "question_toks": [
      "List",
      "the",
      "name",
      ",",
      "date",
      "and",
      "outcome",
      "of",
      "each",
      "battle",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT max(killed) ,  min(killed) FROM death",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "killed",
      ")",
      ",",
      "min",
      "(",
      "killed",
      ")",
      "FROM",
      "death"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "killed",
      ")",
      ",",
      "min",
      "(",
      "killed",
      ")",
      "from",
      "death"
    ],
    "question": "What is maximum and minimum death toll occurred each time ?",
    "question_toks": [
      "What",
      "is",
      "maximum",
      "and",
      "minimum",
      "death",
      "toll",
      "occurred",
      "each",
      "time",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT avg(injured) FROM death",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "injured",
      ")",
      "FROM",
      "death"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "injured",
      ")",
      "from",
      "death"
    ],
    "question": "What is the average number of injuries suffered each time ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "number",
      "of",
      "injuries",
      "suffered",
      "each",
      "time",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
    "query_toks": [
      "SELECT",
      "T1.killed",
      ",",
      "T1.injured",
      "FROM",
      "death",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "t2",
      "ON",
      "T1.caused_by_ship_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.tonnage",
      "=",
      "'t",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "killed",
      ",",
      "t1",
      ".",
      "injured",
      "from",
      "death",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "caused_by_ship_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "tonnage",
      "=",
      "value"
    ],
    "question": "What are the died and injury situations caused by the ship with tonnage ' t ' ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "died",
      "and",
      "injury",
      "situations",
      "caused",
      "by",
      "the",
      "ship",
      "with",
      "tonnage",
      "'",
      "t",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"t\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "RESULT",
      "FROM",
      "battle",
      "WHERE",
      "bulgarian_commander",
      "!",
      "=",
      "'Boril",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "result",
      "from",
      "battle",
      "where",
      "bulgarian_commander",
      "!",
      "=",
      "value"
    ],
    "question": "What are the name and results of the battles when the bulgaria commander is not ' Boril '",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      "and",
      "results",
      "of",
      "the",
      "battles",
      "when",
      "the",
      "bulgaria",
      "commander",
      "is",
      "not",
      "'",
      "Boril",
      "'"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Boril\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.id",
      ",",
      "T1.name",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.ship_type",
      "=",
      "'Brig",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "ship_type",
      "=",
      "value"
    ],
    "question": "What are the different ids and names of the battles that loss any ' Brig ' type shipes ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "ids",
      "and",
      "names",
      "of",
      "the",
      "battles",
      "that",
      "loss",
      "any",
      "'",
      "Brig",
      "'",
      "type",
      "shipes",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Brig\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
    "query_toks": [
      "SELECT",
      "T1.id",
      ",",
      "T1.name",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "JOIN",
      "death",
      "AS",
      "T3",
      "ON",
      "T2.id",
      "=",
      "T3.caused_by_ship_id",
      "GROUP",
      "BY",
      "T1.id",
      "HAVING",
      "sum",
      "(",
      "T3.killed",
      ")",
      ">",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "id",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "join",
      "death",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "id",
      "=",
      "t3",
      ".",
      "caused_by_ship_id",
      "group",
      "by",
      "t1",
      ".",
      "id",
      "having",
      "sum",
      "(",
      "t3",
      ".",
      "killed",
      ")",
      ">",
      "value"
    ],
    "question": "What are the ids and names of the fought that led to more than 10 people killed in total .",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "and",
      "names",
      "of",
      "the",
      "fought",
      "that",
      "led",
      "to",
      "more",
      "than",
      "10",
      "people",
      "killed",
      "in",
      "total",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              4,
              17,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.id",
      ",",
      "T2.name",
      "FROM",
      "death",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "t2",
      "ON",
      "T1.caused_by_ship_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T2.id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "id",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "death",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "caused_by_ship_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t2",
      ".",
      "id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the boat id and name that caused most total injuries ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "boat",
      "id",
      "and",
      "name",
      "that",
      "caused",
      "most",
      "total",
      "injuries",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "battle",
      "WHERE",
      "bulgarian_commander",
      "=",
      "'Kaloyan",
      "'",
      "AND",
      "latin_commander",
      "=",
      "'Baldwin",
      "I",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "battle",
      "where",
      "bulgarian_commander",
      "=",
      "value",
      "and",
      "latin_commander",
      "=",
      "value"
    ],
    "question": "What are the distinct battle names which are between bulgaria commander ' Kaloyan ' and latin commander ' Baldwin I ' ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "distinct",
      "battle",
      "names",
      "which",
      "are",
      "between",
      "bulgaria",
      "commander",
      "'",
      "Kaloyan",
      "'",
      "and",
      "latin",
      "commander",
      "'",
      "Baldwin",
      "I",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Kaloyan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Baldwin I\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT count(DISTINCT RESULT) FROM battle",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "RESULT",
      ")",
      "FROM",
      "battle"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "result",
      ")",
      "from",
      "battle"
    ],
    "question": "How many different results are there for the fighting ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "results",
      "are",
      "there",
      "for",
      "the",
      "fighting",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                6,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "battle",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "lost_in_battle",
      "FROM",
      "ship",
      "WHERE",
      "tonnage",
      "=",
      "'225",
      "'",
      ")",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "battle",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "lost_in_battle",
      "from",
      "ship",
      "where",
      "tonnage",
      "=",
      "value",
      ")"
    ],
    "question": "How many battles did not loss any ship with tonnage ' 225 ' ?",
    "question_toks": [
      "How",
      "many",
      "battles",
      "did",
      "not",
      "loss",
      "any",
      "ship",
      "with",
      "tonnage",
      "'",
      "225",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      7,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"225\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
    "query_toks": [
      "SELECT",
      "T1.name",
      ",",
      "T1.date",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.name",
      "=",
      "'Lettice",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.name",
      ",",
      "T1.date",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.name",
      "=",
      "'HMS",
      "Atalanta",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "date",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "date",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "List the name and date the battle that has lost the ship named ' Lettice ' and the boat named ' HMS Atalanta '",
    "question_toks": [
      "List",
      "the",
      "name",
      "and",
      "date",
      "the",
      "battle",
      "that",
      "has",
      "lost",
      "the",
      "ship",
      "named",
      "'",
      "Lettice",
      "'",
      "and",
      "the",
      "boat",
      "named",
      "'",
      "HMS",
      "Atalanta",
      "'"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ],
            "\"HMS Atalanta\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Lettice\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "RESULT",
      ",",
      "bulgarian_commander",
      "FROM",
      "battle",
      "EXCEPT",
      "SELECT",
      "T1.name",
      ",",
      "T1.result",
      ",",
      "T1.bulgarian_commander",
      "FROM",
      "battle",
      "AS",
      "T1",
      "JOIN",
      "ship",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.lost_in_battle",
      "WHERE",
      "T2.location",
      "=",
      "'English",
      "Channel",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "result",
      ",",
      "bulgarian_commander",
      "from",
      "battle",
      "except",
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "result",
      ",",
      "t1",
      ".",
      "bulgarian_commander",
      "from",
      "battle",
      "as",
      "t1",
      "join",
      "ship",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "lost_in_battle",
      "where",
      "t2",
      ".",
      "location",
      "=",
      "value"
    ],
    "question": "Show names , results and bulgarian commanders of the fighting with no ships lost in the ' English Channel ' .",
    "question_toks": [
      "Show",
      "names",
      ",",
      "results",
      "and",
      "bulgarian",
      "commanders",
      "of",
      "the",
      "fighting",
      "with",
      "no",
      "ships",
      "lost",
      "in",
      "the",
      "'",
      "English",
      "Channel",
      "'",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  6,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ],
            "\"English Channel\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "battle_death",
    "query": "SELECT note FROM death WHERE note LIKE '%East%'",
    "query_toks": [
      "SELECT",
      "note",
      "FROM",
      "death",
      "WHERE",
      "note",
      "LIKE",
      "'",
      "%",
      "East",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "note",
      "from",
      "death",
      "where",
      "note",
      "like",
      "value"
    ],
    "question": "What are the notes of the fatal events which has substring ' East ' ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "notes",
      "of",
      "the",
      "fatal",
      "events",
      "which",
      "has",
      "substring",
      "'",
      "East",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              16,
              false
            ],
            null
          ],
          "\"%East%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT line_1 ,  line_2 FROM addresses",
    "query_toks": [
      "SELECT",
      "line_1",
      ",",
      "line_2",
      "FROM",
      "addresses"
    ],
    "query_toks_no_value": [
      "select",
      "line_1",
      ",",
      "line_2",
      "from",
      "addresses"
    ],
    "question": "what are all the addresses including line 1 and to 2 ?",
    "question_toks": [
      "what",
      "are",
      "all",
      "the",
      "addresses",
      "including",
      "line",
      "1",
      "and",
      "to",
      "2",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT line_1 ,  line_2 FROM addresses",
    "query_toks": [
      "SELECT",
      "line_1",
      ",",
      "line_2",
      "FROM",
      "addresses"
    ],
    "query_toks_no_value": [
      "select",
      "line_1",
      ",",
      "line_2",
      "from",
      "addresses"
    ],
    "question": "What is the first and second way for all addresses ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "and",
      "second",
      "way",
      "for",
      "all",
      "addresses",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Courses",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Courses"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "courses"
    ],
    "question": "How many classes in total are listed ?",
    "question_toks": [
      "How",
      "many",
      "classes",
      "in",
      "total",
      "are",
      "listed",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Courses",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Courses"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "courses"
    ],
    "question": "How many classes are there ?",
    "question_toks": [
      "How",
      "many",
      "classes",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "query_toks": [
      "SELECT",
      "course_description",
      "FROM",
      "Courses",
      "WHERE",
      "course_name",
      "=",
      "'math",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "course_description",
      "from",
      "courses",
      "where",
      "course_name",
      "=",
      "value"
    ],
    "question": "How is the math classes outlined ?",
    "question_toks": [
      "How",
      "is",
      "the",
      "math",
      "classes",
      "outlined",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"math\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "query_toks": [
      "SELECT",
      "course_description",
      "FROM",
      "Courses",
      "WHERE",
      "course_name",
      "=",
      "'math",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "course_description",
      "from",
      "courses",
      "where",
      "course_name",
      "=",
      "value"
    ],
    "question": "What are the descriptions for all the math classes ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "descriptions",
      "for",
      "all",
      "the",
      "math",
      "classes",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"math\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "query_toks": [
      "SELECT",
      "zip_postcode",
      "FROM",
      "Addresses",
      "WHERE",
      "city",
      "=",
      "'Port",
      "Chelsea",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "zip_postcode",
      "from",
      "addresses",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "What is the zip code of the address in the town Port Chelsea ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "zip",
      "code",
      "of",
      "the",
      "address",
      "in",
      "the",
      "town",
      "Port",
      "Chelsea",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Port Chelsea\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "query_toks": [
      "SELECT",
      "zip_postcode",
      "FROM",
      "Addresses",
      "WHERE",
      "city",
      "=",
      "'Port",
      "Chelsea",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "zip_postcode",
      "from",
      "addresses",
      "where",
      "city",
      "=",
      "value"
    ],
    "question": "What is the postal code for Port Chelsea ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "postal",
      "code",
      "for",
      "Port",
      "Chelsea",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"Port Chelsea\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.department_name",
      ",",
      "T1.department_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Departments",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "GROUP",
      "BY",
      "T1.department_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "department_name",
      ",",
      "t1",
      ".",
      "department_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "departments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "group",
      "by",
      "t1",
      ".",
      "department_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which department offers the most number of college ? List department name and id .",
    "question_toks": [
      "Which",
      "department",
      "offers",
      "the",
      "most",
      "number",
      "of",
      "college",
      "?",
      "List",
      "department",
      "name",
      "and",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.department_name",
      ",",
      "T1.department_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Departments",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "GROUP",
      "BY",
      "T1.department_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "department_name",
      ",",
      "t1",
      ".",
      "department_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "departments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "group",
      "by",
      "t1",
      ".",
      "department_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "For each department id , what is the name of the departmental with the most number of degrees ?",
    "question_toks": [
      "For",
      "each",
      "department",
      "id",
      ",",
      "what",
      "is",
      "the",
      "name",
      "of",
      "the",
      "departmental",
      "with",
      "the",
      "most",
      "number",
      "of",
      "degrees",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ],
            [
              0,
              14,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "department_id",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "department_id",
      ")",
      "from",
      "degree_programs"
    ],
    "question": "How many departments offer any thing ?",
    "question_toks": [
      "How",
      "many",
      "departments",
      "offer",
      "any",
      "thing",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "department_id",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "department_id",
      ")",
      "from",
      "degree_programs"
    ],
    "question": "How many different departmental offer degrees ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "departmental",
      "offer",
      "degrees",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "degree_summary_name",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "degree_summary_name",
      ")",
      "from",
      "degree_programs"
    ],
    "question": "How many different graduated names are offered ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "graduated",
      "names",
      "are",
      "offered",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                20,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "degree_summary_name",
      ")",
      "FROM",
      "Degree_Programs"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "degree_summary_name",
      ")",
      "from",
      "degree_programs"
    ],
    "question": "How many different graduated are offered ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "graduated",
      "are",
      "offered",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                20,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Departments",
      "AS",
      "T1",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "WHERE",
      "T1.department_name",
      "=",
      "'engineer",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "departments",
      "as",
      "t1",
      "join",
      "degree_programs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "where",
      "t1",
      ".",
      "department_name",
      "=",
      "value"
    ],
    "question": "How many degrees does the engineering dept offer ?",
    "question_toks": [
      "How",
      "many",
      "degrees",
      "does",
      "the",
      "engineering",
      "dept",
      "offer",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"engineer\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Departments",
      "AS",
      "T1",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T2",
      "ON",
      "T1.department_id",
      "=",
      "T2.department_id",
      "WHERE",
      "T1.department_name",
      "=",
      "'engineer",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "departments",
      "as",
      "t1",
      "join",
      "degree_programs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "department_id",
      "=",
      "t2",
      ".",
      "department_id",
      "where",
      "t1",
      ".",
      "department_name",
      "=",
      "value"
    ],
    "question": "How many degrees does the engineering dept have ?",
    "question_toks": [
      "How",
      "many",
      "degrees",
      "does",
      "the",
      "engineering",
      "dept",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ],
            [
              0,
              19,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"engineer\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_name ,  section_description FROM Sections",
    "query_toks": [
      "SELECT",
      "section_name",
      ",",
      "section_description",
      "FROM",
      "Sections"
    ],
    "query_toks_no_value": [
      "select",
      "section_name",
      ",",
      "section_description",
      "from",
      "sections"
    ],
    "question": "What are the names and descriptions of all the parts ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "descriptions",
      "of",
      "all",
      "the",
      "parts",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_name ,  section_description FROM Sections",
    "query_toks": [
      "SELECT",
      "section_name",
      ",",
      "section_description",
      "FROM",
      "Sections"
    ],
    "query_toks_no_value": [
      "select",
      "section_name",
      ",",
      "section_description",
      "from",
      "sections"
    ],
    "question": "What are the names and descriptive for all the sections ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "descriptive",
      "for",
      "all",
      "the",
      "sections",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "query_toks": [
      "SELECT",
      "T1.course_name",
      ",",
      "T1.course_id",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Sections",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "GROUP",
      "BY",
      "T1.course_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "course_name",
      ",",
      "t1",
      ".",
      "course_id",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "sections",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "group",
      "by",
      "t1",
      ".",
      "course_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "=",
      "value"
    ],
    "question": "What are the names and id of classes having at most 2 sections ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "id",
      "of",
      "classes",
      "having",
      "at",
      "most",
      "2",
      "sections",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              24,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          6,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "query_toks": [
      "SELECT",
      "T1.course_name",
      ",",
      "T1.course_id",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Sections",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "GROUP",
      "BY",
      "T1.course_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "<",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "course_name",
      ",",
      "t1",
      ".",
      "course_id",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "sections",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "group",
      "by",
      "t1",
      ".",
      "course_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "<",
      "=",
      "value"
    ],
    "question": "What are the names and ids of every course with less than 2 parts ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "ids",
      "of",
      "every",
      "course",
      "with",
      "less",
      "than",
      "2",
      "parts",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              24,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          6,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "query_toks": [
      "SELECT",
      "section_name",
      "FROM",
      "Sections",
      "ORDER",
      "BY",
      "section_name",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "section_name",
      "from",
      "sections",
      "order",
      "by",
      "section_name",
      "desc"
    ],
    "question": "List the section_name in reversed lexicographical order .",
    "question_toks": [
      "List",
      "the",
      "section_name",
      "in",
      "reversed",
      "lexicographical",
      "order",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "query_toks": [
      "SELECT",
      "section_name",
      "FROM",
      "Sections",
      "ORDER",
      "BY",
      "section_name",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "section_name",
      "from",
      "sections",
      "order",
      "by",
      "section_name",
      "desc"
    ],
    "question": "What are the names of the parts in reverse alphabetical order ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "parts",
      "in",
      "reverse",
      "alphabetical",
      "order",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.semester_name",
      ",",
      "T1.semester_id",
      "FROM",
      "Semesters",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.semester_id",
      "=",
      "T2.semester_id",
      "GROUP",
      "BY",
      "T1.semester_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "semester_name",
      ",",
      "t1",
      ".",
      "semester_id",
      "from",
      "semesters",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "semester_id",
      "=",
      "t2",
      ".",
      "semester_id",
      "group",
      "by",
      "t1",
      ".",
      "semester_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the semester which most student registration in ? Show both the name and the id .",
    "question_toks": [
      "What",
      "is",
      "the",
      "semester",
      "which",
      "most",
      "student",
      "registration",
      "in",
      "?",
      "Show",
      "both",
      "the",
      "name",
      "and",
      "the",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          28,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.semester_name",
      ",",
      "T1.semester_id",
      "FROM",
      "Semesters",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.semester_id",
      "=",
      "T2.semester_id",
      "GROUP",
      "BY",
      "T1.semester_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "semester_name",
      ",",
      "t1",
      ".",
      "semester_id",
      "from",
      "semesters",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "semester_id",
      "=",
      "t2",
      ".",
      "semester_id",
      "group",
      "by",
      "t1",
      ".",
      "semester_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "For each college , what is the name and id of the one with the most students registered ?",
    "question_toks": [
      "For",
      "each",
      "college",
      ",",
      "what",
      "is",
      "the",
      "name",
      "and",
      "id",
      "of",
      "the",
      "one",
      "with",
      "the",
      "most",
      "students",
      "registered",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          28,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                28,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "query_toks": [
      "SELECT",
      "department_description",
      "FROM",
      "Departments",
      "WHERE",
      "department_name",
      "LIKE",
      "'",
      "%",
      "computer",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "department_description",
      "from",
      "departments",
      "where",
      "department_name",
      "like",
      "value"
    ],
    "question": "What is the description of the ministry whose name has the substring the computer ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "description",
      "of",
      "the",
      "ministry",
      "whose",
      "name",
      "has",
      "the",
      "substring",
      "the",
      "computer",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%computer%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "query_toks": [
      "SELECT",
      "department_description",
      "FROM",
      "Departments",
      "WHERE",
      "department_name",
      "LIKE",
      "'",
      "%",
      "computer",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "department_description",
      "from",
      "departments",
      "where",
      "department_name",
      "like",
      "value"
    ],
    "question": "What is the departmental description for the one whose name has the word computer ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "departmental",
      "description",
      "for",
      "the",
      "one",
      "whose",
      "name",
      "has",
      "the",
      "word",
      "computer",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%computer%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      ",",
      "T1.student_id",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t1",
      ".",
      "student_id",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "value"
    ],
    "question": "Who are enrolled in 2 degree programs in one semester ? List the first name , middle name and surname name and the id .",
    "question_toks": [
      "Who",
      "are",
      "enrolled",
      "in",
      "2",
      "degree",
      "programs",
      "in",
      "one",
      "semester",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      "and",
      "surname",
      "name",
      "and",
      "the",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          32,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      ",",
      "T1.student_id",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t1",
      ".",
      "student_id",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "value"
    ],
    "question": "What are the first , middle , and last names , along with the ids , of all people who enrolled in 2 degree programs in one semester ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "names",
      ",",
      "along",
      "with",
      "the",
      "ids",
      ",",
      "of",
      "all",
      "people",
      "who",
      "enrolled",
      "in",
      "2",
      "degree",
      "programs",
      "in",
      "one",
      "semester",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          32,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T3",
      "ON",
      "T2.degree_program_id",
      "=",
      "T3.degree_program_id",
      "WHERE",
      "T3.degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "join",
      "degree_programs",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "degree_program_id",
      "=",
      "t3",
      ".",
      "degree_program_id",
      "where",
      "t3",
      ".",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question": "Who is entered in a Bachelor degree program ? List the first name , middle name , last name .",
    "question_toks": [
      "Who",
      "is",
      "entered",
      "in",
      "a",
      "Bachelor",
      "degree",
      "program",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "middle",
      "name",
      ",",
      "last",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Bachelor\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "JOIN",
      "Degree_Programs",
      "AS",
      "T3",
      "ON",
      "T2.degree_program_id",
      "=",
      "T3.degree_program_id",
      "WHERE",
      "T3.degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "join",
      "degree_programs",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "degree_program_id",
      "=",
      "t3",
      ".",
      "degree_program_id",
      "where",
      "t3",
      ".",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question": "What are the initial , middle , and last names for everybody enrolled in a Bachelors program ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "initial",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "names",
      "for",
      "everybody",
      "enrolled",
      "in",
      "a",
      "Bachelors",
      "program",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Bachelor\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.degree_summary_name",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "GROUP",
      "BY",
      "T1.degree_summary_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "group",
      "by",
      "t1",
      ".",
      "degree_summary_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the kind of programme which most number of students are enrolled in ?",
    "question_toks": [
      "Find",
      "the",
      "kind",
      "of",
      "programme",
      "which",
      "most",
      "number",
      "of",
      "students",
      "are",
      "enrolled",
      "in",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          20,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.degree_summary_name",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "GROUP",
      "BY",
      "T1.degree_summary_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "group",
      "by",
      "t1",
      ".",
      "degree_summary_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the degree set name that has the most number of students enrolled ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "degree",
      "set",
      "name",
      "that",
      "has",
      "the",
      "most",
      "number",
      "of",
      "students",
      "enrolled",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          20,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.degree_program_id",
      ",",
      "T1.degree_summary_name",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "GROUP",
      "BY",
      "T1.degree_program_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "degree_program_id",
      ",",
      "t1",
      ".",
      "degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "group",
      "by",
      "t1",
      ".",
      "degree_program_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the program which most number of learners are enrolled in . List both the id and the summary .",
    "question_toks": [
      "Find",
      "the",
      "program",
      "which",
      "most",
      "number",
      "of",
      "learners",
      "are",
      "enrolled",
      "in",
      ".",
      "List",
      "both",
      "the",
      "id",
      "and",
      "the",
      "summary",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.degree_program_id",
      ",",
      "T1.degree_summary_name",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "GROUP",
      "BY",
      "T1.degree_program_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "degree_program_id",
      ",",
      "t1",
      ".",
      "degree_summary_name",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "group",
      "by",
      "t1",
      ".",
      "degree_program_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the program id and the summary of the degree that has the most graduates enrolled ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "program",
      "id",
      "and",
      "the",
      "summary",
      "of",
      "the",
      "degree",
      "that",
      "has",
      "the",
      "most",
      "graduates",
      "enrolled",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          18,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.student_id",
      ",",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      ",",
      "T1.student_id",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "student_id",
      ",",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t1",
      ".",
      "student_id",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which student has enrolled for the most times in any program ? List the id , one name , middle name , last name , the number of enrollments and student id .",
    "question_toks": [
      "Which",
      "student",
      "has",
      "enrolled",
      "for",
      "the",
      "most",
      "times",
      "in",
      "any",
      "program",
      "?",
      "List",
      "the",
      "id",
      ",",
      "one",
      "name",
      ",",
      "middle",
      "name",
      ",",
      "last",
      "name",
      ",",
      "the",
      "number",
      "of",
      "enrollments",
      "and",
      "student",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          32,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.student_id",
      ",",
      "T1.first_name",
      ",",
      "T1.middle_name",
      ",",
      "T1.last_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      ",",
      "T1.student_id",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.student_id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "student_id",
      ",",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "middle_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "count",
      "(",
      "*",
      ")",
      ",",
      "t1",
      ".",
      "student_id",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "student_id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the first , middle , and last name , along with the id and number of enrollments , for the pupil who enrolled the most in any program ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "last",
      "name",
      ",",
      "along",
      "with",
      "the",
      "id",
      "and",
      "number",
      "of",
      "enrollments",
      ",",
      "for",
      "the",
      "pupil",
      "who",
      "enrolled",
      "the",
      "most",
      "in",
      "any",
      "program",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          32,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "query_toks": [
      "SELECT",
      "semester_name",
      "FROM",
      "Semesters",
      "WHERE",
      "semester_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "semester_id",
      "FROM",
      "Student_Enrolment",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "semester_name",
      "from",
      "semesters",
      "where",
      "semester_id",
      "not",
      "in",
      "(",
      "select",
      "semester_id",
      "from",
      "student_enrolment",
      ")"
    ],
    "question": "Which semesters do not have any student enrolled ? List the full name .",
    "question_toks": [
      "Which",
      "semesters",
      "do",
      "not",
      "have",
      "any",
      "student",
      "enrolled",
      "?",
      "List",
      "the",
      "full",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "query_toks": [
      "SELECT",
      "semester_name",
      "FROM",
      "Semesters",
      "WHERE",
      "semester_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "semester_id",
      "FROM",
      "Student_Enrolment",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "semester_name",
      "from",
      "semesters",
      "where",
      "semester_id",
      "not",
      "in",
      "(",
      "select",
      "semester_id",
      "from",
      "student_enrolment",
      ")"
    ],
    "question": "What is the name of the semester with no graduates enrolled ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "semester",
      "with",
      "no",
      "graduates",
      "enrolled",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              28,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.course_name",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment_Courses",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id"
    ],
    "question": "What are all the classes names of the courses which ever have students enrolled in ?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "classes",
      "names",
      "of",
      "the",
      "courses",
      "which",
      "ever",
      "have",
      "students",
      "enrolled",
      "in",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.course_name",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment_Courses",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id"
    ],
    "question": "What are the names of all courses that have some people enrolled ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "courses",
      "that",
      "have",
      "some",
      "people",
      "enrolled",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.course_name",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment_Courses",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "GROUP",
      "BY",
      "T1.course_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "group",
      "by",
      "t1",
      ".",
      "course_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What 's the name of the class with most number of enrollments ?",
    "question_toks": [
      "What",
      "'s",
      "the",
      "name",
      "of",
      "the",
      "class",
      "with",
      "most",
      "number",
      "of",
      "enrollments",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.course_name",
      "FROM",
      "Courses",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment_Courses",
      "AS",
      "T2",
      "ON",
      "T1.course_id",
      "=",
      "T2.course_id",
      "GROUP",
      "BY",
      "T1.course_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "course_name",
      "from",
      "courses",
      "as",
      "t1",
      "join",
      "student_enrolment_courses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "course_id",
      "=",
      "t2",
      ".",
      "course_id",
      "group",
      "by",
      "t1",
      ".",
      "course_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the level with the most students enrolled ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "level",
      "with",
      "the",
      "most",
      "students",
      "enrolled",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              50,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            8
          ]
        ]
      },
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "query_toks": [
      "SELECT",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Addresses",
      "AS",
      "T2",
      "ON",
      "T1.current_address_id",
      "=",
      "T2.address_id",
      "WHERE",
      "T2.state_province_county",
      "=",
      "'NorthCarolina",
      "'",
      "EXCEPT",
      "SELECT",
      "DISTINCT",
      "T3.last_name",
      "FROM",
      "Students",
      "AS",
      "T3",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T4",
      "ON",
      "T3.student_id",
      "=",
      "T4.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "current_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "state_province_county",
      "=",
      "value",
      "except",
      "select",
      "distinct",
      "t3",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t3",
      "join",
      "student_enrolment",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "student_id",
      "=",
      "t4",
      ".",
      "student_id"
    ],
    "question": "Find the last name of the people who currently live in the state of North Carolina but have not registered in any degree program .",
    "question_toks": [
      "Find",
      "the",
      "last",
      "name",
      "of",
      "the",
      "people",
      "who",
      "currently",
      "live",
      "in",
      "the",
      "state",
      "of",
      "North",
      "Carolina",
      "but",
      "have",
      "not",
      "registered",
      "in",
      "any",
      "degree",
      "program",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  32,
                  false
                ],
                null
              ],
              [
                0,
                47,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  37,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NorthCarolina\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "query_toks": [
      "SELECT",
      "T1.last_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Addresses",
      "AS",
      "T2",
      "ON",
      "T1.current_address_id",
      "=",
      "T2.address_id",
      "WHERE",
      "T2.state_province_county",
      "=",
      "'NorthCarolina",
      "'",
      "EXCEPT",
      "SELECT",
      "DISTINCT",
      "T3.last_name",
      "FROM",
      "Students",
      "AS",
      "T3",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T4",
      "ON",
      "T3.student_id",
      "=",
      "T4.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "current_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "state_province_county",
      "=",
      "value",
      "except",
      "select",
      "distinct",
      "t3",
      ".",
      "last_name",
      "from",
      "students",
      "as",
      "t3",
      "join",
      "student_enrolment",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "student_id",
      "=",
      "t4",
      ".",
      "student_id"
    ],
    "question": "What are the last name of the students who live in North Carolina but have not registered in any graduate programs ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "last",
      "name",
      "of",
      "the",
      "students",
      "who",
      "live",
      "in",
      "North",
      "Carolina",
      "but",
      "have",
      "not",
      "registered",
      "in",
      "any",
      "graduate",
      "programs",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  32,
                  false
                ],
                null
              ],
              [
                0,
                47,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  37,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NorthCarolina\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.transcript_date",
      ",",
      "T1.transcript_id",
      "FROM",
      "Transcript_Contents",
      "AS",
      "T1",
      "JOIN",
      "Transcripts",
      "AS",
      "T2",
      "ON",
      "T1.transcript_id",
      "=",
      "T2.transcript_id",
      "GROUP",
      "BY",
      "T1.transcript_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "transcript_date",
      ",",
      "t1",
      ".",
      "transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "transcript_id",
      "=",
      "t2",
      ".",
      "transcript_id",
      "group",
      "by",
      "t1",
      ".",
      "transcript_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show the date and id of the transcript with at least 2 level results .",
    "question_toks": [
      "Show",
      "the",
      "date",
      "and",
      "id",
      "of",
      "the",
      "transcript",
      "with",
      "at",
      "least",
      "2",
      "level",
      "results",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.transcript_date",
      ",",
      "T1.transcript_id",
      "FROM",
      "Transcript_Contents",
      "AS",
      "T1",
      "JOIN",
      "Transcripts",
      "AS",
      "T2",
      "ON",
      "T1.transcript_id",
      "=",
      "T2.transcript_id",
      "GROUP",
      "BY",
      "T1.transcript_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "transcript_date",
      ",",
      "t1",
      ".",
      "transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "transcript_id",
      "=",
      "t2",
      ".",
      "transcript_id",
      "group",
      "by",
      "t1",
      ".",
      "transcript_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What is the day and id of the transcript with at least 2 courses listed ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "day",
      "and",
      "id",
      "of",
      "the",
      "transcript",
      "with",
      "at",
      "least",
      "2",
      "courses",
      "listed",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "query_toks": [
      "SELECT",
      "cell_mobile_number",
      "FROM",
      "Students",
      "WHERE",
      "first_name",
      "=",
      "'Timmothy",
      "'",
      "AND",
      "last_name",
      "=",
      "'Ward",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "cell_mobile_number",
      "from",
      "students",
      "where",
      "first_name",
      "=",
      "value",
      "and",
      "last_name",
      "=",
      "value"
    ],
    "question": "What is the phone number of the man with the full name Timmothy and the last name Ward ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "phone",
      "number",
      "of",
      "the",
      "man",
      "with",
      "the",
      "full",
      "name",
      "Timmothy",
      "and",
      "the",
      "last",
      "name",
      "Ward",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"Timmothy\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"Ward\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "query_toks": [
      "SELECT",
      "cell_mobile_number",
      "FROM",
      "Students",
      "WHERE",
      "first_name",
      "=",
      "'Timmothy",
      "'",
      "AND",
      "last_name",
      "=",
      "'Ward",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "cell_mobile_number",
      "from",
      "students",
      "where",
      "first_name",
      "=",
      "value",
      "and",
      "last_name",
      "=",
      "value"
    ],
    "question": "What is the mobile phone number of the school named Timothy Ward ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "mobile",
      "phone",
      "number",
      "of",
      "the",
      "school",
      "named",
      "Timothy",
      "Ward",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              35,
              false
            ],
            null
          ],
          "\"Timmothy\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"Ward\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_first_registered",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_first_registered",
      "asc",
      "limit",
      "value"
    ],
    "question": "Who is the first student to register ? List the first name , second name and last name .",
    "question_toks": [
      "Who",
      "is",
      "the",
      "first",
      "student",
      "to",
      "register",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "second",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_first_registered",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_first_registered",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the first , middle , and second name of the first student to register ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "second",
      "name",
      "of",
      "the",
      "first",
      "student",
      "to",
      "register",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              41,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_left",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_left",
      "asc",
      "limit",
      "value"
    ],
    "question": "Who is the earliest graduate of the school ? List the first name , only name and last name .",
    "question_toks": [
      "Who",
      "is",
      "the",
      "earliest",
      "graduate",
      "of",
      "the",
      "school",
      "?",
      "List",
      "the",
      "first",
      "name",
      ",",
      "only",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "date_left",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "middle_name",
      ",",
      "last_name",
      "from",
      "students",
      "order",
      "by",
      "date_left",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the first , middle , and only name of the earliest school graduate ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      ",",
      "middle",
      ",",
      "and",
      "only",
      "name",
      "of",
      "the",
      "earliest",
      "school",
      "graduate",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              42,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "query_toks": [
      "SELECT",
      "first_name",
      "FROM",
      "Students",
      "WHERE",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "question": "Whose permanent address is different from his or her current address ? List his or her only name .",
    "question_toks": [
      "Whose",
      "permanent",
      "address",
      "is",
      "different",
      "from",
      "his",
      "or",
      "her",
      "current",
      "address",
      "?",
      "List",
      "his",
      "or",
      "her",
      "only",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          [
            0,
            34,
            false
          ],
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "query_toks": [
      "SELECT",
      "first_name",
      "FROM",
      "Students",
      "WHERE",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "current_address_id",
      "!",
      "=",
      "permanent_address_id"
    ],
    "question": "What is the first name of the student whose permanent one is different from his or her current one ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "first",
      "name",
      "of",
      "the",
      "student",
      "whose",
      "permanent",
      "one",
      "is",
      "different",
      "from",
      "his",
      "or",
      "her",
      "current",
      "one",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          [
            0,
            34,
            false
          ],
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.address_id",
      ",",
      "T1.line_1",
      ",",
      "T1.line_2",
      "FROM",
      "Addresses",
      "AS",
      "T1",
      "JOIN",
      "Students",
      "AS",
      "T2",
      "ON",
      "T1.address_id",
      "=",
      "T2.current_address_id",
      "GROUP",
      "BY",
      "T1.address_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "address_id",
      ",",
      "t1",
      ".",
      "line_1",
      ",",
      "t1",
      ".",
      "line_2",
      "from",
      "addresses",
      "as",
      "t1",
      "join",
      "students",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "address_id",
      "=",
      "t2",
      ".",
      "current_address_id",
      "group",
      "by",
      "t1",
      ".",
      "address_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which address holds the most number of schools currently ? List the address id and all lines .",
    "question_toks": [
      "Which",
      "address",
      "holds",
      "the",
      "most",
      "number",
      "of",
      "schools",
      "currently",
      "?",
      "List",
      "the",
      "address",
      "id",
      "and",
      "all",
      "lines",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.address_id",
      ",",
      "T1.line_1",
      ",",
      "T1.line_2",
      "FROM",
      "Addresses",
      "AS",
      "T1",
      "JOIN",
      "Students",
      "AS",
      "T2",
      "ON",
      "T1.address_id",
      "=",
      "T2.current_address_id",
      "GROUP",
      "BY",
      "T1.address_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "address_id",
      ",",
      "t1",
      ".",
      "line_1",
      ",",
      "t1",
      ".",
      "line_2",
      "from",
      "addresses",
      "as",
      "t1",
      "join",
      "students",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "address_id",
      "=",
      "t2",
      ".",
      "current_address_id",
      "group",
      "by",
      "t1",
      ".",
      "address_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the id , side 1 , and line 2 of the address with the most students ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "id",
      ",",
      "side",
      "1",
      ",",
      "and",
      "line",
      "2",
      "of",
      "the",
      "address",
      "with",
      "the",
      "most",
      "students",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT avg(transcript_date) FROM Transcripts",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "transcript_date",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "transcript_date",
      ")",
      "from",
      "transcripts"
    ],
    "question": "On average , when were the transcripts printed ?",
    "question_toks": [
      "On",
      "average",
      ",",
      "when",
      "were",
      "the",
      "transcripts",
      "printed",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT avg(transcript_date) FROM Transcripts",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "transcript_date",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "transcript_date",
      ")",
      "from",
      "transcripts"
    ],
    "question": "What is the average transcript time ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "transcript",
      "time",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "transcript_date",
      ",",
      "other_details",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "transcript_date",
      ",",
      "other_details",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "asc",
      "limit",
      "value"
    ],
    "question": "When is the first transcript released ? List the day and details .",
    "question_toks": [
      "When",
      "is",
      "the",
      "first",
      "transcript",
      "released",
      "?",
      "List",
      "the",
      "day",
      "and",
      "details",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                54,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "transcript_date",
      ",",
      "other_details",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "transcript_date",
      ",",
      "other_details",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the earliest time of a transcript release , and what details can you tell me ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "earliest",
      "time",
      "of",
      "a",
      "transcript",
      "release",
      ",",
      "and",
      "what",
      "details",
      "can",
      "you",
      "tell",
      "me",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                54,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Transcripts",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "transcripts"
    ],
    "question": "How many transcripts are released ?",
    "question_toks": [
      "How",
      "many",
      "transcripts",
      "are",
      "released",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) FROM Transcripts",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Transcripts"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "transcripts"
    ],
    "question": "How many transcripts are listed ?",
    "question_toks": [
      "How",
      "many",
      "transcripts",
      "are",
      "listed",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "transcript_date",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "transcript_date",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the last early release date ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "last",
      "early",
      "release",
      "date",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "transcript_date",
      "FROM",
      "Transcripts",
      "ORDER",
      "BY",
      "transcript_date",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "transcript_date",
      "from",
      "transcripts",
      "order",
      "by",
      "transcript_date",
      "desc",
      "limit",
      "value"
    ],
    "question": "When was the last transcription released ?",
    "question_toks": [
      "When",
      "was",
      "the",
      "last",
      "transcription",
      "released",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              53,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "student_course_id",
      "FROM",
      "Transcript_Contents",
      "GROUP",
      "BY",
      "student_course_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "student_course_id",
      "from",
      "transcript_contents",
      "group",
      "by",
      "student_course_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "How many times at most can a course enrollment result show in different transcripts ? Also show the real enrollment id .",
    "question_toks": [
      "How",
      "many",
      "times",
      "at",
      "most",
      "can",
      "a",
      "course",
      "enrollment",
      "result",
      "show",
      "in",
      "different",
      "transcripts",
      "?",
      "Also",
      "show",
      "the",
      "real",
      "enrollment",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            10
          ]
        ]
      },
      "groupBy": [
        [
          0,
          55,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                55,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "student_course_id",
      "FROM",
      "Transcript_Contents",
      "GROUP",
      "BY",
      "student_course_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "student_course_id",
      "from",
      "transcript_contents",
      "group",
      "by",
      "student_course_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course 's enroll id ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "number",
      "of",
      "times",
      "that",
      "a",
      "course",
      "shows",
      "up",
      "in",
      "different",
      "transcripts",
      "and",
      "what",
      "is",
      "that",
      "course",
      "'s",
      "enroll",
      "id",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            10
          ]
        ]
      },
      "groupBy": [
        [
          0,
          55,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                55,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.transcript_date",
      ",",
      "T1.transcript_id",
      "FROM",
      "Transcript_Contents",
      "AS",
      "T1",
      "JOIN",
      "Transcripts",
      "AS",
      "T2",
      "ON",
      "T1.transcript_id",
      "=",
      "T2.transcript_id",
      "GROUP",
      "BY",
      "T1.transcript_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "transcript_date",
      ",",
      "t1",
      ".",
      "transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "transcript_id",
      "=",
      "t2",
      ".",
      "transcript_id",
      "group",
      "by",
      "t1",
      ".",
      "transcript_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "Show the date of the transcription which shows the least number of results , also list the id .",
    "question_toks": [
      "Show",
      "the",
      "date",
      "of",
      "the",
      "transcription",
      "which",
      "shows",
      "the",
      "least",
      "number",
      "of",
      "results",
      ",",
      "also",
      "list",
      "the",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.transcript_date",
      ",",
      "T1.transcript_id",
      "FROM",
      "Transcript_Contents",
      "AS",
      "T1",
      "JOIN",
      "Transcripts",
      "AS",
      "T2",
      "ON",
      "T1.transcript_id",
      "=",
      "T2.transcript_id",
      "GROUP",
      "BY",
      "T1.transcript_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "transcript_date",
      ",",
      "t1",
      ".",
      "transcript_id",
      "from",
      "transcript_contents",
      "as",
      "t1",
      "join",
      "transcripts",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "transcript_id",
      "=",
      "t2",
      ".",
      "transcript_id",
      "group",
      "by",
      "t1",
      ".",
      "transcript_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the date and id of the brief with the least number of results ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "date",
      "and",
      "id",
      "of",
      "the",
      "brief",
      "with",
      "the",
      "least",
      "number",
      "of",
      "results",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ],
            [
              0,
              52,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            10
          ],
          [
            "table_unit",
            9
          ]
        ]
      },
      "groupBy": [
        [
          0,
          56,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                53,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                56,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Master",
      "'",
      "INTERSECT",
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value",
      "intersect",
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question": "Find the semester when both Master people and Bachelor students got enrolled in .",
    "question_toks": [
      "Find",
      "the",
      "semester",
      "when",
      "both",
      "Master",
      "people",
      "and",
      "Bachelor",
      "students",
      "got",
      "enrolled",
      "in",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  46,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            "\"Bachelor\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Master\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Master",
      "'",
      "INTERSECT",
      "SELECT",
      "DISTINCT",
      "T2.semester_id",
      "FROM",
      "Degree_Programs",
      "AS",
      "T1",
      "JOIN",
      "Student_Enrolment",
      "AS",
      "T2",
      "ON",
      "T1.degree_program_id",
      "=",
      "T2.degree_program_id",
      "WHERE",
      "degree_summary_name",
      "=",
      "'Bachelor",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value",
      "intersect",
      "select",
      "distinct",
      "t2",
      ".",
      "semester_id",
      "from",
      "degree_programs",
      "as",
      "t1",
      "join",
      "student_enrolment",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "degree_program_id",
      "=",
      "t2",
      ".",
      "degree_program_id",
      "where",
      "degree_summary_name",
      "=",
      "value"
    ],
    "question": "What is the id of the college that had both Masters and Bachelors students enrolled ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "id",
      "of",
      "the",
      "college",
      "that",
      "had",
      "both",
      "Masters",
      "and",
      "Bachelors",
      "students",
      "enrolled",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  18,
                  false
                ],
                null
              ],
              [
                0,
                45,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              3
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          true,
          [
            [
              0,
              [
                0,
                [
                  0,
                  46,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            "\"Bachelor\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Master\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT current_address_id) FROM Students",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "current_address_id",
      ")",
      "FROM",
      "Students"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "current_address_id",
      ")",
      "from",
      "students"
    ],
    "question": "How many different addressing do the students currently live ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "addressing",
      "do",
      "the",
      "students",
      "currently",
      "live",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                33,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT count(DISTINCT current_address_id) FROM Students",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "current_address_id",
      ")",
      "FROM",
      "Students"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "current_address_id",
      ")",
      "from",
      "students"
    ],
    "question": "What are the different addresses that have university living there ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "addresses",
      "that",
      "have",
      "university",
      "living",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                33,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "query_toks": [
      "SELECT",
      "other_student_details",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "other_student_details",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "other_student_details",
      "from",
      "students",
      "order",
      "by",
      "other_student_details",
      "desc"
    ],
    "question": "List all the student info in reversed lexicographical order .",
    "question_toks": [
      "List",
      "all",
      "the",
      "student",
      "info",
      "in",
      "reversed",
      "lexicographical",
      "order",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "query_toks": [
      "SELECT",
      "other_student_details",
      "FROM",
      "Students",
      "ORDER",
      "BY",
      "other_student_details",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "other_student_details",
      "from",
      "students",
      "order",
      "by",
      "other_student_details",
      "desc"
    ],
    "question": "What other details can you tell me about studying in reverse alphabetical order ?",
    "question_toks": [
      "What",
      "other",
      "details",
      "can",
      "you",
      "tell",
      "me",
      "about",
      "studying",
      "in",
      "reverse",
      "alphabetical",
      "order",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              43,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "query_toks": [
      "SELECT",
      "section_description",
      "FROM",
      "Sections",
      "WHERE",
      "section_name",
      "=",
      "'h",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "section_description",
      "from",
      "sections",
      "where",
      "section_name",
      "=",
      "value"
    ],
    "question": "Describe the part h.",
    "question_toks": [
      "Describe",
      "the",
      "part",
      "h."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"h\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "query_toks": [
      "SELECT",
      "section_description",
      "FROM",
      "Sections",
      "WHERE",
      "section_name",
      "=",
      "'h",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "section_description",
      "from",
      "sections",
      "where",
      "section_name",
      "=",
      "value"
    ],
    "question": "What is the designation for the section named h ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "designation",
      "for",
      "the",
      "section",
      "named",
      "h",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"h\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Addresses",
      "AS",
      "T2",
      "ON",
      "T1.permanent_address_id",
      "=",
      "T2.address_id",
      "WHERE",
      "T2.country",
      "=",
      "'Haiti",
      "'",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Students",
      "WHERE",
      "cell_mobile_number",
      "=",
      "'09700166582",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "permanent_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "country",
      "=",
      "value",
      "union",
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "cell_mobile_number",
      "=",
      "value"
    ],
    "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone digit 09700166582 .",
    "question_toks": [
      "Find",
      "the",
      "first",
      "name",
      "of",
      "the",
      "students",
      "who",
      "permanently",
      "live",
      "in",
      "the",
      "country",
      "Haiti",
      "or",
      "have",
      "the",
      "cell",
      "phone",
      "digit",
      "09700166582",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              6
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  35,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            "\"09700166582\"",
            null
          ]
        ]
      },
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Haiti\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      "FROM",
      "Students",
      "AS",
      "T1",
      "JOIN",
      "Addresses",
      "AS",
      "T2",
      "ON",
      "T1.permanent_address_id",
      "=",
      "T2.address_id",
      "WHERE",
      "T2.country",
      "=",
      "'Haiti",
      "'",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Students",
      "WHERE",
      "cell_mobile_number",
      "=",
      "'09700166582",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      "from",
      "students",
      "as",
      "t1",
      "join",
      "addresses",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "permanent_address_id",
      "=",
      "t2",
      ".",
      "address_id",
      "where",
      "t2",
      ".",
      "country",
      "=",
      "value",
      "union",
      "select",
      "first_name",
      "from",
      "students",
      "where",
      "cell_mobile_number",
      "=",
      "value"
    ],
    "question": "What are the one names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "one",
      "names",
      "of",
      "the",
      "students",
      "who",
      "live",
      "in",
      "Haiti",
      "permanently",
      "or",
      "have",
      "the",
      "cell",
      "phone",
      "number",
      "09700166582",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              6
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  35,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ],
            "\"09700166582\"",
            null
          ]
        ]
      },
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Haiti\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon ORDER BY title",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "title"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "order",
      "by",
      "title"
    ],
    "question": "List the top of all cartoons in alphabetical order .",
    "question_toks": [
      "List",
      "the",
      "top",
      "of",
      "all",
      "cartoons",
      "in",
      "alphabetical",
      "order",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon ORDER BY title",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "title"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "order",
      "by",
      "title"
    ],
    "question": "What are the lines of the cartoons sorted alphabetically ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "lines",
      "of",
      "the",
      "cartoons",
      "sorted",
      "alphabetically",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question": "List all comic directed by \" Ben Jones \" .",
    "question_toks": [
      "List",
      "all",
      "comic",
      "directed",
      "by",
      "\"",
      "Ben",
      "Jones",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question": "What are the names of all cartoons films by Ben Jones ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "cartoons",
      "films",
      "by",
      "Ben",
      "Jones",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Cartoon",
      "WHERE",
      "Written_by",
      "=",
      "``",
      "Joseph",
      "Kuhr",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cartoon",
      "where",
      "written_by",
      "=",
      "value"
    ],
    "question": "How many adventures were written by \" Joseph Kuhr \" ?",
    "question_toks": [
      "How",
      "many",
      "adventures",
      "were",
      "written",
      "by",
      "\"",
      "Joseph",
      "Kuhr",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Joseph Kuhr\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Cartoon",
      "WHERE",
      "Written_by",
      "=",
      "``",
      "Joseph",
      "Kuhr",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "cartoon",
      "where",
      "written_by",
      "=",
      "value"
    ],
    "question": "What is the number of cartoones authored by Joseph Kuhr ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "cartoones",
      "authored",
      "by",
      "Joseph",
      "Kuhr",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Joseph Kuhr\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "query_toks": [
      "SELECT",
      "title",
      ",",
      "Directed_by",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "Original_air_date"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date"
    ],
    "question": "list all comic titles and their director ordered by their air date",
    "question_toks": [
      "list",
      "all",
      "comic",
      "titles",
      "and",
      "their",
      "director",
      "ordered",
      "by",
      "their",
      "air",
      "date"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "query_toks": [
      "SELECT",
      "title",
      ",",
      "Directed_by",
      "FROM",
      "Cartoon",
      "ORDER",
      "BY",
      "Original_air_date"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date"
    ],
    "question": "What is the name and directors of all the cartoons that are ordered by show date ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "and",
      "directors",
      "of",
      "all",
      "the",
      "cartoons",
      "that",
      "are",
      "ordered",
      "by",
      "show",
      "date",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      "OR",
      "Directed_by",
      "=",
      "``",
      "Brandon",
      "Vietti",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value",
      "or",
      "directed_by",
      "=",
      "value"
    ],
    "question": "List the title of all cartoon directing by \" Ben Jones \" or \" Brandon Vietti \" .",
    "question_toks": [
      "List",
      "the",
      "title",
      "of",
      "all",
      "cartoon",
      "directing",
      "by",
      "\"",
      "Ben",
      "Jones",
      "\"",
      "or",
      "\"",
      "Brandon",
      "Vietti",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Brandon Vietti\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "query_toks": [
      "SELECT",
      "Title",
      "FROM",
      "Cartoon",
      "WHERE",
      "Directed_by",
      "=",
      "``",
      "Ben",
      "Jones",
      "''",
      "OR",
      "Directed_by",
      "=",
      "``",
      "Brandon",
      "Vietti",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "title",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value",
      "or",
      "directed_by",
      "=",
      "value"
    ],
    "question": "What are the designations of all cartoons directed by Ben Jones or Brandon Vietti ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "designations",
      "of",
      "all",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "or",
      "Brandon",
      "Vietti",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Ben Jones\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Brandon Vietti\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which country has the most of TV Channels ? List the way and number of TV Channels it has .",
    "question_toks": [
      "Which",
      "country",
      "has",
      "the",
      "most",
      "of",
      "TV",
      "Channels",
      "?",
      "List",
      "the",
      "way",
      "and",
      "number",
      "of",
      "TV",
      "Channels",
      "it",
      "has",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "Country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "Country",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the place with the most number of TV Channels and how many does it have ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "place",
      "with",
      "the",
      "most",
      "number",
      "of",
      "TV",
      "Channels",
      "and",
      "how",
      "many",
      "does",
      "it",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "DISTINCT",
      "content",
      ")",
      "FROM",
      "TV_Channel",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "distinct",
      "content",
      ")",
      "from",
      "tv_channel"
    ],
    "question": "List the number of different past names and contents in the TV Channel table .",
    "question_toks": [
      "List",
      "the",
      "number",
      "of",
      "different",
      "past",
      "names",
      "and",
      "contents",
      "in",
      "the",
      "TV",
      "Channel",
      "table",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "DISTINCT",
      "content",
      ")",
      "FROM",
      "TV_Channel",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "series_name",
      ")",
      ",",
      "count",
      "(",
      "distinct",
      "content",
      ")",
      "from",
      "tv_channel"
    ],
    "question": "How many different series and items are listed in the TV Channel table ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "series",
      "and",
      "items",
      "are",
      "listed",
      "in",
      "the",
      "TV",
      "Channel",
      "table",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                2,
                true
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                5,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "Content",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "content",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question": "What is the thing of TV Channel with serial name \" Sky Radio \" ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "thing",
      "of",
      "TV",
      "Channel",
      "with",
      "serial",
      "name",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "Content",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "content",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question": "What is the content of the show Sky Radio ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "content",
      "of",
      "the",
      "show",
      "Sky",
      "Radio",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "Package_Option",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question": "What is the Package Option of TV Channel with serial name \" Sky Radio \" ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "Package",
      "Option",
      "of",
      "TV",
      "Channel",
      "with",
      "serial",
      "name",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "Package_Option",
      "FROM",
      "TV_Channel",
      "WHERE",
      "series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "series_name",
      "=",
      "value"
    ],
    "question": "What are the Package Options of the TV Channels whose ch names are Sky Radio ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "Package",
      "Options",
      "of",
      "the",
      "TV",
      "Channels",
      "whose",
      "ch",
      "names",
      "are",
      "Sky",
      "Radio",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "How many TV Channel using english English ?",
    "question_toks": [
      "How",
      "many",
      "TV",
      "Channel",
      "using",
      "english",
      "English",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "How many TV Channels use the English english ?",
    "question_toks": [
      "How",
      "many",
      "TV",
      "Channels",
      "use",
      "the",
      "English",
      "english",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "LANGUAGE",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "List the language used least number of TV Channel . List linguistic and number of TV Channel .",
    "question_toks": [
      "List",
      "the",
      "language",
      "used",
      "least",
      "number",
      "of",
      "TV",
      "Channel",
      ".",
      "List",
      "linguistic",
      "and",
      "number",
      "of",
      "TV",
      "Channel",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "LANGUAGE",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "What are the spoken used by the least number of TV Channels and how many channels use it ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "spoken",
      "used",
      "by",
      "the",
      "least",
      "number",
      "of",
      "TV",
      "Channels",
      "and",
      "how",
      "many",
      "channels",
      "use",
      "it",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "LANGUAGE"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language"
    ],
    "question": "List each linguistic and the number of TV Channels using it .",
    "question_toks": [
      "List",
      "each",
      "linguistic",
      "and",
      "the",
      "number",
      "of",
      "TV",
      "Channels",
      "using",
      "it",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "TV_Channel",
      "GROUP",
      "BY",
      "LANGUAGE"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "tv_channel",
      "group",
      "by",
      "language"
    ],
    "question": "For each english , list the number of TV Channels that use it .",
    "question_toks": [
      "For",
      "each",
      "english",
      ",",
      "list",
      "the",
      "number",
      "of",
      "TV",
      "Channels",
      "that",
      "use",
      "it",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Title",
      "=",
      "``",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "!",
      "``",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "title",
      "=",
      "value"
    ],
    "question": "What is the TV Channel that shows the show \" The Rise of the Blue Beetle ! \" ? List the TV Channel 's series name .",
    "question_toks": [
      "What",
      "is",
      "the",
      "TV",
      "Channel",
      "that",
      "shows",
      "the",
      "show",
      "\"",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "!",
      "\"",
      "?",
      "List",
      "the",
      "TV",
      "Channel",
      "'s",
      "series",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"The Rise of the Blue Beetle!\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Title",
      "=",
      "``",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "!",
      "``",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "title",
      "=",
      "value"
    ],
    "question": "What is the super name of the TV Channel that shows the cartoon \" The Rise of the Blue Beetle \" ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "super",
      "name",
      "of",
      "the",
      "TV",
      "Channel",
      "that",
      "shows",
      "the",
      "cartoon",
      "\"",
      "The",
      "Rise",
      "of",
      "the",
      "Blue",
      "Beetle",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"The Rise of the Blue Beetle!\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "T2.Title",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "title",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question": "List the subject of all Cartoons showed on TV Channel with series name \" Sky Radio \" .",
    "question_toks": [
      "List",
      "the",
      "subject",
      "of",
      "all",
      "Cartoons",
      "showed",
      "on",
      "TV",
      "Channel",
      "with",
      "series",
      "name",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "T2.Title",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "Cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "title",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question": "What is the word of all the cartools that are on the TV Channel with the series name \" Sky Radio \" ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "word",
      "of",
      "all",
      "the",
      "cartools",
      "that",
      "are",
      "on",
      "the",
      "TV",
      "Channel",
      "with",
      "the",
      "series",
      "name",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Episode FROM TV_series ORDER BY rating",
    "query_toks": [
      "SELECT",
      "Episode",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "rating"
    ],
    "query_toks_no_value": [
      "select",
      "episode",
      "from",
      "tv_series",
      "order",
      "by",
      "rating"
    ],
    "question": "List the Episode of all TV series sorted by total .",
    "question_toks": [
      "List",
      "the",
      "Episode",
      "of",
      "all",
      "TV",
      "series",
      "sorted",
      "by",
      "total",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Episode FROM TV_series ORDER BY rating",
    "query_toks": [
      "SELECT",
      "Episode",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "rating"
    ],
    "query_toks_no_value": [
      "select",
      "episode",
      "from",
      "tv_series",
      "order",
      "by",
      "rating"
    ],
    "question": "What are all of the episodes ordered by reviews ?",
    "question_toks": [
      "What",
      "are",
      "all",
      "of",
      "the",
      "episodes",
      "ordered",
      "by",
      "reviews",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "query_toks": [
      "SELECT",
      "Episode",
      ",",
      "Rating",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "Rating",
      "DESC",
      "LIMIT",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "episode",
      ",",
      "rating",
      "from",
      "tv_series",
      "order",
      "by",
      "rating",
      "desc",
      "limit",
      "value"
    ],
    "question": "List top 3 highest Rating TV series . List the TV series 's Episode and Rating .",
    "question_toks": [
      "List",
      "top",
      "3",
      "highest",
      "Rating",
      "TV",
      "series",
      ".",
      "List",
      "the",
      "TV",
      "series",
      "'s",
      "Episode",
      "and",
      "Rating",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 3,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "query_toks": [
      "SELECT",
      "Episode",
      ",",
      "Rating",
      "FROM",
      "TV_series",
      "ORDER",
      "BY",
      "Rating",
      "DESC",
      "LIMIT",
      "3",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "episode",
      ",",
      "rating",
      "from",
      "tv_series",
      "order",
      "by",
      "rating",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are 3 most highly rated episodes in the TV series table and what were those rated ?",
    "question_toks": [
      "What",
      "are",
      "3",
      "most",
      "highly",
      "rated",
      "episodes",
      "in",
      "the",
      "TV",
      "series",
      "table",
      "and",
      "what",
      "were",
      "those",
      "rated",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 3,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "TV_series",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "tv_series"
    ],
    "question": "What is minimum and maximum lot of TV series ?",
    "question_toks": [
      "What",
      "is",
      "minimum",
      "and",
      "maximum",
      "lot",
      "of",
      "TV",
      "series",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "TV_series",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "tv_series"
    ],
    "question": "What is the maximum and minimum part for the TV series ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "and",
      "minimum",
      "part",
      "for",
      "the",
      "TV",
      "series",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "Air_Date",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "air_date",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question": "What is the air date of TV show with Episode \" A Love of a Lifetime \" ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "air",
      "date",
      "of",
      "TV",
      "show",
      "with",
      "Episode",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "Air_Date",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "air_date",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question": "When did the episode \" A Love of a Lifetime \" take ?",
    "question_toks": [
      "When",
      "did",
      "the",
      "episode",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "take",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "Weekly_Rank",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "weekly_rank",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question": "What is Weekly Rank of TV show with Episode \" A Love of a Lifetime \" ?",
    "question_toks": [
      "What",
      "is",
      "Weekly",
      "Rank",
      "of",
      "TV",
      "show",
      "with",
      "Episode",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "Weekly_Rank",
      "FROM",
      "TV_series",
      "WHERE",
      "Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "weekly_rank",
      "from",
      "tv_series",
      "where",
      "episode",
      "=",
      "value"
    ],
    "question": "What is the week rank for the episode \" A Love of a Lifetime \" ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "week",
      "rank",
      "for",
      "the",
      "episode",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "episode",
      "=",
      "value"
    ],
    "question": "What is the TV Channel of TV series with Episode \" A Love of a Lifetime \" ? List the TV Channel 's shows name .",
    "question_toks": [
      "What",
      "is",
      "the",
      "TV",
      "Channel",
      "of",
      "TV",
      "series",
      "with",
      "Episode",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "?",
      "List",
      "the",
      "TV",
      "Channel",
      "'s",
      "shows",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.Episode",
      "=",
      "``",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "episode",
      "=",
      "value"
    ],
    "question": "What is the name of the series that has the show \" A Love of a Lifetime \" ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "series",
      "that",
      "has",
      "the",
      "show",
      "\"",
      "A",
      "Love",
      "of",
      "a",
      "Lifetime",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"A Love of a Lifetime\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "T2.Episode",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "episode",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question": "List the Episode of all TV show showed on TV Channel with series name \" Sky Radio \" .",
    "question_toks": [
      "List",
      "the",
      "Episode",
      "of",
      "all",
      "TV",
      "show",
      "showed",
      "on",
      "TV",
      "Channel",
      "with",
      "series",
      "name",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query_toks": [
      "SELECT",
      "T2.Episode",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "TV_series",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T1.series_name",
      "=",
      "``",
      "Sky",
      "Radio",
      "''",
      ";"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "episode",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "tv_series",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t1",
      ".",
      "series_name",
      "=",
      "value"
    ],
    "question": "What is the episode for the TV series called \" Sky Radio \" ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "episode",
      "for",
      "the",
      "TV",
      "series",
      "called",
      "\"",
      "Sky",
      "Radio",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              18,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Sky Radio\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "Directed_by",
      "FROM",
      "cartoon",
      "GROUP",
      "BY",
      "Directed_by"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "group",
      "by",
      "directed_by"
    ],
    "question": "Find the number of movies directed by each of the listed directors .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "movies",
      "directed",
      "by",
      "each",
      "of",
      "the",
      "listed",
      "directors",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "Directed_by",
      "FROM",
      "cartoon",
      "GROUP",
      "BY",
      "Directed_by"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "directed_by",
      "from",
      "cartoon",
      "group",
      "by",
      "directed_by"
    ],
    "question": "How many films did each director create ?",
    "question_toks": [
      "How",
      "many",
      "films",
      "did",
      "each",
      "director",
      "create",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "query_toks": [
      "SELECT",
      "production_code",
      ",",
      "channel",
      "FROM",
      "cartoon",
      "ORDER",
      "BY",
      "original_air_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "limit",
      "value"
    ],
    "question": "Find the producing code and channel of the most recently aired cartoon .",
    "question_toks": [
      "Find",
      "the",
      "producing",
      "code",
      "and",
      "channel",
      "of",
      "the",
      "most",
      "recently",
      "aired",
      "cartoon",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
    "query_toks": [
      "SELECT",
      "production_code",
      ",",
      "channel",
      "FROM",
      "cartoon",
      "ORDER",
      "BY",
      "original_air_date",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "production_code",
      ",",
      "channel",
      "from",
      "cartoon",
      "order",
      "by",
      "original_air_date",
      "limit",
      "value"
    ],
    "question": "What is the produdction line and channel of the most recent cartoon ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "produdction",
      "line",
      "and",
      "channel",
      "of",
      "the",
      "most",
      "recent",
      "cartoon",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "query_toks": [
      "SELECT",
      "package_option",
      ",",
      "series_name",
      "FROM",
      "TV_Channel",
      "WHERE",
      "hight_definition_TV",
      "=",
      "``",
      "yes",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      ",",
      "series_name",
      "from",
      "tv_channel",
      "where",
      "hight_definition_tv",
      "=",
      "value"
    ],
    "question": "Find the package choice and shows name of the TV channel that has high definition TV .",
    "question_toks": [
      "Find",
      "the",
      "package",
      "choice",
      "and",
      "shows",
      "name",
      "of",
      "the",
      "TV",
      "channel",
      "that",
      "has",
      "high",
      "definition",
      "TV",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"yes\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "query_toks": [
      "SELECT",
      "package_option",
      ",",
      "series_name",
      "FROM",
      "TV_Channel",
      "WHERE",
      "hight_definition_TV",
      "=",
      "``",
      "yes",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      ",",
      "series_name",
      "from",
      "tv_channel",
      "where",
      "hight_definition_tv",
      "=",
      "value"
    ],
    "question": "What are the box options and the name of the series for the TV Channel that supports high definition TV ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "box",
      "options",
      "and",
      "the",
      "name",
      "of",
      "the",
      "series",
      "for",
      "the",
      "TV",
      "Channel",
      "that",
      "supports",
      "high",
      "definition",
      "TV",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"yes\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks": [
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question": "which countries ' tv channels are playing some cartoon authored by Todd Casey ?",
    "question_toks": [
      "which",
      "countries",
      "'",
      "tv",
      "channels",
      "are",
      "playing",
      "some",
      "cartoon",
      "authored",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Todd Casey\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks": [
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question": "What are the countries that have shows on TV that were written by Todd Casey ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "that",
      "have",
      "shows",
      "on",
      "TV",
      "that",
      "were",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          "\"Todd Casey\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks": [
      "SELECT",
      "country",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      "from",
      "tv_channel",
      "except",
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question": "which nationalities ' tv channels are not playing any cartoon written by Todd Casey ?",
    "question_toks": [
      "which",
      "nationalities",
      "'",
      "tv",
      "channels",
      "are",
      "not",
      "playing",
      "any",
      "cartoon",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            "\"Todd Casey\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "query_toks": [
      "SELECT",
      "country",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.written_by",
      "=",
      "'Todd",
      "Casey",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "country",
      "from",
      "tv_channel",
      "except",
      "select",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "written_by",
      "=",
      "value"
    ],
    "question": "What are the nationalities that are not playing cartoons written by Todd Casey ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "nationalities",
      "that",
      "are",
      "not",
      "playing",
      "cartoons",
      "written",
      "by",
      "Todd",
      "Casey",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                22,
                false
              ],
              null
            ],
            "\"Todd Casey\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Michael",
      "Chang",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value"
    ],
    "question": "Find the super name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang ?",
    "question_toks": [
      "Find",
      "the",
      "super",
      "name",
      "and",
      "country",
      "of",
      "the",
      "tv",
      "channel",
      "that",
      "is",
      "playing",
      "some",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "and",
      "Michael",
      "Chang",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Michael Chang\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "query_toks": [
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Michael",
      "Chang",
      "'",
      "INTERSECT",
      "SELECT",
      "T1.series_name",
      ",",
      "T1.country",
      "FROM",
      "TV_Channel",
      "AS",
      "T1",
      "JOIN",
      "cartoon",
      "AS",
      "T2",
      "ON",
      "T1.id",
      "=",
      "T2.Channel",
      "WHERE",
      "T2.directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "series_name",
      ",",
      "t1",
      ".",
      "country",
      "from",
      "tv_channel",
      "as",
      "t1",
      "join",
      "cartoon",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "id",
      "=",
      "t2",
      ".",
      "channel",
      "where",
      "t2",
      ".",
      "directed_by",
      "=",
      "value"
    ],
    "question": "What is the series name and country of all TV channels that are playing cartoons headed by Ben Jones and cartoons directed by Michael Chang ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "series",
      "name",
      "and",
      "country",
      "of",
      "all",
      "TV",
      "channels",
      "that",
      "are",
      "playing",
      "cartoons",
      "headed",
      "by",
      "Ben",
      "Jones",
      "and",
      "cartoons",
      "directed",
      "by",
      "Michael",
      "Chang",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              25,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ],
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              0
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              21,
              false
            ],
            null
          ],
          "\"Michael Chang\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "query_toks": [
      "SELECT",
      "Pixel_aspect_ratio_PAR",
      ",",
      "country",
      "FROM",
      "tv_channel",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "'English",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "pixel_aspect_ratio_par",
      ",",
      "country",
      "from",
      "tv_channel",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question": "find the pixel aspect ratio and who of the tv channels that do not use English .",
    "question_toks": [
      "find",
      "the",
      "pixel",
      "aspect",
      "ratio",
      "and",
      "who",
      "of",
      "the",
      "tv",
      "channels",
      "that",
      "do",
      "not",
      "use",
      "English",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "query_toks": [
      "SELECT",
      "Pixel_aspect_ratio_PAR",
      ",",
      "country",
      "FROM",
      "tv_channel",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "'English",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "pixel_aspect_ratio_par",
      ",",
      "country",
      "from",
      "tv_channel",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question": "What is the edge aspect ratio and country of origin for all TV channels that do not use English ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "edge",
      "aspect",
      "ratio",
      "and",
      "country",
      "of",
      "origin",
      "for",
      "all",
      "TV",
      "channels",
      "that",
      "do",
      "not",
      "use",
      "English",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "tv_channel",
      "GROUP",
      "BY",
      "country",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "find id of the television channels that from the countries where have more than two tv channels .",
    "question_toks": [
      "find",
      "id",
      "of",
      "the",
      "television",
      "channels",
      "that",
      "from",
      "the",
      "countries",
      "where",
      "have",
      "more",
      "than",
      "two",
      "tv",
      "channels",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "tv_channel",
      "GROUP",
      "BY",
      "country",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "tv_channel",
      "group",
      "by",
      "country",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the ids of all tv channels that have more than 2 TV station ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "all",
      "tv",
      "channels",
      "that",
      "have",
      "more",
      "than",
      "2",
      "TV",
      "station",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "channel",
      "FROM",
      "cartoon",
      "WHERE",
      "directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "tv_channel",
      "except",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question": "find the id of tv channels that do not play any either directed by Ben Jones .",
    "question_toks": [
      "find",
      "the",
      "id",
      "of",
      "tv",
      "channels",
      "that",
      "do",
      "not",
      "play",
      "any",
      "either",
      "directed",
      "by",
      "Ben",
      "Jones",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  25,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "TV_Channel",
      "EXCEPT",
      "SELECT",
      "channel",
      "FROM",
      "cartoon",
      "WHERE",
      "directed_by",
      "=",
      "'Ben",
      "Jones",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "tv_channel",
      "except",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value"
    ],
    "question": "What are the ids of the TV channels that do not have any drawn directed by Ben Jones ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "the",
      "TV",
      "channels",
      "that",
      "do",
      "not",
      "have",
      "any",
      "drawn",
      "directed",
      "by",
      "Ben",
      "Jones",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  25,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            "\"Ben Jones\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "query_toks": [
      "SELECT",
      "package_option",
      "FROM",
      "TV_Channel",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "channel",
      "FROM",
      "cartoon",
      "WHERE",
      "directed_by",
      "=",
      "'Ben",
      "Jones",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value",
      ")"
    ],
    "question": "find the package option of the television channel that do not have any cartoon directed by Ben Jones .",
    "question_toks": [
      "find",
      "the",
      "package",
      "option",
      "of",
      "the",
      "television",
      "channel",
      "that",
      "do",
      "not",
      "have",
      "any",
      "cartoon",
      "directed",
      "by",
      "Ben",
      "Jones",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      25,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    21,
                    false
                  ],
                  null
                ],
                "\"Ben Jones\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "tvshow",
    "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "query_toks": [
      "SELECT",
      "package_option",
      "FROM",
      "TV_Channel",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "channel",
      "FROM",
      "cartoon",
      "WHERE",
      "directed_by",
      "=",
      "'Ben",
      "Jones",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "package_option",
      "from",
      "tv_channel",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "channel",
      "from",
      "cartoon",
      "where",
      "directed_by",
      "=",
      "value",
      ")"
    ],
    "question": "What are the packaging options of all tv channels that are not playing any cartoons directed by Ben Jones ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "packaging",
      "options",
      "of",
      "all",
      "tv",
      "channels",
      "that",
      "are",
      "not",
      "playing",
      "any",
      "cartoons",
      "directed",
      "by",
      "Ben",
      "Jones",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      25,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    21,
                    false
                  ],
                  null
                ],
                "\"Ben Jones\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT count(*) FROM poker_player",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "poker_player"
    ],
    "question": "How many gambling players are there ?",
    "question_toks": [
      "How",
      "many",
      "gambling",
      "players",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT count(*) FROM poker_player",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "poker_player"
    ],
    "question": "Count the number of casino players .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "casino",
      "players",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "query_toks": [
      "SELECT",
      "Earnings",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "earnings",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc"
    ],
    "question": "List the profits of poker players in descending order .",
    "question_toks": [
      "List",
      "the",
      "profits",
      "of",
      "poker",
      "players",
      "in",
      "descending",
      "order",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "query_toks": [
      "SELECT",
      "Earnings",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "earnings",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc"
    ],
    "question": "What are the returns of poker players , ordered descending by value ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "returns",
      "of",
      "poker",
      "players",
      ",",
      "ordered",
      "descending",
      "by",
      "value",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "query_toks": [
      "SELECT",
      "Final_Table_Made",
      ",",
      "Best_Finish",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "final_table_made",
      ",",
      "best_finish",
      "from",
      "poker_player"
    ],
    "question": "List the end tables made and the best finishes of poker players .",
    "question_toks": [
      "List",
      "the",
      "end",
      "tables",
      "made",
      "and",
      "the",
      "best",
      "finishes",
      "of",
      "poker",
      "players",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "query_toks": [
      "SELECT",
      "Final_Table_Made",
      ",",
      "Best_Finish",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "final_table_made",
      ",",
      "best_finish",
      "from",
      "poker_player"
    ],
    "question": "What are the final tables made and best finishes for all gambling players ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "final",
      "tables",
      "made",
      "and",
      "best",
      "finishes",
      "for",
      "all",
      "gambling",
      "players",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT avg(Earnings) FROM poker_player",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Earnings",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "earnings",
      ")",
      "from",
      "poker_player"
    ],
    "question": "What is the average earnings of gambling players ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "earnings",
      "of",
      "gambling",
      "players",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT avg(Earnings) FROM poker_player",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Earnings",
      ")",
      "FROM",
      "poker_player"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "earnings",
      ")",
      "from",
      "poker_player"
    ],
    "question": "Return the average outcomes across all poker players .",
    "question_toks": [
      "Return",
      "the",
      "average",
      "outcomes",
      "across",
      "all",
      "poker",
      "players",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Money_Rank",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "money_rank",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the money rank of the gambling player with the highest earnings ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "gambling",
      "player",
      "with",
      "the",
      "highest",
      "earnings",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Money_Rank",
      "FROM",
      "poker_player",
      "ORDER",
      "BY",
      "Earnings",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "money_rank",
      "from",
      "poker_player",
      "order",
      "by",
      "earnings",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the cash rank of the player with the greatest earnings .",
    "question_toks": [
      "Return",
      "the",
      "cash",
      "rank",
      "of",
      "the",
      "player",
      "with",
      "the",
      "greatest",
      "earnings",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "Final_Table_Made",
      ")",
      "FROM",
      "poker_player",
      "WHERE",
      "Earnings",
      "<",
      "200000"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "final_table_made",
      ")",
      "from",
      "poker_player",
      "where",
      "earnings",
      "<",
      "value"
    ],
    "question": "What is the maximum number of final tables made among poker players with accumulated less than 200000 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "maximum",
      "number",
      "of",
      "final",
      "tables",
      "made",
      "among",
      "poker",
      "players",
      "with",
      "accumulated",
      "less",
      "than",
      "200000",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          200000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "Final_Table_Made",
      ")",
      "FROM",
      "poker_player",
      "WHERE",
      "Earnings",
      "<",
      "200000"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "final_table_made",
      ")",
      "from",
      "poker_player",
      "where",
      "earnings",
      "<",
      "value"
    ],
    "question": "Return the maximum end tables made across all poker players who have earnings below 200000 .",
    "question_toks": [
      "Return",
      "the",
      "maximum",
      "end",
      "tables",
      "made",
      "across",
      "all",
      "poker",
      "players",
      "who",
      "have",
      "earnings",
      "below",
      "200000",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          200000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id"
    ],
    "question": "What are the names of gambling players ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "gambling",
      "players",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id"
    ],
    "question": "Return the names of all the gambling players .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "all",
      "the",
      "gambling",
      "players",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T2.Earnings",
      ">",
      "300000"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t2",
      ".",
      "earnings",
      ">",
      "value"
    ],
    "question": "What are the names of bluff players whose earnings is higher than 300000 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "bluff",
      "players",
      "whose",
      "earnings",
      "is",
      "higher",
      "than",
      "300000",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T2.Earnings",
      ">",
      "300000"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t2",
      ".",
      "earnings",
      ">",
      "value"
    ],
    "question": "Give the names of poker players who have profits above 300000 .",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "who",
      "have",
      "profits",
      "above",
      "300000",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Final_Table_Made"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "final_table_made"
    ],
    "question": "List the names of poker players ordered by the end tables made in ascending order .",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "poker",
      "players",
      "ordered",
      "by",
      "the",
      "end",
      "tables",
      "made",
      "in",
      "ascending",
      "order",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Final_Table_Made"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "final_table_made"
    ],
    "question": "What are the names of bluff players , ordered ascending by the number of final tables they have made ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "bluff",
      "players",
      ",",
      "ordered",
      "ascending",
      "by",
      "the",
      "number",
      "of",
      "final",
      "tables",
      "they",
      "have",
      "made",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Birth_Date",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "birth_date",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the birth date of the bluff player with the lowest earnings ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "birth",
      "date",
      "of",
      "the",
      "bluff",
      "player",
      "with",
      "the",
      "lowest",
      "earnings",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Birth_Date",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "birth_date",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "asc",
      "limit",
      "value"
    ],
    "question": "Return the birth date of the poker player with the lowest outcomes .",
    "question_toks": [
      "Return",
      "the",
      "birth",
      "date",
      "of",
      "the",
      "poker",
      "player",
      "with",
      "the",
      "lowest",
      "outcomes",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Money_Rank",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T1.Height",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "money_rank",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t1",
      ".",
      "height",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the money rank of the tallest gambling player ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "tallest",
      "gambling",
      "player",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Money_Rank",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T1.Height",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "money_rank",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t1",
      ".",
      "height",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the money rank of the gambling player with the greatest height .",
    "question_toks": [
      "Return",
      "the",
      "money",
      "rank",
      "of",
      "the",
      "gambling",
      "player",
      "with",
      "the",
      "greatest",
      "height",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "T2.Earnings",
      ")",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T1.Height",
      ">",
      "200"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "earnings",
      ")",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t1",
      ".",
      "height",
      ">",
      "value"
    ],
    "question": "What is the average pay of poker players with height higher than 200 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "pay",
      "of",
      "poker",
      "players",
      "with",
      "height",
      "higher",
      "than",
      "200",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "T2.Earnings",
      ")",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "WHERE",
      "T1.Height",
      ">",
      "200"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "t2",
      ".",
      "earnings",
      ")",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "where",
      "t1",
      ".",
      "height",
      ">",
      "value"
    ],
    "question": "Give average profits of poker players who are taller than 200 .",
    "question_toks": [
      "Give",
      "average",
      "profits",
      "of",
      "poker",
      "players",
      "who",
      "are",
      "taller",
      "than",
      "200",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          200.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "desc"
    ],
    "question": "What are the names of bluff players in descending order of earnings ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "bluff",
      "players",
      "in",
      "descending",
      "order",
      "of",
      "earnings",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "people",
      "AS",
      "T1",
      "JOIN",
      "poker_player",
      "AS",
      "T2",
      "ON",
      "T1.People_ID",
      "=",
      "T2.People_ID",
      "ORDER",
      "BY",
      "T2.Earnings",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "people",
      "as",
      "t1",
      "join",
      "poker_player",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "people_id",
      "=",
      "t2",
      ".",
      "people_id",
      "order",
      "by",
      "t2",
      ".",
      "earnings",
      "desc"
    ],
    "question": "Return the names of bluff players sorted by their earnings descending .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "bluff",
      "players",
      "sorted",
      "by",
      "their",
      "earnings",
      "descending",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ],
            [
              0,
              2,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "query_toks": [
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "people",
      "group",
      "by",
      "nationality"
    ],
    "question": "What are different nationalities of persons and the corresponding number of people from each nation ?",
    "question_toks": [
      "What",
      "are",
      "different",
      "nationalities",
      "of",
      "persons",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "people",
      "from",
      "each",
      "nation",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "query_toks": [
      "SELECT",
      "Nationality",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "people",
      "group",
      "by",
      "nationality"
    ],
    "question": "How many people are there of each ethnicity ?",
    "question_toks": [
      "How",
      "many",
      "people",
      "are",
      "there",
      "of",
      "each",
      "ethnicity",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Nationality",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the most common nationality of folks ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "most",
      "common",
      "nationality",
      "of",
      "folks",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Nationality",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the ethnicity that is most common across all people .",
    "question_toks": [
      "Give",
      "the",
      "ethnicity",
      "that",
      "is",
      "most",
      "common",
      "across",
      "all",
      "people",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "Nationality",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the ethnicity that are shared by at least two people ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ethnicity",
      "that",
      "are",
      "shared",
      "by",
      "at",
      "least",
      "two",
      "people",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "query_toks": [
      "SELECT",
      "Nationality",
      "FROM",
      "people",
      "GROUP",
      "BY",
      "Nationality",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "nationality",
      "from",
      "people",
      "group",
      "by",
      "nationality",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Return the ethnic for which there are two or more people .",
    "question_toks": [
      "Return",
      "the",
      "ethnic",
      "for",
      "which",
      "there",
      "are",
      "two",
      "or",
      "more",
      "people",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "Birth_Date",
      "FROM",
      "people",
      "ORDER",
      "BY",
      "Name",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "birth_date",
      "from",
      "people",
      "order",
      "by",
      "name",
      "asc"
    ],
    "question": "List the names and born dates of people in ascending alphabetical order of name .",
    "question_toks": [
      "List",
      "the",
      "names",
      "and",
      "born",
      "dates",
      "of",
      "people",
      "in",
      "ascending",
      "alphabetical",
      "order",
      "of",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "Birth_Date",
      "FROM",
      "people",
      "ORDER",
      "BY",
      "Name",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "birth_date",
      "from",
      "people",
      "order",
      "by",
      "name",
      "asc"
    ],
    "question": "What are the names and birth dates of person , ordered by their names in alphabetical order ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "birth",
      "dates",
      "of",
      "person",
      ",",
      "ordered",
      "by",
      "their",
      "names",
      "in",
      "alphabetical",
      "order",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "people",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "``",
      "Russia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question": "Show names of people whose ethnicity is not \" Russia \" .",
    "question_toks": [
      "Show",
      "names",
      "of",
      "people",
      "whose",
      "ethnicity",
      "is",
      "not",
      "\"",
      "Russia",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Russia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "people",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "``",
      "Russia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question": "What are the names of folks who are not from Russia ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "folks",
      "who",
      "are",
      "not",
      "from",
      "Russia",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              8,
              false
            ],
            null
          ],
          "\"Russia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "people",
      "WHERE",
      "People_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "People_ID",
      "FROM",
      "poker_player",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "people_id",
      "not",
      "in",
      "(",
      "select",
      "people_id",
      "from",
      "poker_player",
      ")"
    ],
    "question": "List the names of folks that are not poker players .",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "folks",
      "that",
      "are",
      "not",
      "poker",
      "players",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      2,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "people",
      "WHERE",
      "People_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "People_ID",
      "FROM",
      "poker_player",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "people",
      "where",
      "people_id",
      "not",
      "in",
      "(",
      "select",
      "people_id",
      "from",
      "poker_player",
      ")"
    ],
    "question": "What are the names of folks who do not play poker ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "folks",
      "who",
      "do",
      "not",
      "play",
      "poker",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      2,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT count(DISTINCT Nationality) FROM people",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "people"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "people"
    ],
    "question": "How many distinct ethnicity are there ?",
    "question_toks": [
      "How",
      "many",
      "distinct",
      "ethnicity",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                8,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "poker_player",
    "query": "SELECT count(DISTINCT Nationality) FROM people",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "people"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "people"
    ],
    "question": "Count the number of different ethnicity .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "different",
      "ethnicity",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                8,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT count(*) FROM area_code_state",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "area_code_state"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "area_code_state"
    ],
    "question": "How many statewide are there ?",
    "question_toks": [
      "How",
      "many",
      "statewide",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
    "query_toks": [
      "SELECT",
      "contestant_number",
      ",",
      "contestant_name",
      "FROM",
      "contestants",
      "ORDER",
      "BY",
      "contestant_name",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "contestant_number",
      ",",
      "contestant_name",
      "from",
      "contestants",
      "order",
      "by",
      "contestant_name",
      "desc"
    ],
    "question": "List the contestant numbers and names , ordered by winner name descending .",
    "question_toks": [
      "List",
      "the",
      "contestant",
      "numbers",
      "and",
      "names",
      ",",
      "ordered",
      "by",
      "winner",
      "name",
      "descending",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
    "query_toks": [
      "SELECT",
      "vote_id",
      ",",
      "phone_number",
      ",",
      "state",
      "FROM",
      "votes"
    ],
    "query_toks_no_value": [
      "select",
      "vote_id",
      ",",
      "phone_number",
      ",",
      "state",
      "from",
      "votes"
    ],
    "question": "List the vote ids , phone numbers and statewide of all votes .",
    "question_toks": [
      "List",
      "the",
      "vote",
      "ids",
      ",",
      "phone",
      "numbers",
      "and",
      "statewide",
      "of",
      "all",
      "votes",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "area_code",
      ")",
      ",",
      "min",
      "(",
      "area_code",
      ")",
      "FROM",
      "area_code_state"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "area_code",
      ")",
      ",",
      "min",
      "(",
      "area_code",
      ")",
      "from",
      "area_code_state"
    ],
    "question": "What are the maximum and minimum values of zone codes ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "maximum",
      "and",
      "minimum",
      "values",
      "of",
      "zone",
      "codes",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "created",
      ")",
      "FROM",
      "votes",
      "WHERE",
      "state",
      "=",
      "'CA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "created",
      ")",
      "from",
      "votes",
      "where",
      "state",
      "=",
      "value"
    ],
    "question": "What is last date created of votes from the country ' CA ' ?",
    "question_toks": [
      "What",
      "is",
      "last",
      "date",
      "created",
      "of",
      "votes",
      "from",
      "the",
      "country",
      "'",
      "CA",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"CA\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "query_toks": [
      "SELECT",
      "contestant_name",
      "FROM",
      "contestants",
      "WHERE",
      "contestant_name",
      "!",
      "=",
      "'Jessie",
      "Alloway",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "contestant_name",
      "from",
      "contestants",
      "where",
      "contestant_name",
      "!",
      "=",
      "value"
    ],
    "question": "What are the names of the producers whose names are not ' Jessie Alloway '",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "producers",
      "whose",
      "names",
      "are",
      "not",
      "'",
      "Jessie",
      "Alloway",
      "'"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Jessie Alloway\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT DISTINCT state ,  created FROM votes",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "state",
      ",",
      "created",
      "FROM",
      "votes"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "state",
      ",",
      "created",
      "from",
      "votes"
    ],
    "question": "What are the distinct states and create time of all voting ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "distinct",
      "states",
      "and",
      "create",
      "time",
      "of",
      "all",
      "voting",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T1.contestant_number",
      ",",
      "T1.contestant_name",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "GROUP",
      "BY",
      "T1.contestant_number",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "contestant_number",
      ",",
      "t1",
      ".",
      "contestant_name",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "group",
      "by",
      "t1",
      ".",
      "contestant_number",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the contestant counts and names of the contestants who had at least two votes ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "contestant",
      "counts",
      "and",
      "names",
      "of",
      "the",
      "contestants",
      "who",
      "had",
      "at",
      "least",
      "two",
      "votes",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.contestant_number",
      ",",
      "T1.contestant_name",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "GROUP",
      "BY",
      "T1.contestant_number",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "contestant_number",
      ",",
      "t1",
      ".",
      "contestant_name",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "group",
      "by",
      "t1",
      ".",
      "contestant_number",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "Of all the contestants who got chose , what is the contestant number and name of the contestant who got least votes ?",
    "question_toks": [
      "Of",
      "all",
      "the",
      "contestants",
      "who",
      "got",
      "chose",
      ",",
      "what",
      "is",
      "the",
      "contestant",
      "number",
      "and",
      "name",
      "of",
      "the",
      "contestant",
      "who",
      "got",
      "least",
      "votes",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "votes",
      "WHERE",
      "state",
      "=",
      "'NY",
      "'",
      "OR",
      "state",
      "=",
      "'CA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "votes",
      "where",
      "state",
      "=",
      "value",
      "or",
      "state",
      "=",
      "value"
    ],
    "question": "What are the number of voting from state ' NY ' or ' CA ' ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "number",
      "of",
      "voting",
      "from",
      "state",
      "'",
      "NY",
      "'",
      "or",
      "'",
      "CA",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"NY\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"CA\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "contestants",
      "WHERE",
      "contestant_number",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "contestant_number",
      "FROM",
      "votes",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "contestants",
      "where",
      "contestant_number",
      "not",
      "in",
      "(",
      "select",
      "contestant_number",
      "from",
      "votes",
      ")"
    ],
    "question": "How many contestants did not get voting ?",
    "question_toks": [
      "How",
      "many",
      "contestants",
      "did",
      "not",
      "get",
      "voting",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.area_code",
      "FROM",
      "area_code_state",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.state",
      "=",
      "T2.state",
      "GROUP",
      "BY",
      "T1.area_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "area_code",
      "from",
      "area_code_state",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "state",
      "=",
      "t2",
      ".",
      "state",
      "group",
      "by",
      "t1",
      ".",
      "area_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the country code in which the most voters voted ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "country",
      "code",
      "in",
      "which",
      "the",
      "most",
      "voters",
      "voted",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ],
            [
              0,
              7,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          1,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
    "query_toks": [
      "SELECT",
      "T2.created",
      ",",
      "T2.state",
      ",",
      "T2.phone_number",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "WHERE",
      "T1.contestant_name",
      "=",
      "'Tabatha",
      "Gehling",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "created",
      ",",
      "t2",
      ".",
      "state",
      ",",
      "t2",
      ".",
      "phone_number",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "where",
      "t1",
      ".",
      "contestant_name",
      "=",
      "value"
    ],
    "question": "What are the create dates , times , and phone numbers of the votes that were for the contestant named ' Tabatha Gehling ' ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "create",
      "dates",
      ",",
      "times",
      ",",
      "and",
      "phone",
      "numbers",
      "of",
      "the",
      "votes",
      "that",
      "were",
      "for",
      "the",
      "contestant",
      "named",
      "'",
      "Tabatha",
      "Gehling",
      "'",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Tabatha Gehling\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
    "query_toks": [
      "SELECT",
      "T3.area_code",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "JOIN",
      "area_code_state",
      "AS",
      "T3",
      "ON",
      "T2.state",
      "=",
      "T3.state",
      "WHERE",
      "T1.contestant_name",
      "=",
      "'Tabatha",
      "Gehling",
      "'",
      "INTERSECT",
      "SELECT",
      "T3.area_code",
      "FROM",
      "contestants",
      "AS",
      "T1",
      "JOIN",
      "votes",
      "AS",
      "T2",
      "ON",
      "T1.contestant_number",
      "=",
      "T2.contestant_number",
      "JOIN",
      "area_code_state",
      "AS",
      "T3",
      "ON",
      "T2.state",
      "=",
      "T3.state",
      "WHERE",
      "T1.contestant_name",
      "=",
      "'Kelly",
      "Clauss",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "area_code",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "join",
      "area_code_state",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "state",
      "=",
      "t3",
      ".",
      "state",
      "where",
      "t1",
      ".",
      "contestant_name",
      "=",
      "value",
      "intersect",
      "select",
      "t3",
      ".",
      "area_code",
      "from",
      "contestants",
      "as",
      "t1",
      "join",
      "votes",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "contestant_number",
      "=",
      "t2",
      ".",
      "contestant_number",
      "join",
      "area_code_state",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "state",
      "=",
      "t3",
      ".",
      "state",
      "where",
      "t1",
      ".",
      "contestant_name",
      "=",
      "value"
    ],
    "question": "List the region codes in which voters voted both for the contestant ' Tabatha Gehling ' and the contestant ' Kelly Clauss ' .",
    "question_toks": [
      "List",
      "the",
      "region",
      "codes",
      "in",
      "which",
      "voters",
      "voted",
      "both",
      "for",
      "the",
      "contestant",
      "'",
      "Tabatha",
      "Gehling",
      "'",
      "and",
      "the",
      "contestant",
      "'",
      "Kelly",
      "Clauss",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  3,
                  false
                ],
                null
              ],
              [
                0,
                8,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  1,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            "\"Kelly Clauss\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Tabatha Gehling\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "voter_1",
    "query": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE \"%Al%\"",
    "query_toks": [
      "SELECT",
      "contestant_name",
      "FROM",
      "contestants",
      "WHERE",
      "contestant_name",
      "LIKE",
      "``",
      "%",
      "Al",
      "%",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "contestant_name",
      "from",
      "contestants",
      "where",
      "contestant_name",
      "like",
      "value"
    ],
    "question": "Return the names the competed whose names contain the substring ' Al ' .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "the",
      "competed",
      "whose",
      "names",
      "contain",
      "the",
      "substring",
      "'",
      "Al",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"%Al%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "IndepYear",
      ">",
      "1950"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "indepyear",
      ">",
      "value"
    ],
    "question": "What are the names of all the worlds that became independent after 1950 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "the",
      "worlds",
      "that",
      "became",
      "independent",
      "after",
      "1950",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1950.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "IndepYear",
      ">",
      "1950"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "indepyear",
      ">",
      "value"
    ],
    "question": "Give the names of the republics that were founded after 1950 .",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "the",
      "republics",
      "that",
      "were",
      "founded",
      "after",
      "1950",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1950.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question": "How many countries have a republic as their form of governmental ?",
    "question_toks": [
      "How",
      "many",
      "countries",
      "have",
      "a",
      "republic",
      "as",
      "their",
      "form",
      "of",
      "governmental",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question": "How many places have governments that are republics ?",
    "question_toks": [
      "How",
      "many",
      "places",
      "have",
      "governments",
      "that",
      "are",
      "republics",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Caribbean",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question": "What is the total floor area of the countries in the Caribbean region ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "floor",
      "area",
      "of",
      "the",
      "countries",
      "in",
      "the",
      "Caribbean",
      "region",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Caribbean\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Caribbean",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question": "How much floor area do the countires in the Carribean cover together ?",
    "question_toks": [
      "How",
      "much",
      "floor",
      "area",
      "do",
      "the",
      "countires",
      "in",
      "the",
      "Carribean",
      "cover",
      "together",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Caribbean\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "query_toks": [
      "SELECT",
      "Continent",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Anguilla",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "continent",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "Which hemisphere is Anguilla in ?",
    "question_toks": [
      "Which",
      "hemisphere",
      "is",
      "Anguilla",
      "in",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Anguilla\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "query_toks": [
      "SELECT",
      "Continent",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Anguilla",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "continent",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What is the mainland name which Anguilla belongs to ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "mainland",
      "name",
      "which",
      "Anguilla",
      "belongs",
      "to",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Anguilla\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "query_toks": [
      "SELECT",
      "Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "city",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Name",
      "=",
      "``",
      "Kabul",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "Which zone is the city Kabul located in ?",
    "question_toks": [
      "Which",
      "zone",
      "is",
      "the",
      "city",
      "Kabul",
      "located",
      "in",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kabul\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "query_toks": [
      "SELECT",
      "Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "city",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Name",
      "=",
      "``",
      "Kabul",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "What zone is Kabul in ?",
    "question_toks": [
      "What",
      "zone",
      "is",
      "Kabul",
      "in",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kabul\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''",
      "ORDER",
      "BY",
      "Percentage",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "percentage",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which speak is the most popular in Aruba ?",
    "question_toks": [
      "Which",
      "speak",
      "is",
      "the",
      "most",
      "popular",
      "in",
      "Aruba",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''",
      "ORDER",
      "BY",
      "Percentage",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "order",
      "by",
      "percentage",
      "desc",
      "limit",
      "value"
    ],
    "question": "What spoken is predominantly spoken in Aruba ?",
    "question_toks": [
      "What",
      "spoken",
      "is",
      "predominantly",
      "spoken",
      "in",
      "Aruba",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "query_toks": [
      "SELECT",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Brazil",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What are the population and living expectancies in Brazil ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "population",
      "and",
      "living",
      "expectancies",
      "in",
      "Brazil",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "query_toks": [
      "SELECT",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Brazil",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "Give me Brazil \u2019s population and living expectancies .",
    "question_toks": [
      "Give",
      "me",
      "Brazil",
      "\u2019s",
      "population",
      "and",
      "living",
      "expectancies",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Brazil\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "query_toks": [
      "SELECT",
      "Population",
      ",",
      "Region",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Angola",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "population",
      ",",
      "region",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What are the place and population of Angola ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "place",
      "and",
      "population",
      "of",
      "Angola",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Angola\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "query_toks": [
      "SELECT",
      "Population",
      ",",
      "Region",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "=",
      "``",
      "Angola",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "population",
      ",",
      "region",
      "from",
      "country",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What location does Angola belong to and what is its population ?",
    "question_toks": [
      "What",
      "location",
      "does",
      "Angola",
      "belong",
      "to",
      "and",
      "what",
      "is",
      "its",
      "population",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Angola\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Central",
      "Africa",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question": "What is the average expected life expectancy for places in the region of Central Africa ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "expected",
      "life",
      "expectancy",
      "for",
      "places",
      "in",
      "the",
      "region",
      "of",
      "Central",
      "Africa",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Central Africa\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Region",
      "=",
      "``",
      "Central",
      "Africa",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "region",
      "=",
      "value"
    ],
    "question": "How long is the individuals \u2019s average life expectancy in Central Africa ?",
    "question_toks": [
      "How",
      "long",
      "is",
      "the",
      "individuals",
      "\u2019s",
      "average",
      "life",
      "expectancy",
      "in",
      "Central",
      "Africa",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"Central Africa\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "LifeExpectancy",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "lifeexpectancy",
      "limit",
      "value"
    ],
    "question": "What is the name of country that has the shortest living expectancy in Asia ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "country",
      "that",
      "has",
      "the",
      "shortest",
      "living",
      "expectancy",
      "in",
      "Asia",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "LifeExpectancy",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "lifeexpectancy",
      "limit",
      "value"
    ],
    "question": "Give the name of the place in Asia with the lowest life expectancy .",
    "question_toks": [
      "Give",
      "the",
      "name",
      "of",
      "the",
      "place",
      "in",
      "Asia",
      "with",
      "the",
      "lowest",
      "life",
      "expectancy",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "max",
      "(",
      "GNP",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "max",
      "(",
      "gnp",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "What is the total total and maximum GNP in Asia ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "total",
      "and",
      "maximum",
      "GNP",
      "in",
      "Asia",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "max",
      "(",
      "GNP",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "max",
      "(",
      "gnp",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "How many who live in Asia , and what is the largest GNP among them ?",
    "question_toks": [
      "How",
      "many",
      "who",
      "live",
      "in",
      "Asia",
      ",",
      "and",
      "what",
      "is",
      "the",
      "largest",
      "GNP",
      "among",
      "them",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      "AND",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "governmentform",
      "=",
      "value"
    ],
    "question": "What is the average longevity expectancy in African countries that are republics ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "longevity",
      "expectancy",
      "in",
      "African",
      "countries",
      "that",
      "are",
      "republics",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      "AND",
      "GovernmentForm",
      "=",
      "``",
      "Republic",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "governmentform",
      "=",
      "value"
    ],
    "question": "Give the average life expectancy for countries in Africa which are multinational ?",
    "question_toks": [
      "Give",
      "the",
      "average",
      "life",
      "expectancy",
      "for",
      "countries",
      "in",
      "Africa",
      "which",
      "are",
      "multinational",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "OR",
      "Continent",
      "=",
      "``",
      "Europe",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "or",
      "continent",
      "=",
      "value"
    ],
    "question": "What is the total surface area of the continental Asia and Europe ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "surface",
      "area",
      "of",
      "the",
      "continental",
      "Asia",
      "and",
      "Europe",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "OR",
      "Continent",
      "=",
      "``",
      "Europe",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "or",
      "continent",
      "=",
      "value"
    ],
    "question": "Give the total surface area covered by places in Asia or Europe .",
    "question_toks": [
      "Give",
      "the",
      "total",
      "surface",
      "area",
      "covered",
      "by",
      "places",
      "in",
      "Asia",
      "or",
      "Europe",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "city",
      "WHERE",
      "District",
      "=",
      "``",
      "Gelderland",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "city",
      "where",
      "district",
      "=",
      "value"
    ],
    "question": "How many people live in Gelderland constituency ?",
    "question_toks": [
      "How",
      "many",
      "people",
      "live",
      "in",
      "Gelderland",
      "constituency",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Gelderland\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "city",
      "WHERE",
      "District",
      "=",
      "``",
      "Gelderland",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "city",
      "where",
      "district",
      "=",
      "value"
    ],
    "question": "What is the total total of Gelderland district ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "total",
      "of",
      "Gelderland",
      "district",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"Gelderland\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "GNP",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "US",
      "Territory",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "gnp",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question": "What is the average GNP and total total in all nations whose government is US territory ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "GNP",
      "and",
      "total",
      "total",
      "in",
      "all",
      "nations",
      "whose",
      "government",
      "is",
      "US",
      "territory",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"US Territory\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "GNP",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "=",
      "``",
      "US",
      "Territory",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "gnp",
      ")",
      ",",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "governmentform",
      "=",
      "value"
    ],
    "question": "Give the mean GNP and total population of individuals which are considered US territory .",
    "question_toks": [
      "Give",
      "the",
      "mean",
      "GNP",
      "and",
      "total",
      "population",
      "of",
      "individuals",
      "which",
      "are",
      "considered",
      "US",
      "territory",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"US Territory\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LANGUAGE",
      ")",
      "FROM",
      "countrylanguage"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "language",
      ")",
      "from",
      "countrylanguage"
    ],
    "question": "How many unique spoken are spoken in the world ?",
    "question_toks": [
      "How",
      "many",
      "unique",
      "spoken",
      "are",
      "spoken",
      "in",
      "the",
      "world",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "LANGUAGE",
      ")",
      "FROM",
      "countrylanguage"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "language",
      ")",
      "from",
      "countrylanguage"
    ],
    "question": "What is the number of distinct spoken used around the world ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "distinct",
      "spoken",
      "used",
      "around",
      "the",
      "world",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "GovernmentForm",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "governmentform",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "How many type of governmental are in Africa ?",
    "question_toks": [
      "How",
      "many",
      "type",
      "of",
      "governmental",
      "are",
      "in",
      "Africa",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "GovernmentForm",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "governmentform",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "How many different forms of governmental are there in Africa ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "forms",
      "of",
      "governmental",
      "are",
      "there",
      "in",
      "Africa",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                19,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "What is the total number of spoken used in Aruba ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "spoken",
      "used",
      "in",
      "Aruba",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Aruba",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "How many spoken are spoken in Aruba ?",
    "question_toks": [
      "How",
      "many",
      "spoken",
      "are",
      "spoken",
      "in",
      "Aruba",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Aruba\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Afghanistan",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question": "How many official spoken does Afghanistan have ?",
    "question_toks": [
      "How",
      "many",
      "official",
      "spoken",
      "does",
      "Afghanistan",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Name",
      "=",
      "``",
      "Afghanistan",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "name",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question": "How many official spoken are spoken in Afghanistan ?",
    "question_toks": [
      "How",
      "many",
      "official",
      "spoken",
      "are",
      "spoken",
      "in",
      "Afghanistan",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          "\"Afghanistan\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is name of the country that speaks the largest number of linguistic ?",
    "question_toks": [
      "What",
      "is",
      "name",
      "of",
      "the",
      "country",
      "that",
      "speaks",
      "the",
      "largest",
      "number",
      "of",
      "linguistic",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Name",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the name of the national that uses the greatest amount of languages .",
    "question_toks": [
      "Give",
      "the",
      "name",
      "of",
      "the",
      "national",
      "that",
      "uses",
      "the",
      "greatest",
      "amount",
      "of",
      "languages",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Continent",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Continent",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "continent",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "continent",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which continent has the most diverse linguistic ?",
    "question_toks": [
      "Which",
      "continent",
      "has",
      "the",
      "most",
      "diverse",
      "linguistic",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Continent",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Continent",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "continent",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "continent",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which continental speaks the most languages ?",
    "question_toks": [
      "Which",
      "continental",
      "speaks",
      "the",
      "most",
      "languages",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "How many places speak both English and Dutch ?",
    "question_toks": [
      "How",
      "many",
      "places",
      "speak",
      "both",
      "English",
      "and",
      "Dutch",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "sql",
            {
              "except": null,
              "from": {
                "conds": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        8,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ],
                "table_units": [
                  [
                    "table_unit",
                    2
                  ],
                  [
                    "table_unit",
                    3
                  ]
                ]
              },
              "groupBy": [],
              "having": [],
              "intersect": {
                "except": null,
                "from": {
                  "conds": [
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          8,
                          false
                        ],
                        null
                      ],
                      [
                        0,
                        23,
                        false
                      ],
                      null
                    ]
                  ],
                  "table_units": [
                    [
                      "table_unit",
                      2
                    ],
                    [
                      "table_unit",
                      3
                    ]
                  ]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [
                  false,
                  [
                    [
                      0,
                      [
                        0,
                        [
                          0,
                          9,
                          false
                        ],
                        null
                      ]
                    ]
                  ]
                ],
                "union": null,
                "where": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        24,
                        false
                      ],
                      null
                    ],
                    "\"Dutch\"",
                    null
                  ]
                ]
              },
              "limit": null,
              "orderBy": [],
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        9,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "union": null,
              "where": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      24,
                      false
                    ],
                    null
                  ],
                  "\"English\"",
                  null
                ]
              ]
            }
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "What is the number of republics that use English and Dutch ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "republics",
      "that",
      "use",
      "English",
      "and",
      "Dutch",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "sql",
            {
              "except": null,
              "from": {
                "conds": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        8,
                        false
                      ],
                      null
                    ],
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ],
                "table_units": [
                  [
                    "table_unit",
                    2
                  ],
                  [
                    "table_unit",
                    3
                  ]
                ]
              },
              "groupBy": [],
              "having": [],
              "intersect": {
                "except": null,
                "from": {
                  "conds": [
                    [
                      false,
                      2,
                      [
                        0,
                        [
                          0,
                          8,
                          false
                        ],
                        null
                      ],
                      [
                        0,
                        23,
                        false
                      ],
                      null
                    ]
                  ],
                  "table_units": [
                    [
                      "table_unit",
                      2
                    ],
                    [
                      "table_unit",
                      3
                    ]
                  ]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [
                  false,
                  [
                    [
                      0,
                      [
                        0,
                        [
                          0,
                          9,
                          false
                        ],
                        null
                      ]
                    ]
                  ]
                ],
                "union": null,
                "where": [
                  [
                    false,
                    2,
                    [
                      0,
                      [
                        0,
                        24,
                        false
                      ],
                      null
                    ],
                    "\"Dutch\"",
                    null
                  ]
                ]
              },
              "limit": null,
              "orderBy": [],
              "select": [
                false,
                [
                  [
                    0,
                    [
                      0,
                      [
                        0,
                        9,
                        false
                      ],
                      null
                    ]
                  ]
                ]
              ],
              "union": null,
              "where": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      24,
                      false
                    ],
                    null
                  ],
                  "\"English\"",
                  null
                ]
              ]
            }
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "What are the names of all speak both English and French ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "speak",
      "both",
      "English",
      "and",
      "French",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "Give the names of republics that speak both English and French .",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "republics",
      "that",
      "speak",
      "both",
      "English",
      "and",
      "French",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "What are the names of world where both English and French are official languages ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "world",
      "where",
      "both",
      "English",
      "and",
      "French",
      "are",
      "official",
      "languages",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''",
      "INTERSECT",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "French",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "intersect",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "Give the names of jurisdictions with English and French as official languages .",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "jurisdictions",
      "with",
      "English",
      "and",
      "French",
      "as",
      "official",
      "languages",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"French\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "Continent",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Chinese",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "continent",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "What is the number of distinct worlds where Chinese is spoken ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "number",
      "of",
      "distinct",
      "worlds",
      "where",
      "Chinese",
      "is",
      "spoken",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "DISTINCT",
      "Continent",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Chinese",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "continent",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "How many oceans speak Chinese ?",
    "question_toks": [
      "How",
      "many",
      "oceans",
      "speak",
      "Chinese",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                10,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "OR",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "What are the zones that use English or Dutch ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "zones",
      "that",
      "use",
      "English",
      "or",
      "Dutch",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Dutch\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Region",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "OR",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "region",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "or",
      "t2",
      ".",
      "language",
      "=",
      "value"
    ],
    "question": "Which zones speak Dutch or English ?",
    "question_toks": [
      "Which",
      "zones",
      "speak",
      "Dutch",
      "or",
      "English",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Dutch\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "*",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''",
      "UNION",
      "SELECT",
      "*",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value",
      "union",
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question": "What are the places where either English or Dutch is the official language ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "places",
      "where",
      "either",
      "English",
      "or",
      "Dutch",
      "is",
      "the",
      "official",
      "language",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  0,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"Dutch\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ]
      },
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "*",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''",
      "UNION",
      "SELECT",
      "*",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "Dutch",
      "''",
      "AND",
      "IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value",
      "union",
      "select",
      "*",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "isofficial",
      "=",
      "value"
    ],
    "question": "Which countries have either English or Dutch as an official speak ?",
    "question_toks": [
      "Which",
      "countries",
      "have",
      "either",
      "English",
      "or",
      "Dutch",
      "as",
      "an",
      "official",
      "speak",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  8,
                  false
                ],
                null
              ],
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  0,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"Dutch\"",
            null
          ],
          "and",
          [
            false,
            2,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ],
            "\"T\"",
            null
          ]
        ]
      },
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Continent",
      "=",
      "``",
      "Asia",
      "''",
      "GROUP",
      "BY",
      "T2.Language",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "continent",
      "=",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which language is the most popular on the Asian world ?",
    "question_toks": [
      "Which",
      "language",
      "is",
      "the",
      "most",
      "popular",
      "on",
      "the",
      "Asian",
      "world",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.Continent",
      "=",
      "``",
      "Asia",
      "''",
      "GROUP",
      "BY",
      "T2.Language",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "continent",
      "=",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the language that is used by the largest number of Asian society ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "language",
      "that",
      "is",
      "used",
      "by",
      "the",
      "largest",
      "number",
      "of",
      "Asian",
      "society",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.GovernmentForm",
      "=",
      "``",
      "Republic",
      "''",
      "GROUP",
      "BY",
      "T2.Language",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      "=",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "governmentform",
      "=",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "language",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "value"
    ],
    "question": "Which spoken are spoken by only one country in republic governments ?",
    "question_toks": [
      "Which",
      "spoken",
      "are",
      "spoken",
      "by",
      "only",
      "one",
      "country",
      "in",
      "republic",
      "governments",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.GovernmentForm",
      "=",
      "``",
      "Republic",
      "''",
      "GROUP",
      "BY",
      "T2.Language",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      "=",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "governmentform",
      "=",
      "value",
      "group",
      "by",
      "t2",
      ".",
      "language",
      "having",
      "count",
      "(",
      "*",
      ")",
      "=",
      "value"
    ],
    "question": "What spoken are only used by a single country with a republic government ?",
    "question_toks": [
      "What",
      "spoken",
      "are",
      "only",
      "used",
      "by",
      "a",
      "single",
      "country",
      "with",
      "a",
      "republic",
      "government",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [
        [
          false,
          2,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "T1.Population",
      "FROM",
      "city",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.CountryCode",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "ORDER",
      "BY",
      "T1.Population",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "population",
      "from",
      "city",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countrycode",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the metropolitan with the largest population that uses English .",
    "question_toks": [
      "Find",
      "the",
      "metropolitan",
      "with",
      "the",
      "largest",
      "population",
      "that",
      "uses",
      "English",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "T1.Population",
      "FROM",
      "city",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.CountryCode",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "ORDER",
      "BY",
      "T1.Population",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t1",
      ".",
      "population",
      "from",
      "city",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "countrycode",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "order",
      "by",
      "t1",
      ".",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the most populace place that speaks English ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "most",
      "populace",
      "place",
      "that",
      "speaks",
      "English",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the name , population and expected life length of asian country with the largest part ?",
    "question_toks": [
      "Find",
      "the",
      "name",
      ",",
      "population",
      "and",
      "expected",
      "life",
      "length",
      "of",
      "asian",
      "country",
      "with",
      "the",
      "largest",
      "part",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "Population",
      ",",
      "LifeExpectancy",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "lifeexpectancy",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the name , population , and life expectancy of the largest Asian place by land ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      ",",
      "population",
      ",",
      "and",
      "life",
      "expectancy",
      "of",
      "the",
      "largest",
      "Asian",
      "place",
      "by",
      "land",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      ")"
    ],
    "question": "What is average life expectancy in the places where English is not the official language ?",
    "question_toks": [
      "What",
      "is",
      "average",
      "life",
      "expectancy",
      "in",
      "the",
      "places",
      "where",
      "English",
      "is",
      "not",
      "the",
      "official",
      "language",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      ")"
    ],
    "question": "Give the mean living expectancy of countries in which English is not the official language .",
    "question_toks": [
      "Give",
      "the",
      "mean",
      "living",
      "expectancy",
      "of",
      "countries",
      "in",
      "which",
      "English",
      "is",
      "not",
      "the",
      "official",
      "language",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "What is the total number of persons living in the nations that do not use English ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "persons",
      "living",
      "in",
      "the",
      "nations",
      "that",
      "do",
      "not",
      "use",
      "English",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T2.Language",
      "=",
      "``",
      "English",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "How many who live in countries that do not speak English ?",
    "question_toks": [
      "How",
      "many",
      "who",
      "live",
      "in",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.HeadOfState",
      "=",
      "``",
      "Beatrix",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "headofstate",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "What is the official spoken spoken in the country whose head of state is Beatrix ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "official",
      "spoken",
      "spoken",
      "in",
      "the",
      "country",
      "whose",
      "head",
      "of",
      "state",
      "is",
      "Beatrix",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Beatrix\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "T2.Language",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "T1.HeadOfState",
      "=",
      "``",
      "Beatrix",
      "''",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "language",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "t1",
      ".",
      "headofstate",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "What is the official language used in the land the name of whose head of state is Beatrix .",
    "question_toks": [
      "What",
      "is",
      "the",
      "official",
      "language",
      "used",
      "in",
      "the",
      "land",
      "the",
      "name",
      "of",
      "whose",
      "head",
      "of",
      "state",
      "is",
      "Beatrix",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          "\"Beatrix\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "IndepYear",
      "<",
      "1930",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "indepyear",
      "<",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "What is the total number of unique official languages spoken in the places that are founded before 1930 ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "unique",
      "official",
      "languages",
      "spoken",
      "in",
      "the",
      "places",
      "that",
      "are",
      "founded",
      "before",
      "1930",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1930.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "T2.Language",
      ")",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "WHERE",
      "IndepYear",
      "<",
      "1930",
      "AND",
      "T2.IsOfficial",
      "=",
      "``",
      "T",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "t2",
      ".",
      "language",
      ")",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "where",
      "indepyear",
      "<",
      "value",
      "and",
      "t2",
      ".",
      "isofficial",
      "=",
      "value"
    ],
    "question": "For the countries founded before 1930 , what is the total number of distinct official english ?",
    "question_toks": [
      "For",
      "the",
      "countries",
      "founded",
      "before",
      "1930",
      ",",
      "what",
      "is",
      "the",
      "total",
      "number",
      "of",
      "distinct",
      "official",
      "english",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              13,
              false
            ],
            null
          ],
          1930.0,
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "SurfaceArea",
      ">",
      "(",
      "SELECT",
      "min",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Europe",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "surfacearea",
      ">",
      "(",
      "select",
      "min",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "What are the countries that have greater surface area than any place in Europe ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "countries",
      "that",
      "have",
      "greater",
      "surface",
      "area",
      "than",
      "any",
      "place",
      "in",
      "Europe",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Europe\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "SurfaceArea",
      ">",
      "(",
      "SELECT",
      "min",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Europe",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "surfacearea",
      ">",
      "(",
      "select",
      "min",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "Which countries have greater one than that of any country in Europe ?",
    "question_toks": [
      "Which",
      "countries",
      "have",
      "greater",
      "one",
      "than",
      "that",
      "of",
      "any",
      "country",
      "in",
      "Europe",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      12,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Europe\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      "AND",
      "population",
      "<",
      "(",
      "SELECT",
      "max",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      "<",
      "(",
      "select",
      "max",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "What are the African countries that have a population less than any place in Asia ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "African",
      "countries",
      "that",
      "have",
      "a",
      "population",
      "less",
      "than",
      "any",
      "place",
      "in",
      "Asia",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Asia\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      "AND",
      "population",
      "<",
      "(",
      "SELECT",
      "min",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      "<",
      "(",
      "select",
      "min",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "Which African places have a smaller population than that of any country in Asia ?",
    "question_toks": [
      "Which",
      "African",
      "places",
      "have",
      "a",
      "smaller",
      "population",
      "than",
      "that",
      "of",
      "any",
      "country",
      "in",
      "Asia",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Africa\"",
          null
        ],
        "and",
        [
          false,
          4,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Asia\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "AND",
      "population",
      ">",
      "(",
      "SELECT",
      "max",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      ">",
      "(",
      "select",
      "max",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "Which Asian countries have a group that is larger than any country in Africa ?",
    "question_toks": [
      "Which",
      "Asian",
      "countries",
      "have",
      "a",
      "group",
      "that",
      "is",
      "larger",
      "than",
      "any",
      "country",
      "in",
      "Africa",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Africa\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Asia",
      "''",
      "AND",
      "population",
      ">",
      "(",
      "SELECT",
      "min",
      "(",
      "population",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "Africa",
      "''",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      ">",
      "(",
      "select",
      "min",
      "(",
      "population",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      ")"
    ],
    "question": "What are the Asian places which have a population larger than that of any country in Africa ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "Asian",
      "places",
      "which",
      "have",
      "a",
      "population",
      "larger",
      "than",
      "that",
      "of",
      "any",
      "country",
      "in",
      "Africa",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  2,
                  [
                    0,
                    [
                      0,
                      14,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    10,
                    false
                  ],
                  null
                ],
                "\"Africa\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks": [
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "What are the place codes for countries that do not speak English ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "place",
      "codes",
      "for",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks": [
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "Return the way codes for countries that do not speak English .",
    "question_toks": [
      "Return",
      "the",
      "way",
      "codes",
      "for",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question": "What are the country codes of countries where who use languages other than English ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "country",
      "codes",
      "of",
      "countries",
      "where",
      "who",
      "use",
      "languages",
      "other",
      "than",
      "English",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "!",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "!",
      "=",
      "value"
    ],
    "question": "Give the way codes for countries in which people speak langauges that are not English .",
    "question_toks": [
      "Give",
      "the",
      "way",
      "codes",
      "for",
      "countries",
      "in",
      "which",
      "people",
      "speak",
      "langauges",
      "that",
      "are",
      "not",
      "English",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"English\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks": [
      "SELECT",
      "Code",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "!",
      "=",
      "``",
      "Republic",
      "''",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "code",
      "from",
      "country",
      "where",
      "governmentform",
      "!",
      "=",
      "value",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "What are the coding of the countries that do not speak English and whose government forms are not Republic ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "coding",
      "of",
      "the",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "and",
      "whose",
      "government",
      "forms",
      "are",
      "not",
      "Republic",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "query_toks": [
      "SELECT",
      "Code",
      "FROM",
      "country",
      "WHERE",
      "GovernmentForm",
      "!",
      "=",
      "``",
      "Republic",
      "''",
      "EXCEPT",
      "SELECT",
      "CountryCode",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "English",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "code",
      "from",
      "country",
      "where",
      "governmentform",
      "!",
      "=",
      "value",
      "except",
      "select",
      "countrycode",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value"
    ],
    "question": "Return the coding of countries that do not speak English and do not have Republics for governments .",
    "question_toks": [
      "Return",
      "the",
      "coding",
      "of",
      "countries",
      "that",
      "do",
      "not",
      "speak",
      "English",
      "and",
      "do",
      "not",
      "have",
      "Republics",
      "for",
      "governments",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  23,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ],
            "\"English\"",
            null
          ]
        ]
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              19,
              false
            ],
            null
          ],
          "\"Republic\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "city",
      "AS",
      "T2",
      "ON",
      "T2.CountryCode",
      "=",
      "T1.Code",
      "WHERE",
      "T1.Continent",
      "=",
      "'Europe",
      "'",
      "AND",
      "T1.Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T3.Name",
      "FROM",
      "country",
      "AS",
      "T3",
      "JOIN",
      "countrylanguage",
      "AS",
      "T4",
      "ON",
      "T3.Code",
      "=",
      "T4.CountryCode",
      "WHERE",
      "T4.IsOfficial",
      "=",
      "'T",
      "'",
      "AND",
      "T4.Language",
      "=",
      "'English",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "countrycode",
      "=",
      "t1",
      ".",
      "code",
      "where",
      "t1",
      ".",
      "continent",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t3",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t3",
      "join",
      "countrylanguage",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "code",
      "=",
      "t4",
      ".",
      "countrycode",
      "where",
      "t4",
      ".",
      "isofficial",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "Which localities are in European countries where English is not the official language ?",
    "question_toks": [
      "Which",
      "localities",
      "are",
      "in",
      "European",
      "countries",
      "where",
      "English",
      "is",
      "not",
      "the",
      "official",
      "language",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T2.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "city",
      "AS",
      "T2",
      "ON",
      "T2.CountryCode",
      "=",
      "T1.Code",
      "WHERE",
      "T1.Continent",
      "=",
      "'Europe",
      "'",
      "AND",
      "T1.Name",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T3.Name",
      "FROM",
      "country",
      "AS",
      "T3",
      "JOIN",
      "countrylanguage",
      "AS",
      "T4",
      "ON",
      "T3.Code",
      "=",
      "T4.CountryCode",
      "WHERE",
      "T4.IsOfficial",
      "=",
      "'T",
      "'",
      "AND",
      "T4.Language",
      "=",
      "'English",
      "'",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t2",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "city",
      "as",
      "t2",
      "on",
      "t2",
      ".",
      "countrycode",
      "=",
      "t1",
      ".",
      "code",
      "where",
      "t1",
      ".",
      "continent",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "name",
      "not",
      "in",
      "(",
      "select",
      "t3",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t3",
      "join",
      "countrylanguage",
      "as",
      "t4",
      "on",
      "t3",
      ".",
      "code",
      "=",
      "t4",
      ".",
      "countrycode",
      "where",
      "t4",
      ".",
      "isofficial",
      "=",
      "value",
      "and",
      "t4",
      ".",
      "language",
      "=",
      "value",
      ")"
    ],
    "question": "What are the names of cities in Europe for which English is not the official speak ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "cities",
      "in",
      "Europe",
      "for",
      "which",
      "English",
      "is",
      "not",
      "the",
      "official",
      "speak",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          true,
          8,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    23,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  2
                ],
                [
                  "table_unit",
                  3
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      9,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": [
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ],
                "\"T\"",
                null
              ],
              "and",
              [
                false,
                2,
                [
                  0,
                  [
                    0,
                    24,
                    false
                  ],
                  null
                ],
                "\"English\"",
                null
              ]
            ]
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T3.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "JOIN",
      "city",
      "AS",
      "T3",
      "ON",
      "T1.Code",
      "=",
      "T3.CountryCode",
      "WHERE",
      "T2.IsOfficial",
      "=",
      "'T",
      "'",
      "AND",
      "T2.Language",
      "=",
      "'Chinese",
      "'",
      "AND",
      "T1.Continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t3",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "join",
      "city",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t3",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "continent",
      "=",
      "value"
    ],
    "question": "Whic`h unique cities are in Asian countries where Chinese is the official english ?",
    "question_toks": [
      "Whic`h",
      "unique",
      "cities",
      "are",
      "in",
      "Asian",
      "countries",
      "where",
      "Chinese",
      "is",
      "the",
      "official",
      "english",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T3.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "JOIN",
      "city",
      "AS",
      "T3",
      "ON",
      "T1.Code",
      "=",
      "T3.CountryCode",
      "WHERE",
      "T2.IsOfficial",
      "=",
      "'T",
      "'",
      "AND",
      "T2.Language",
      "=",
      "'Chinese",
      "'",
      "AND",
      "T1.Continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t3",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "join",
      "city",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t3",
      ".",
      "countrycode",
      "where",
      "t2",
      ".",
      "isofficial",
      "=",
      "value",
      "and",
      "t2",
      ".",
      "language",
      "=",
      "value",
      "and",
      "t1",
      ".",
      "continent",
      "=",
      "value"
    ],
    "question": "Return the different names of cities that are in Asia and for which Chinese is the official speak .",
    "question_toks": [
      "Return",
      "the",
      "different",
      "names",
      "of",
      "cities",
      "that",
      "are",
      "in",
      "Asia",
      "and",
      "for",
      "which",
      "Chinese",
      "is",
      "the",
      "official",
      "speak",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              25,
              false
            ],
            null
          ],
          "\"T\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Chinese\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      ",",
      "IndepYear",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "surfacearea",
      ",",
      "indepyear",
      "from",
      "country",
      "order",
      "by",
      "population",
      "limit",
      "value"
    ],
    "question": "What are the name , independence year , and surface area of the place with the smallest population ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "name",
      ",",
      "independence",
      "year",
      ",",
      "and",
      "surface",
      "area",
      "of",
      "the",
      "place",
      "with",
      "the",
      "smallest",
      "population",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      ",",
      "IndepYear",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "surfacearea",
      ",",
      "indepyear",
      "from",
      "country",
      "order",
      "by",
      "population",
      "limit",
      "value"
    ],
    "question": "Give the name , year of independence , and surface area of the world that has the lowest demographic .",
    "question_toks": [
      "Give",
      "the",
      "name",
      ",",
      "year",
      "of",
      "independence",
      ",",
      "and",
      "surface",
      "area",
      "of",
      "the",
      "world",
      "that",
      "has",
      "the",
      "lowest",
      "demographic",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "population",
      ",",
      "HeadOfState",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "headofstate",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the population , name and leader of the country with the largest part ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "population",
      ",",
      "name",
      "and",
      "leader",
      "of",
      "the",
      "country",
      "with",
      "the",
      "largest",
      "part",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "population",
      ",",
      "HeadOfState",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "population",
      ",",
      "headofstate",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the name , size , and head of state for the country that has the largest area .",
    "question_toks": [
      "Give",
      "the",
      "name",
      ",",
      "size",
      ",",
      "and",
      "head",
      "of",
      "state",
      "for",
      "the",
      "country",
      "that",
      "has",
      "the",
      "largest",
      "area",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "T2.Language",
      ")",
      ",",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "t2",
      ".",
      "language",
      ")",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Return the place name and the numbers of languages spoken for each country that speaks at least 3 languages .",
    "question_toks": [
      "Return",
      "the",
      "place",
      "name",
      "and",
      "the",
      "numbers",
      "of",
      "languages",
      "spoken",
      "for",
      "each",
      "country",
      "that",
      "speaks",
      "at",
      "least",
      "3",
      "languages",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "T2.Language",
      ")",
      ",",
      "T1.Name",
      "FROM",
      "country",
      "AS",
      "T1",
      "JOIN",
      "countrylanguage",
      "AS",
      "T2",
      "ON",
      "T1.Code",
      "=",
      "T2.CountryCode",
      "GROUP",
      "BY",
      "T1.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "t2",
      ".",
      "language",
      ")",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "country",
      "as",
      "t1",
      "join",
      "countrylanguage",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "code",
      "=",
      "t2",
      ".",
      "countrycode",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the names of countries that speak more than 2 ways , as well as how many languages they speak ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "countries",
      "that",
      "speak",
      "more",
      "than",
      "2",
      "ways",
      ",",
      "as",
      "well",
      "as",
      "how",
      "many",
      "languages",
      "they",
      "speak",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "District",
      "FROM",
      "city",
      "WHERE",
      "Population",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "Population",
      ")",
      "FROM",
      "city",
      ")",
      "GROUP",
      "BY",
      "District"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "district",
      "from",
      "city",
      "where",
      "population",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "population",
      ")",
      "from",
      "city",
      ")",
      "group",
      "by",
      "district"
    ],
    "question": "Find the number of cities in each neighborhood whose population is greater than the average population of cities ?",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "cities",
      "in",
      "each",
      "neighborhood",
      "whose",
      "population",
      "is",
      "greater",
      "than",
      "the",
      "average",
      "population",
      "of",
      "cities",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      5,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "District",
      "FROM",
      "city",
      "WHERE",
      "Population",
      ">",
      "(",
      "SELECT",
      "avg",
      "(",
      "Population",
      ")",
      "FROM",
      "city",
      ")",
      "GROUP",
      "BY",
      "District"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "district",
      "from",
      "city",
      "where",
      "population",
      ">",
      "(",
      "select",
      "avg",
      "(",
      "population",
      ")",
      "from",
      "city",
      ")",
      "group",
      "by",
      "district"
    ],
    "question": "How many cities in each district have a population that is above the average most across all cities ?",
    "question_toks": [
      "How",
      "many",
      "cities",
      "in",
      "each",
      "district",
      "have",
      "a",
      "population",
      "that",
      "is",
      "above",
      "the",
      "average",
      "most",
      "across",
      "all",
      "cities",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      5,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "GovernmentForm",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "HAVING",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      ">",
      "72"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "governmentform",
      "from",
      "country",
      "group",
      "by",
      "governmentform",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ">",
      "value"
    ],
    "question": "Find the government form name and total population for each government form whose average living expectancy is longer than 72 .",
    "question_toks": [
      "Find",
      "the",
      "government",
      "form",
      "name",
      "and",
      "total",
      "population",
      "for",
      "each",
      "government",
      "form",
      "whose",
      "average",
      "living",
      "expectancy",
      "is",
      "longer",
      "than",
      "72",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "GovernmentForm",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "GovernmentForm",
      "HAVING",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      ">",
      "72"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "governmentform",
      "from",
      "country",
      "group",
      "by",
      "governmentform",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ">",
      "value"
    ],
    "question": "What are the different government forms and what is the total population of each for government forms that have an average lifetime expectancy greater than 72 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "government",
      "forms",
      "and",
      "what",
      "is",
      "the",
      "total",
      "population",
      "of",
      "each",
      "for",
      "government",
      "forms",
      "that",
      "have",
      "an",
      "average",
      "lifetime",
      "expectancy",
      "greater",
      "than",
      "72",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          19,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                19,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      ",",
      "Continent",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "HAVING",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "<",
      "72"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ",",
      "continent",
      "from",
      "country",
      "group",
      "by",
      "continent",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "<",
      "value"
    ],
    "question": "Find the average life expectancy and total citizen for each continent where the average life expectancy is shorter than 72 ?",
    "question_toks": [
      "Find",
      "the",
      "average",
      "life",
      "expectancy",
      "and",
      "total",
      "citizen",
      "for",
      "each",
      "continent",
      "where",
      "the",
      "average",
      "life",
      "expectancy",
      "is",
      "shorter",
      "than",
      "72",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      ",",
      "Continent",
      "FROM",
      "country",
      "GROUP",
      "BY",
      "Continent",
      "HAVING",
      "avg",
      "(",
      "LifeExpectancy",
      ")",
      "<",
      "72"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      ",",
      "continent",
      "from",
      "country",
      "group",
      "by",
      "continent",
      "having",
      "avg",
      "(",
      "lifeexpectancy",
      ")",
      "<",
      "value"
    ],
    "question": "What are the different continental and the total popuation and average life expectancy corresponding to each , for continents that have an average life expectancy less than 72 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "different",
      "continental",
      "and",
      "the",
      "total",
      "popuation",
      "and",
      "average",
      "life",
      "expectancy",
      "corresponding",
      "to",
      "each",
      ",",
      "for",
      "continents",
      "that",
      "have",
      "an",
      "average",
      "life",
      "expectancy",
      "less",
      "than",
      "72",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [
        [
          false,
          4,
          [
            0,
            [
              5,
              15,
              false
            ],
            null
          ],
          72.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "surfacearea",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are the names and zones of countries with the top 5 largest area ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "zones",
      "of",
      "countries",
      "with",
      "the",
      "top",
      "5",
      "largest",
      "area",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 5,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query_toks": [
      "SELECT",
      "Name",
      ",",
      "SurfaceArea",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "SurfaceArea",
      "DESC",
      "LIMIT",
      "5"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "surfacearea",
      "from",
      "country",
      "order",
      "by",
      "surfacearea",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the names and surface areas of the 5 largest jurisdictions .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "and",
      "surface",
      "areas",
      "of",
      "the",
      "5",
      "largest",
      "jurisdictions",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 5,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "DESC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question": "What are names of places with the top 3 largest population ?",
    "question_toks": [
      "What",
      "are",
      "names",
      "of",
      "places",
      "with",
      "the",
      "top",
      "3",
      "largest",
      "population",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 3,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "DESC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the names of the 3 most common countries .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "the",
      "3",
      "most",
      "common",
      "countries",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 3,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "ASC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "asc",
      "limit",
      "value"
    ],
    "question": "What are the names of the nations with the 3 lowest est ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "nations",
      "with",
      "the",
      "3",
      "lowest",
      "est",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 3,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "ORDER",
      "BY",
      "Population",
      "ASC",
      "LIMIT",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "order",
      "by",
      "population",
      "asc",
      "limit",
      "value"
    ],
    "question": "Return the names of the 3 places with the fewest people .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "the",
      "3",
      "places",
      "with",
      "the",
      "fewest",
      "people",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 3,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "how many places are in Asia ?",
    "question_toks": [
      "how",
      "many",
      "places",
      "are",
      "in",
      "Asia",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Asia",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value"
    ],
    "question": "Count the number of places in Asia .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "places",
      "in",
      "Asia",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Asia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Europe",
      "''",
      "AND",
      "Population",
      "=",
      "``",
      "80000",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      "=",
      "value"
    ],
    "question": "What are the names of the places that are in the continent of Europe and have a population of 80000 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "places",
      "that",
      "are",
      "in",
      "the",
      "continent",
      "of",
      "Europe",
      "and",
      "have",
      "a",
      "population",
      "of",
      "80000",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"80000\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "country",
      "WHERE",
      "continent",
      "=",
      "``",
      "Europe",
      "''",
      "AND",
      "Population",
      "=",
      "``",
      "80000",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "population",
      "=",
      "value"
    ],
    "question": "Give the names of where that are in Europe and have a population equal to 80000 .",
    "question_toks": [
      "Give",
      "the",
      "names",
      "of",
      "where",
      "that",
      "are",
      "in",
      "Europe",
      "and",
      "have",
      "a",
      "population",
      "equal",
      "to",
      "80000",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"Europe\"",
          null
        ],
        "and",
        [
          false,
          2,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"80000\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "North",
      "America",
      "''",
      "AND",
      "SurfaceArea",
      ">",
      "3000"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "surfacearea",
      ">",
      "value"
    ],
    "question": "What is the total population and average area of countries in the mainland of North America whose area is bigger than 3000 \uff1f",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "population",
      "and",
      "average",
      "area",
      "of",
      "countries",
      "in",
      "the",
      "mainland",
      "of",
      "North",
      "America",
      "whose",
      "area",
      "is",
      "bigger",
      "than",
      "3000",
      "\uff1f"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"North America\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
    "query_toks": [
      "SELECT",
      "sum",
      "(",
      "Population",
      ")",
      ",",
      "avg",
      "(",
      "SurfaceArea",
      ")",
      "FROM",
      "country",
      "WHERE",
      "Continent",
      "=",
      "``",
      "North",
      "America",
      "''",
      "AND",
      "SurfaceArea",
      ">",
      "3000"
    ],
    "query_toks_no_value": [
      "select",
      "sum",
      "(",
      "population",
      ")",
      ",",
      "avg",
      "(",
      "surfacearea",
      ")",
      "from",
      "country",
      "where",
      "continent",
      "=",
      "value",
      "and",
      "surfacearea",
      ">",
      "value"
    ],
    "question": "Give the total population and average square area corresponding to countries in Noth America that have a surface area greater than 3000 .",
    "question_toks": [
      "Give",
      "the",
      "total",
      "population",
      "and",
      "average",
      "square",
      "area",
      "corresponding",
      "to",
      "countries",
      "in",
      "Noth",
      "America",
      "that",
      "have",
      "a",
      "surface",
      "area",
      "greater",
      "than",
      "3000",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            4,
            [
              0,
              [
                0,
                14,
                false
              ],
              null
            ]
          ],
          [
            5,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"North America\"",
          null
        ],
        "and",
        [
          false,
          3,
          [
            0,
            [
              0,
              12,
              false
            ],
            null
          ],
          3000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "city",
      "WHERE",
      "Population",
      "BETWEEN",
      "160000",
      "AND",
      "900000"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "city",
      "where",
      "population",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "What are the cities whose part is between 160000 and 900000 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "cities",
      "whose",
      "part",
      "is",
      "between",
      "160000",
      "and",
      "900000",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          160000.0,
          900000.0
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "city",
      "WHERE",
      "Population",
      "BETWEEN",
      "160000",
      "AND",
      "90000"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "city",
      "where",
      "population",
      "between",
      "value",
      "and",
      "value"
    ],
    "question": "Return the names of localities that have a population between 160000 and 900000 .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "localities",
      "that",
      "have",
      "a",
      "population",
      "between",
      "160000",
      "and",
      "900000",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          1,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          160000.0,
          90000.0
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      "FROM",
      "countrylanguage",
      "GROUP",
      "BY",
      "LANGUAGE",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      "from",
      "countrylanguage",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which spoken is spoken by the largest number of countries ?",
    "question_toks": [
      "Which",
      "spoken",
      "is",
      "spoken",
      "by",
      "the",
      "largest",
      "number",
      "of",
      "countries",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      "FROM",
      "countrylanguage",
      "GROUP",
      "BY",
      "LANGUAGE",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      "from",
      "countrylanguage",
      "group",
      "by",
      "language",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the language that is spoken in the most jurisdictions .",
    "question_toks": [
      "Give",
      "the",
      "language",
      "that",
      "is",
      "spoken",
      "in",
      "the",
      "most",
      "jurisdictions",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          24,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "CountryCode",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "group",
      "by",
      "countrycode"
    ],
    "question": "What is the speak spoken by the largest percentage of people in each country ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "speak",
      "spoken",
      "by",
      "the",
      "largest",
      "percentage",
      "of",
      "people",
      "in",
      "each",
      "country",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "LANGUAGE",
      ",",
      "CountryCode",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "language",
      ",",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "group",
      "by",
      "countrycode"
    ],
    "question": "What are the country codes of the different countries , and what are the languages spoken by the greatest percentage of persons for each ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "country",
      "codes",
      "of",
      "the",
      "different",
      "countries",
      ",",
      "and",
      "what",
      "are",
      "the",
      "languages",
      "spoken",
      "by",
      "the",
      "greatest",
      "percentage",
      "of",
      "persons",
      "for",
      "each",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "Spanish",
      "''",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value",
      "group",
      "by",
      "countrycode"
    ],
    "question": "What is the total number of countries where Spanish is spoken by the largest percent of people ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "total",
      "number",
      "of",
      "countries",
      "where",
      "Spanish",
      "is",
      "spoken",
      "by",
      "the",
      "largest",
      "percent",
      "of",
      "people",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "Spanish",
      "''",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value",
      "group",
      "by",
      "countrycode"
    ],
    "question": "Count the number of where for which Spanish is the predominantly spoken language .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "where",
      "for",
      "which",
      "Spanish",
      "is",
      "the",
      "predominantly",
      "spoken",
      "language",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "CountryCode",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "Spanish",
      "''",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value",
      "group",
      "by",
      "countrycode"
    ],
    "question": "What are the coding of countries where Spanish is spoken by the largest percentage of people ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "coding",
      "of",
      "countries",
      "where",
      "Spanish",
      "is",
      "spoken",
      "by",
      "the",
      "largest",
      "percentage",
      "of",
      "people",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "query_toks": [
      "SELECT",
      "CountryCode",
      ",",
      "max",
      "(",
      "Percentage",
      ")",
      "FROM",
      "countrylanguage",
      "WHERE",
      "LANGUAGE",
      "=",
      "``",
      "Spanish",
      "''",
      "GROUP",
      "BY",
      "CountryCode"
    ],
    "query_toks_no_value": [
      "select",
      "countrycode",
      ",",
      "max",
      "(",
      "percentage",
      ")",
      "from",
      "countrylanguage",
      "where",
      "language",
      "=",
      "value",
      "group",
      "by",
      "countrycode"
    ],
    "question": "Return the codes of where for which Spanish is the predominantly spoken language .",
    "question_toks": [
      "Return",
      "the",
      "codes",
      "of",
      "where",
      "for",
      "which",
      "Spanish",
      "is",
      "the",
      "predominantly",
      "spoken",
      "language",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [
        [
          0,
          23,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              24,
              false
            ],
            null
          ],
          "\"Spanish\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT count(*) FROM conductor",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "conductor"
    ],
    "question": "How many conducting are there ?",
    "question_toks": [
      "How",
      "many",
      "conducting",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT count(*) FROM conductor",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "conductor"
    ],
    "question": "Count the number of conducting .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "conducting",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Age ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question": "List the names of conducting in ascending order of age .",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "conducting",
      "in",
      "ascending",
      "order",
      "of",
      "age",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Age ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Age",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "age",
      "asc"
    ],
    "question": "What are the names of conducting , ordered by age ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conducting",
      ",",
      "ordered",
      "by",
      "age",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question": "What are the names of conducting whose nationalities are not \" USA \" ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conducting",
      "whose",
      "nationalities",
      "are",
      "not",
      "\"",
      "USA",
      "\"",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "WHERE",
      "Nationality",
      "!",
      "=",
      "'USA",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "where",
      "nationality",
      "!",
      "=",
      "value"
    ],
    "question": "Return the names of conducting that do not have the nationality \" USA \" .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "conducting",
      "that",
      "do",
      "not",
      "have",
      "the",
      "nationality",
      "\"",
      "USA",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ],
          "\"USA\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "ORDER",
      "BY",
      "Year_of_Founded",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "order",
      "by",
      "year_of_founded",
      "desc"
    ],
    "question": "What are the recorded companies of orchestras in descending order of years in which they were founded ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "recorded",
      "companies",
      "of",
      "orchestras",
      "in",
      "descending",
      "order",
      "of",
      "years",
      "in",
      "which",
      "they",
      "were",
      "founded",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "ORDER",
      "BY",
      "Year_of_Founded",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "order",
      "by",
      "year_of_founded",
      "desc"
    ],
    "question": "Return the whole companies of orchestras , sorted descending by the years in which they were founded .",
    "question_toks": [
      "Return",
      "the",
      "whole",
      "companies",
      "of",
      "orchestras",
      ",",
      "sorted",
      "descending",
      "by",
      "the",
      "years",
      "in",
      "which",
      "they",
      "were",
      "founded",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT avg(Attendance) FROM SHOW",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Attendance",
      ")",
      "FROM",
      "SHOW"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "attendance",
      ")",
      "from",
      "show"
    ],
    "question": "What is the average attended of shows ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "attended",
      "of",
      "shows",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT avg(Attendance) FROM SHOW",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "Attendance",
      ")",
      "FROM",
      "SHOW"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "attendance",
      ")",
      "from",
      "show"
    ],
    "question": "Return the average crowd across all shows .",
    "question_toks": [
      "Return",
      "the",
      "average",
      "crowd",
      "across",
      "all",
      "shows",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "performance",
      "WHERE",
      "TYPE",
      "!",
      "=",
      "``",
      "Live",
      "final",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "performance",
      "where",
      "type",
      "!",
      "=",
      "value"
    ],
    "question": "What are the maximum and minimum share of performing whose type is not \" Live final \" .",
    "question_toks": [
      "What",
      "are",
      "the",
      "maximum",
      "and",
      "minimum",
      "share",
      "of",
      "performing",
      "whose",
      "type",
      "is",
      "not",
      "\"",
      "Live",
      "final",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Live final\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "SHARE",
      ")",
      ",",
      "min",
      "(",
      "SHARE",
      ")",
      "FROM",
      "performance",
      "WHERE",
      "TYPE",
      "!",
      "=",
      "``",
      "Live",
      "final",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "share",
      ")",
      ",",
      "min",
      "(",
      "share",
      ")",
      "from",
      "performance",
      "where",
      "type",
      "!",
      "=",
      "value"
    ],
    "question": "Return the maximum and minimum shares for performances that do not have the kind \" Live final \" .",
    "question_toks": [
      "Return",
      "the",
      "maximum",
      "and",
      "minimum",
      "shares",
      "for",
      "performances",
      "that",
      "do",
      "not",
      "have",
      "the",
      "kind",
      "\"",
      "Live",
      "final",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ],
          [
            2,
            [
              0,
              [
                0,
                18,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              14,
              false
            ],
            null
          ],
          "\"Live final\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT count(DISTINCT Nationality) FROM conductor",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "conductor"
    ],
    "question": "How many different ethnic do conductors have ?",
    "question_toks": [
      "How",
      "many",
      "different",
      "ethnic",
      "do",
      "conductors",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                4,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT count(DISTINCT Nationality) FROM conductor",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "Nationality",
      ")",
      "FROM",
      "conductor"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "nationality",
      ")",
      "from",
      "conductor"
    ],
    "question": "Count the number of different nationalities of conducting .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "different",
      "nationalities",
      "of",
      "conducting",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                4,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc"
    ],
    "question": "List names of conducting in descending order of years of work .",
    "question_toks": [
      "List",
      "names",
      "of",
      "conducting",
      "in",
      "descending",
      "order",
      "of",
      "years",
      "of",
      "work",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc"
    ],
    "question": "What are the names of conductors , sorted descending by the number of years they have gone ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      ",",
      "sorted",
      "descending",
      "by",
      "the",
      "number",
      "of",
      "years",
      "they",
      "have",
      "gone",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the name of the conducting with the most years of work .",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "the",
      "conducting",
      "with",
      "the",
      "most",
      "years",
      "of",
      "work",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "conductor",
      "ORDER",
      "BY",
      "Year_of_Work",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "conductor",
      "order",
      "by",
      "year_of_work",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the conducting who has worked the greatest number of years ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "conducting",
      "who",
      "has",
      "worked",
      "the",
      "greatest",
      "number",
      "of",
      "years",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "T2.Orchestra",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "orchestra",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id"
    ],
    "question": "Show the names of conductors and the symphonies they have conducted .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "conductors",
      "and",
      "the",
      "symphonies",
      "they",
      "have",
      "conducted",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "T2.Orchestra",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "orchestra",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id"
    ],
    "question": "What are the names of conductors as well as the corresonding orchestras that they have performed ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conductors",
      "as",
      "well",
      "as",
      "the",
      "corresonding",
      "orchestras",
      "that",
      "they",
      "have",
      "performed",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "GROUP",
      "BY",
      "T2.Conductor_ID",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "group",
      "by",
      "t2",
      ".",
      "conductor_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Show the names of conducting that have conducted more than one choral .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "conducting",
      "that",
      "have",
      "conducted",
      "more",
      "than",
      "one",
      "choral",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "GROUP",
      "BY",
      "T2.Conductor_ID",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "group",
      "by",
      "t2",
      ".",
      "conductor_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the names of conducting who have conducted at more than one orchestra ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conducting",
      "who",
      "have",
      "conducted",
      "at",
      "more",
      "than",
      "one",
      "orchestra",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "GROUP",
      "BY",
      "T2.Conductor_ID",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "group",
      "by",
      "t2",
      ".",
      "conductor_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Show the name of the conducting that has conducted the most number of orchestras .",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "the",
      "conducting",
      "that",
      "has",
      "conducted",
      "the",
      "most",
      "number",
      "of",
      "orchestras",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "GROUP",
      "BY",
      "T2.Conductor_ID",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "group",
      "by",
      "t2",
      ".",
      "conductor_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the conducting who has conducted the most symphony ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "conducting",
      "who",
      "has",
      "conducted",
      "the",
      "most",
      "symphony",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2008"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question": "Please show the name of the conducting that has conducted choirs founded after 2008 .",
    "question_toks": [
      "Please",
      "show",
      "the",
      "name",
      "of",
      "the",
      "conducting",
      "that",
      "has",
      "conducted",
      "choirs",
      "founded",
      "after",
      "2008",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "conductor",
      "AS",
      "T1",
      "JOIN",
      "orchestra",
      "AS",
      "T2",
      "ON",
      "T1.Conductor_ID",
      "=",
      "T2.Conductor_ID",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2008"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "conductor",
      "as",
      "t1",
      "join",
      "orchestra",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "conductor_id",
      "=",
      "t2",
      ".",
      "conductor_id",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question": "What are the names of conducting who have conducted orchestras founded after the year 2008 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "conducting",
      "who",
      "have",
      "conducted",
      "orchestras",
      "founded",
      "after",
      "the",
      "year",
      "2008",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2008.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "query_toks": [
      "SELECT",
      "Record_Company",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Record_Company"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company"
    ],
    "question": "Please show the different record companies and the corresponding number of symphonies .",
    "question_toks": [
      "Please",
      "show",
      "the",
      "different",
      "record",
      "companies",
      "and",
      "the",
      "corresponding",
      "number",
      "of",
      "symphonies",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "query_toks": [
      "SELECT",
      "Record_Company",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Record_Company"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company"
    ],
    "question": "How many orchestras does each all company manage ?",
    "question_toks": [
      "How",
      "many",
      "orchestras",
      "does",
      "each",
      "all",
      "company",
      "manage",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "query_toks": [
      "SELECT",
      "Major_Record_Format",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Major_Record_Format",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "major_record_format",
      "from",
      "orchestra",
      "group",
      "by",
      "major_record_format",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc"
    ],
    "question": "Please show the record formats of symphonies in ascending order of count .",
    "question_toks": [
      "Please",
      "show",
      "the",
      "record",
      "formats",
      "of",
      "symphonies",
      "in",
      "ascending",
      "order",
      "of",
      "count",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "query_toks": [
      "SELECT",
      "Major_Record_Format",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Major_Record_Format",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "major_record_format",
      "from",
      "orchestra",
      "group",
      "by",
      "major_record_format",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc"
    ],
    "question": "What are the major record formats of symphony , sorted by their frequency ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "major",
      "record",
      "formats",
      "of",
      "symphony",
      ",",
      "sorted",
      "by",
      "their",
      "frequency",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          11,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Record_Company",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "List the way company shared by the most number of orchestras .",
    "question_toks": [
      "List",
      "the",
      "way",
      "company",
      "shared",
      "by",
      "the",
      "most",
      "number",
      "of",
      "orchestras",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "GROUP",
      "BY",
      "Record_Company",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "group",
      "by",
      "record_company",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the record company used by the greatest number of choirs ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "record",
      "company",
      "used",
      "by",
      "the",
      "greatest",
      "number",
      "of",
      "choirs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          9,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "query_toks": [
      "SELECT",
      "Orchestra",
      "FROM",
      "orchestra",
      "WHERE",
      "Orchestra_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Orchestra_ID",
      "FROM",
      "performance",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "orchestra",
      "from",
      "orchestra",
      "where",
      "orchestra_id",
      "not",
      "in",
      "(",
      "select",
      "orchestra_id",
      "from",
      "performance",
      ")"
    ],
    "question": "List the names of symphonies that have no performance .",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "symphonies",
      "that",
      "have",
      "no",
      "performance",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "query_toks": [
      "SELECT",
      "Orchestra",
      "FROM",
      "orchestra",
      "WHERE",
      "Orchestra_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Orchestra_ID",
      "FROM",
      "performance",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "orchestra",
      "from",
      "orchestra",
      "where",
      "orchestra_id",
      "not",
      "in",
      "(",
      "select",
      "orchestra_id",
      "from",
      "performance",
      ")"
    ],
    "question": "What are the orchestras that do not have any performing ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "orchestras",
      "that",
      "do",
      "not",
      "have",
      "any",
      "performing",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              6,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  2
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      13,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      "<",
      "2003",
      "INTERSECT",
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2003"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      "<",
      "value",
      "intersect",
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question": "Show the record companies shared by choirs founded before 2003 and after 2003 .",
    "question_toks": [
      "Show",
      "the",
      "record",
      "companies",
      "shared",
      "by",
      "choirs",
      "founded",
      "before",
      "2003",
      "and",
      "after",
      "2003",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            2003.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2003.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "query_toks": [
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      "<",
      "2003",
      "INTERSECT",
      "SELECT",
      "Record_Company",
      "FROM",
      "orchestra",
      "WHERE",
      "Year_of_Founded",
      ">",
      "2003"
    ],
    "query_toks_no_value": [
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      "<",
      "value",
      "intersect",
      "select",
      "record_company",
      "from",
      "orchestra",
      "where",
      "year_of_founded",
      ">",
      "value"
    ],
    "question": "What are the record companies that are used by both choirs founded before 2003 and those founded after 2003 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "record",
      "companies",
      "that",
      "are",
      "used",
      "by",
      "both",
      "choirs",
      "founded",
      "before",
      "2003",
      "and",
      "those",
      "founded",
      "after",
      "2003",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  9,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            2003.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          2003.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "orchestra",
      "WHERE",
      "Major_Record_Format",
      "=",
      "``",
      "CD",
      "''",
      "OR",
      "Major_Record_Format",
      "=",
      "``",
      "DVD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "where",
      "major_record_format",
      "=",
      "value",
      "or",
      "major_record_format",
      "=",
      "value"
    ],
    "question": "Find the number of musicians whose record format is \" CD \" or \" DVD \" .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "musicians",
      "whose",
      "record",
      "format",
      "is",
      "\"",
      "CD",
      "\"",
      "or",
      "\"",
      "DVD",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"CD\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"DVD\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "query_toks": [
      "SELECT",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "orchestra",
      "WHERE",
      "Major_Record_Format",
      "=",
      "``",
      "CD",
      "''",
      "OR",
      "Major_Record_Format",
      "=",
      "``",
      "DVD",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "orchestra",
      "where",
      "major_record_format",
      "=",
      "value",
      "or",
      "major_record_format",
      "=",
      "value"
    ],
    "question": "Count the number of symphonies that have CD or DVD as their record format .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "symphonies",
      "that",
      "have",
      "CD",
      "or",
      "DVD",
      "as",
      "their",
      "record",
      "format",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"CD\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              11,
              false
            ],
            null
          ],
          "\"DVD\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "Year_of_Founded",
      "FROM",
      "orchestra",
      "AS",
      "T1",
      "JOIN",
      "performance",
      "AS",
      "T2",
      "ON",
      "T1.Orchestra_ID",
      "=",
      "T2.Orchestra_ID",
      "GROUP",
      "BY",
      "T2.Orchestra_ID",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year_of_founded",
      "from",
      "orchestra",
      "as",
      "t1",
      "join",
      "performance",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "orchestra_id",
      "=",
      "t2",
      ".",
      "orchestra_id",
      "group",
      "by",
      "t2",
      ".",
      "orchestra_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Show the years in which orchestras that have given more than one performing are founded .",
    "question_toks": [
      "Show",
      "the",
      "years",
      "in",
      "which",
      "orchestras",
      "that",
      "have",
      "given",
      "more",
      "than",
      "one",
      "performing",
      "are",
      "founded",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "orchestra",
    "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "Year_of_Founded",
      "FROM",
      "orchestra",
      "AS",
      "T1",
      "JOIN",
      "performance",
      "AS",
      "T2",
      "ON",
      "T1.Orchestra_ID",
      "=",
      "T2.Orchestra_ID",
      "GROUP",
      "BY",
      "T2.Orchestra_ID",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "year_of_founded",
      "from",
      "orchestra",
      "as",
      "t1",
      "join",
      "performance",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "orchestra_id",
      "=",
      "t2",
      ".",
      "orchestra_id",
      "group",
      "by",
      "t2",
      ".",
      "orchestra_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are years of founding for orchestras that have had more than a single performing ?",
    "question_toks": [
      "What",
      "are",
      "years",
      "of",
      "founding",
      "for",
      "orchestras",
      "that",
      "have",
      "had",
      "more",
      "than",
      "a",
      "single",
      "performing",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              13,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          13,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Highschooler",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler"
    ],
    "question": "How many young schoolers are there ?",
    "question_toks": [
      "How",
      "many",
      "young",
      "schoolers",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Highschooler",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler"
    ],
    "question": "Count the number of senior schoolers .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "senior",
      "schoolers",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT name ,  grade FROM Highschooler",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "grade",
      "from",
      "highschooler"
    ],
    "question": "Show the names and grades of each upper schooler .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "and",
      "grades",
      "of",
      "each",
      "upper",
      "schooler",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT name ,  grade FROM Highschooler",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "grade",
      "from",
      "highschooler"
    ],
    "question": "What are the names and honors for each high schooler ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "and",
      "honors",
      "for",
      "each",
      "high",
      "schooler",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler"
    ],
    "question": "Show all the grades of the top schoolers .",
    "question_toks": [
      "Show",
      "all",
      "the",
      "grades",
      "of",
      "the",
      "top",
      "schoolers",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler"
    ],
    "question": "What is the grade of each upper schooler ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "grade",
      "of",
      "each",
      "upper",
      "schooler",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What level is Kyle in ?",
    "question_toks": [
      "What",
      "level",
      "is",
      "Kyle",
      "in",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "Return the grade for the big schooler named Kyle .",
    "question_toks": [
      "Return",
      "the",
      "grade",
      "for",
      "the",
      "big",
      "schooler",
      "named",
      "Kyle",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT name FROM Highschooler WHERE grade  =  10",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value"
    ],
    "question": "Show the names of all up schoolers in grade 10 .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "all",
      "up",
      "schoolers",
      "in",
      "grade",
      "10",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT name FROM Highschooler WHERE grade  =  10",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value"
    ],
    "question": "What are the names of all high schoolers in year 10 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "all",
      "high",
      "schoolers",
      "in",
      "year",
      "10",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "ID",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "Show the ID of the big schooler named Kyle .",
    "question_toks": [
      "Show",
      "the",
      "ID",
      "of",
      "the",
      "big",
      "schooler",
      "named",
      "Kyle",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "ID",
      "FROM",
      "Highschooler",
      "WHERE",
      "name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "highschooler",
      "where",
      "name",
      "=",
      "value"
    ],
    "question": "What is Kyle 's id ?",
    "question_toks": [
      "What",
      "is",
      "Kyle",
      "'s",
      "id",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "9",
      "OR",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value",
      "or",
      "grade",
      "=",
      "value"
    ],
    "question": "How many high schoolers are there in year 9 or 10 ?",
    "question_toks": [
      "How",
      "many",
      "high",
      "schoolers",
      "are",
      "there",
      "in",
      "year",
      "9",
      "or",
      "10",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          9.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "grade",
      "=",
      "9",
      "OR",
      "grade",
      "=",
      "10"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "where",
      "grade",
      "=",
      "value",
      "or",
      "grade",
      "=",
      "value"
    ],
    "question": "Count the number of young schoolers in grades 9 or 10 .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "young",
      "schoolers",
      "in",
      "grades",
      "9",
      "or",
      "10",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          9.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          10.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "query_toks": [
      "SELECT",
      "grade",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "group",
      "by",
      "grade"
    ],
    "question": "Show the number of high schoolers for each class .",
    "question_toks": [
      "Show",
      "the",
      "number",
      "of",
      "high",
      "schoolers",
      "for",
      "each",
      "class",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "query_toks": [
      "SELECT",
      "grade",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "highschooler",
      "group",
      "by",
      "grade"
    ],
    "question": "How many high schoolers are in each age ?",
    "question_toks": [
      "How",
      "many",
      "high",
      "schoolers",
      "are",
      "in",
      "each",
      "age",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which up has the most high schoolers ?",
    "question_toks": [
      "Which",
      "up",
      "has",
      "the",
      "most",
      "high",
      "schoolers",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the grade that has the greatest number of young schoolers .",
    "question_toks": [
      "Return",
      "the",
      "grade",
      "that",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "young",
      "schoolers",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "4"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show me all assignments that have at least 4 students .",
    "question_toks": [
      "Show",
      "me",
      "all",
      "assignments",
      "that",
      "have",
      "at",
      "least",
      "4",
      "students",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "query_toks": [
      "SELECT",
      "grade",
      "FROM",
      "Highschooler",
      "GROUP",
      "BY",
      "grade",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "4"
    ],
    "query_toks_no_value": [
      "select",
      "grade",
      "from",
      "highschooler",
      "group",
      "by",
      "grade",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Which percent have 4 or more high schoolers ?",
    "question_toks": [
      "Which",
      "percent",
      "have",
      "4",
      "or",
      "more",
      "high",
      "schoolers",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          3,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          4.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "query_toks": [
      "SELECT",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "GROUP",
      "BY",
      "student_id"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "group",
      "by",
      "student_id"
    ],
    "question": "Show the semester IDs and numbers of friends corresponding to each .",
    "question_toks": [
      "Show",
      "the",
      "semester",
      "IDs",
      "and",
      "numbers",
      "of",
      "friends",
      "corresponding",
      "to",
      "each",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "query_toks": [
      "SELECT",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "GROUP",
      "BY",
      "student_id"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "group",
      "by",
      "student_id"
    ],
    "question": "How many friendships does each student have ?",
    "question_toks": [
      "How",
      "many",
      "friendships",
      "does",
      "each",
      "student",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id"
    ],
    "question": "Show the names of up school students and their corresponding number of friends .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "up",
      "school",
      "students",
      "and",
      "their",
      "corresponding",
      "number",
      "of",
      "friends",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id"
    ],
    "question": "What are the names of the high schoolers and how many buddies does each have ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "high",
      "schoolers",
      "and",
      "how",
      "many",
      "buddies",
      "does",
      "each",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the far schooler who has the greatest number of friends ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "far",
      "schooler",
      "who",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "friends",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the name of the high school student with the most buddies .",
    "question_toks": [
      "Return",
      "the",
      "name",
      "of",
      "the",
      "high",
      "school",
      "student",
      "with",
      "the",
      "most",
      "buddies",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show the names of senior schoolers who have at least 3 friends .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "senior",
      "schoolers",
      "who",
      "have",
      "at",
      "least",
      "3",
      "friends",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "3"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names of high schoolers who have 3 or more friendships ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "3",
      "or",
      "more",
      "friendships",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          3.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "T3.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "JOIN",
      "Highschooler",
      "AS",
      "T3",
      "ON",
      "T1.friend_id",
      "=",
      "T3.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "highschooler",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "friend_id",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "Show the names of all of the far schooler Kyle 's friends .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "all",
      "of",
      "the",
      "far",
      "schooler",
      "Kyle",
      "'s",
      "friends",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "T3.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "JOIN",
      "Highschooler",
      "AS",
      "T3",
      "ON",
      "T1.friend_id",
      "=",
      "T3.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t3",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "join",
      "highschooler",
      "as",
      "t3",
      "on",
      "t1",
      ".",
      "friend_id",
      "=",
      "t3",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "Return the names of friends of the middle school student Kyle .",
    "question_toks": [
      "Return",
      "the",
      "names",
      "of",
      "friends",
      "of",
      "the",
      "middle",
      "school",
      "student",
      "Kyle",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "How many friends does the far school student Kyle have ?",
    "question_toks": [
      "How",
      "many",
      "friends",
      "does",
      "the",
      "far",
      "school",
      "student",
      "Kyle",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "Count the number of buddies Kyle has .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "buddies",
      "Kyle",
      "has",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "student_id",
      "FROM",
      "Friend"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "highschooler",
      "except",
      "select",
      "student_id",
      "from",
      "friend"
    ],
    "question": "Show ids of all students who do not have any buddies .",
    "question_toks": [
      "Show",
      "ids",
      "of",
      "all",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "buddies",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "query_toks": [
      "SELECT",
      "id",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "student_id",
      "FROM",
      "Friend"
    ],
    "query_toks_no_value": [
      "select",
      "id",
      "from",
      "highschooler",
      "except",
      "select",
      "student_id",
      "from",
      "friend"
    ],
    "question": "What are the ids of up school students who do not have friends ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "up",
      "school",
      "students",
      "who",
      "do",
      "not",
      "have",
      "friends",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              1
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "highschooler",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question": "Show names of all up school students who do not have any friends .",
    "question_toks": [
      "Show",
      "names",
      "of",
      "all",
      "up",
      "school",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "friends",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "Highschooler",
      "EXCEPT",
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "highschooler",
      "except",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question": "What are the names of students who have no buddies ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "no",
      "buddies",
      "?"
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  4,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              1
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "query_toks": [
      "SELECT",
      "student_id",
      "FROM",
      "Friend",
      "INTERSECT",
      "SELECT",
      "liked_id",
      "FROM",
      "Likes"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      "from",
      "friend",
      "intersect",
      "select",
      "liked_id",
      "from",
      "likes"
    ],
    "question": "Show the ids of high schoolers who have buddies and are also liked by someone else .",
    "question_toks": [
      "Show",
      "the",
      "ids",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "buddies",
      "and",
      "are",
      "also",
      "liked",
      "by",
      "someone",
      "else",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "query_toks": [
      "SELECT",
      "student_id",
      "FROM",
      "Friend",
      "INTERSECT",
      "SELECT",
      "liked_id",
      "FROM",
      "Likes"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      "from",
      "friend",
      "intersect",
      "select",
      "liked_id",
      "from",
      "likes"
    ],
    "question": "What are the ids of students who both have friends and are enjoyed ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "ids",
      "of",
      "students",
      "who",
      "both",
      "have",
      "friends",
      "and",
      "are",
      "enjoyed",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              2
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "INTERSECT",
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.liked_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "liked_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question": "Show name of all students who have some friends and also are enjoyed by someone else .",
    "question_toks": [
      "Show",
      "name",
      "of",
      "all",
      "students",
      "who",
      "have",
      "some",
      "friends",
      "and",
      "also",
      "are",
      "enjoyed",
      "by",
      "someone",
      "else",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "INTERSECT",
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.liked_id",
      "=",
      "T2.id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "intersect",
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "liked_id",
      "=",
      "t2",
      ".",
      "id"
    ],
    "question": "What are the names of young schoolers who both have friends and are liked ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "young",
      "schoolers",
      "who",
      "both",
      "have",
      "friends",
      "and",
      "are",
      "liked",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  7,
                  false
                ],
                null
              ],
              [
                0,
                1,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              2
            ],
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  2,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "query_toks": [
      "SELECT",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "GROUP",
      "BY",
      "student_id"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "group",
      "by",
      "student_id"
    ],
    "question": "Count the number of all for each student id .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "all",
      "for",
      "each",
      "student",
      "id",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "query_toks": [
      "SELECT",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "GROUP",
      "BY",
      "student_id"
    ],
    "query_toks_no_value": [
      "select",
      "student_id",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "group",
      "by",
      "student_id"
    ],
    "question": "How many likes correspond to each school id ?",
    "question_toks": [
      "How",
      "many",
      "likes",
      "correspond",
      "to",
      "each",
      "school",
      "id",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id"
    ],
    "question": "Show the names of high schoolers who have likes , and numbers of mentions for each .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "likes",
      ",",
      "and",
      "numbers",
      "of",
      "mentions",
      "for",
      "each",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "query_toks": [
      "SELECT",
      "T2.name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id"
    ],
    "question": "What are the names of young schoolers who have likes , and how many likes does each have ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "young",
      "schoolers",
      "who",
      "have",
      "likes",
      ",",
      "and",
      "how",
      "many",
      "likes",
      "does",
      "each",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the far schooler who has the greatest number of likes ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "far",
      "schooler",
      "who",
      "has",
      "the",
      "greatest",
      "number",
      "of",
      "likes",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Give the name of the student with the most liked .",
    "question_toks": [
      "Give",
      "the",
      "name",
      "of",
      "the",
      "student",
      "with",
      "the",
      "most",
      "liked",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show the names of students who have at least 2 liking .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "at",
      "least",
      "2",
      "liking",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names of students who have 2 or more liking ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "2",
      "or",
      "more",
      "liking",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          6,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.grade",
      ">",
      "5",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "grade",
      ">",
      "value",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Show the names of students who have a grade higher than 5 and have at least 2 friendships .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "students",
      "who",
      "have",
      "a",
      "grade",
      "higher",
      "than",
      "5",
      "and",
      "have",
      "at",
      "least",
      "2",
      "friendships",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T2.name",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.grade",
      ">",
      "5",
      "GROUP",
      "BY",
      "T1.student_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "name",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "grade",
      ">",
      "value",
      "group",
      "by",
      "t1",
      ".",
      "student_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the names of high schoolers who have a level of over 5 and have 2 or more friends ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "high",
      "schoolers",
      "who",
      "have",
      "a",
      "level",
      "of",
      "over",
      "5",
      "and",
      "have",
      "2",
      "or",
      "more",
      "friends",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            1
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          4,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          5.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "How many loves does Kyle have ?",
    "question_toks": [
      "How",
      "many",
      "loves",
      "does",
      "Kyle",
      "have",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Likes",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      "WHERE",
      "T2.name",
      "=",
      "``",
      "Kyle",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "likes",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      "where",
      "t2",
      ".",
      "name",
      "=",
      "value"
    ],
    "question": "Return the number of all that the high schooler named Kyle has .",
    "question_toks": [
      "Return",
      "the",
      "number",
      "of",
      "all",
      "that",
      "the",
      "high",
      "schooler",
      "named",
      "Kyle",
      "has",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              2,
              false
            ],
            null
          ],
          "\"Kyle\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "id",
      "IN",
      "(",
      "SELECT",
      "T1.student_id",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      ")"
    ],
    "question": "Find the average grade of all students who have some buddies .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "grade",
      "of",
      "all",
      "students",
      "who",
      "have",
      "some",
      "buddies",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "id",
      "IN",
      "(",
      "SELECT",
      "T1.student_id",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      ")"
    ],
    "question": "What is the average grade of students who have buddies ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "grade",
      "of",
      "students",
      "who",
      "have",
      "buddies",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.student_id",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      ")"
    ],
    "question": "Find the minimum grade of students who have no buddies .",
    "question_toks": [
      "Find",
      "the",
      "minimum",
      "grade",
      "of",
      "students",
      "who",
      "have",
      "no",
      "buddies",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "network_1",
    "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "query_toks": [
      "SELECT",
      "min",
      "(",
      "grade",
      ")",
      "FROM",
      "Highschooler",
      "WHERE",
      "id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "T1.student_id",
      "FROM",
      "Friend",
      "AS",
      "T1",
      "JOIN",
      "Highschooler",
      "AS",
      "T2",
      "ON",
      "T1.student_id",
      "=",
      "T2.id",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "min",
      "(",
      "grade",
      ")",
      "from",
      "highschooler",
      "where",
      "id",
      "not",
      "in",
      "(",
      "select",
      "t1",
      ".",
      "student_id",
      "from",
      "friend",
      "as",
      "t1",
      "join",
      "highschooler",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "student_id",
      "=",
      "t2",
      ".",
      "id",
      ")"
    ],
    "question": "What is the lowest rating of students who do not have any friends ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "lowest",
      "rating",
      "of",
      "students",
      "who",
      "do",
      "not",
      "have",
      "any",
      "friends",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            2,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [
                [
                  false,
                  2,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ],
                  [
                    0,
                    1,
                    false
                  ],
                  null
                ]
              ],
              "table_units": [
                [
                  "table_unit",
                  1
                ],
                [
                  "table_unit",
                  0
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      4,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "query_toks": [
      "SELECT",
      "state",
      "FROM",
      "Owners",
      "INTERSECT",
      "SELECT",
      "state",
      "FROM",
      "Professionals"
    ],
    "query_toks_no_value": [
      "select",
      "state",
      "from",
      "owners",
      "intersect",
      "select",
      "state",
      "from",
      "professionals"
    ],
    "question": "Which states have both ownership and professionals living there ?",
    "question_toks": [
      "Which",
      "states",
      "have",
      "both",
      "ownership",
      "and",
      "professionals",
      "living",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              6
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  38,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "query_toks": [
      "SELECT",
      "state",
      "FROM",
      "Owners",
      "INTERSECT",
      "SELECT",
      "state",
      "FROM",
      "Professionals"
    ],
    "query_toks_no_value": [
      "select",
      "state",
      "from",
      "owners",
      "intersect",
      "select",
      "state",
      "from",
      "professionals"
    ],
    "question": "Find the states where both owners and professionally live .",
    "question_toks": [
      "Find",
      "the",
      "states",
      "where",
      "both",
      "owners",
      "and",
      "professionally",
      "live",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              6
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  38,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      "WHERE",
      "dog_id",
      "IN",
      "(",
      "SELECT",
      "dog_id",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "What is the average age of the dogs who have gone through any treating ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "the",
      "dogs",
      "who",
      "have",
      "gone",
      "through",
      "any",
      "treating",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      "WHERE",
      "dog_id",
      "IN",
      "(",
      "SELECT",
      "dog_id",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "Find the average age of the dogs who went through treated .",
    "question_toks": [
      "Find",
      "the",
      "average",
      "age",
      "of",
      "the",
      "dogs",
      "who",
      "went",
      "through",
      "treated",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "query_toks": [
      "SELECT",
      "professional_id",
      ",",
      "last_name",
      ",",
      "cell_number",
      "FROM",
      "Professionals",
      "WHERE",
      "state",
      "=",
      "'Indiana",
      "'",
      "UNION",
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.last_name",
      ",",
      "T1.cell_number",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "professional_id",
      ",",
      "last_name",
      ",",
      "cell_number",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "value",
      "union",
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t1",
      ".",
      "cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Which professionally live in the state of Indiana or have done treatment on more than 2 treatments ? List his or her id , last name and cell phone .",
    "question_toks": [
      "Which",
      "professionally",
      "live",
      "in",
      "the",
      "state",
      "of",
      "Indiana",
      "or",
      "have",
      "done",
      "treatment",
      "on",
      "more",
      "than",
      "2",
      "treatments",
      "?",
      "List",
      "his",
      "or",
      "her",
      "id",
      ",",
      "last",
      "name",
      "and",
      "cell",
      "phone",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy": [
          [
            0,
            33,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            2.0,
            null
          ]
        ],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  40,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  43,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Indiana\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
    "query_toks": [
      "SELECT",
      "professional_id",
      ",",
      "last_name",
      ",",
      "cell_number",
      "FROM",
      "Professionals",
      "WHERE",
      "state",
      "=",
      "'Indiana",
      "'",
      "UNION",
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.last_name",
      ",",
      "T1.cell_number",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "professional_id",
      ",",
      "last_name",
      ",",
      "cell_number",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "value",
      "union",
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t1",
      ".",
      "cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Find the id , last name and mobile phone of the professionals who live in the state of Indiana or have performed more than two treatments .",
    "question_toks": [
      "Find",
      "the",
      "id",
      ",",
      "last",
      "name",
      "and",
      "mobile",
      "phone",
      "of",
      "the",
      "professionals",
      "who",
      "live",
      "in",
      "the",
      "state",
      "of",
      "Indiana",
      "or",
      "have",
      "performed",
      "more",
      "than",
      "two",
      "treatments",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy": [
          [
            0,
            33,
            false
          ]
        ],
        "having": [
          [
            false,
            3,
            [
              0,
              [
                3,
                0,
                false
              ],
              null
            ],
            2.0,
            null
          ]
        ],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  40,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  43,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Indiana\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "Dogs",
      "WHERE",
      "dog_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "dog_id",
      "FROM",
      "Treatments",
      "GROUP",
      "BY",
      "dog_id",
      "HAVING",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      ">",
      "1000",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      "group",
      "by",
      "dog_id",
      "having",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      ">",
      "value",
      ")"
    ],
    "question": "Which dogs have not cost their owner more than 1000 for treating ? List the dog names .",
    "question_toks": [
      "Which",
      "dogs",
      "have",
      "not",
      "cost",
      "their",
      "owner",
      "more",
      "than",
      "1000",
      "for",
      "treating",
      "?",
      "List",
      "the",
      "dog",
      "names",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [
              [
                0,
                45,
                false
              ]
            ],
            "having": [
              [
                false,
                3,
                [
                  0,
                  [
                    4,
                    49,
                    false
                  ],
                  null
                ],
                1000.0,
                null
              ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
    "query_toks": [
      "SELECT",
      "name",
      "FROM",
      "Dogs",
      "WHERE",
      "dog_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "dog_id",
      "FROM",
      "Treatments",
      "GROUP",
      "BY",
      "dog_id",
      "HAVING",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      ">",
      "1000",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      "group",
      "by",
      "dog_id",
      "having",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      ">",
      "value",
      ")"
    ],
    "question": "What are the names of the canine for which the owner spent more than 1000 for treatment ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "canine",
      "for",
      "which",
      "the",
      "owner",
      "spent",
      "more",
      "than",
      "1000",
      "for",
      "treatment",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [
              [
                0,
                45,
                false
              ]
            ],
            "having": [
              [
                false,
                3,
                [
                  0,
                  [
                    4,
                    49,
                    false
                  ],
                  null
                ],
                1000.0,
                null
              ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "query_toks": [
      "SELECT",
      "first_name",
      "FROM",
      "Professionals",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Owners",
      "EXCEPT",
      "SELECT",
      "name",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      "from",
      "professionals",
      "union",
      "select",
      "first_name",
      "from",
      "owners",
      "except",
      "select",
      "name",
      "from",
      "dogs"
    ],
    "question": "Which first names are used for professionally or owners but are not used as dog names ?",
    "question_toks": [
      "Which",
      "first",
      "names",
      "are",
      "used",
      "for",
      "professionally",
      "or",
      "owners",
      "but",
      "are",
      "not",
      "used",
      "as",
      "dog",
      "names",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": {
        "except": {
          "except": null,
          "from": {
            "conds": [],
            "table_units": [
              [
                "table_unit",
                5
              ]
            ]
          },
          "groupBy": [],
          "having": [],
          "intersect": null,
          "limit": null,
          "orderBy": [],
          "select": [
            false,
            [
              [
                0,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ]
              ]
            ]
          ],
          "union": null,
          "where": []
        },
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              4
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "query_toks": [
      "SELECT",
      "first_name",
      "FROM",
      "Professionals",
      "UNION",
      "SELECT",
      "first_name",
      "FROM",
      "Owners",
      "EXCEPT",
      "SELECT",
      "name",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      "from",
      "professionals",
      "union",
      "select",
      "first_name",
      "from",
      "owners",
      "except",
      "select",
      "name",
      "from",
      "dogs"
    ],
    "question": "Find the first names that are used for professionals or owners but are not used as puppy names .",
    "question_toks": [
      "Find",
      "the",
      "first",
      "names",
      "that",
      "are",
      "used",
      "for",
      "professionals",
      "or",
      "owners",
      "but",
      "are",
      "not",
      "used",
      "as",
      "puppy",
      "names",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": {
        "except": {
          "except": null,
          "from": {
            "conds": [],
            "table_units": [
              [
                "table_unit",
                5
              ]
            ]
          },
          "groupBy": [],
          "having": [],
          "intersect": null,
          "limit": null,
          "orderBy": [],
          "select": [
            false,
            [
              [
                0,
                [
                  0,
                  [
                    0,
                    25,
                    false
                  ],
                  null
                ]
              ]
            ]
          ],
          "union": null,
          "where": []
        },
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              4
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  11,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks": [
      "SELECT",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "FROM",
      "Professionals",
      "EXCEPT",
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.role_code",
      ",",
      "T1.email_address",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value": [
      "select",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "from",
      "professionals",
      "except",
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "role_code",
      ",",
      "t1",
      ".",
      "email_address",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question": "Which professional did not operate any treatment on dogs ? List the professional 's id , role and mail .",
    "question_toks": [
      "Which",
      "professional",
      "did",
      "not",
      "operate",
      "any",
      "treatment",
      "on",
      "dogs",
      "?",
      "List",
      "the",
      "professional",
      "'s",
      "id",
      ",",
      "role",
      "and",
      "mail",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  41,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks": [
      "SELECT",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "FROM",
      "Professionals",
      "EXCEPT",
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.role_code",
      ",",
      "T1.email_address",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value": [
      "select",
      "professional_id",
      ",",
      "role_code",
      ",",
      "email_address",
      "from",
      "professionals",
      "except",
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "role_code",
      ",",
      "t1",
      ".",
      "email_address",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question": "Give me the id , role and mail of the professionals who did not perform any treatment on dogs .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "id",
      ",",
      "role",
      "and",
      "mail",
      "of",
      "the",
      "professionals",
      "who",
      "did",
      "not",
      "perform",
      "any",
      "treatment",
      "on",
      "dogs",
      "."
    ],
    "sql": {
      "except": {
        "except": null,
        "from": {
          "conds": [
            [
              false,
              2,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ],
              [
                0,
                46,
                false
              ],
              null
            ]
          ],
          "table_units": [
            [
              "table_unit",
              6
            ],
            [
              "table_unit",
              7
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  33,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  34,
                  false
                ],
                null
              ]
            ],
            [
              0,
              [
                0,
                [
                  0,
                  41,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": []
      },
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T2.first_name",
      ",",
      "T2.last_name",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Owners",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t2",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "last_name",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "owners",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which owner owns the most dogs ? List the owner id , just name and last name .",
    "question_toks": [
      "Which",
      "owner",
      "owns",
      "the",
      "most",
      "dogs",
      "?",
      "List",
      "the",
      "owner",
      "id",
      ",",
      "just",
      "name",
      "and",
      "last",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T2.first_name",
      ",",
      "T2.last_name",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Owners",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t2",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "last_name",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "owners",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Return the owner id , first name and not name of the owner who has the most dogs .",
    "question_toks": [
      "Return",
      "the",
      "owner",
      "id",
      ",",
      "first",
      "name",
      "and",
      "not",
      "name",
      "of",
      "the",
      "owner",
      "who",
      "has",
      "the",
      "most",
      "dogs",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ],
            [
              0,
              10,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [
        [
          0,
          21,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                21,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.role_code",
      ",",
      "T1.first_name",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "role_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Which professionals have done at least two treatments ? List the professional 's id , role , and one name .",
    "question_toks": [
      "Which",
      "professionals",
      "have",
      "done",
      "at",
      "least",
      "two",
      "treatments",
      "?",
      "List",
      "the",
      "professional",
      "'s",
      "id",
      ",",
      "role",
      ",",
      "and",
      "one",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.role_code",
      ",",
      "T1.first_name",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "role_code",
      ",",
      "t1",
      ".",
      "first_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "What are the id , role , and every name of the professionals who have performed two or more treatments ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "id",
      ",",
      "role",
      ",",
      "and",
      "every",
      "name",
      "of",
      "the",
      "professionals",
      "who",
      "have",
      "performed",
      "two",
      "or",
      "more",
      "treatments",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.breed_name",
      "FROM",
      "Breeds",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.breed_code",
      "=",
      "T2.breed_code",
      "GROUP",
      "BY",
      "T1.breed_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "breed_name",
      "from",
      "breeds",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "breed_code",
      "=",
      "t2",
      ".",
      "breed_code",
      "group",
      "by",
      "t1",
      ".",
      "breed_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the breeders with the most dogs ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "breeders",
      "with",
      "the",
      "most",
      "dogs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.breed_name",
      "FROM",
      "Breeds",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.breed_code",
      "=",
      "T2.breed_code",
      "GROUP",
      "BY",
      "T1.breed_name",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "breed_name",
      "from",
      "breeds",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "breed_code",
      "=",
      "t2",
      ".",
      "breed_code",
      "group",
      "by",
      "t1",
      ".",
      "breed_name",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which breed do the most canine have ? Give me the breed name .",
    "question_toks": [
      "Which",
      "breed",
      "do",
      "the",
      "most",
      "canine",
      "have",
      "?",
      "Give",
      "me",
      "the",
      "breed",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              23,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T1.last_name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "JOIN",
      "Treatments",
      "AS",
      "T3",
      "ON",
      "T2.dog_id",
      "=",
      "T3.dog_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "dog_id",
      "=",
      "t3",
      ".",
      "dog_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which owner has paid for the most treatments on his or her dogs ? List the ownership id and last name .",
    "question_toks": [
      "Which",
      "owner",
      "has",
      "paid",
      "for",
      "the",
      "most",
      "treatments",
      "on",
      "his",
      "or",
      "her",
      "dogs",
      "?",
      "List",
      "the",
      "ownership",
      "id",
      "and",
      "last",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T1.last_name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "JOIN",
      "Treatments",
      "AS",
      "T3",
      "ON",
      "T2.dog_id",
      "=",
      "T3.dog_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "dog_id",
      "=",
      "t3",
      ".",
      "dog_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her canine .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "owner",
      "id",
      "and",
      "last",
      "name",
      "of",
      "the",
      "owner",
      "who",
      "spent",
      "the",
      "most",
      "on",
      "treatments",
      "of",
      "his",
      "or",
      "her",
      "canine",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.treatment_type_description",
      "FROM",
      "Treatment_types",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.treatment_type_code",
      "=",
      "T2.treatment_type_code",
      "GROUP",
      "BY",
      "T1.treatment_type_code",
      "ORDER",
      "BY",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "treatment_type_description",
      "from",
      "treatment_types",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "treatment_type_code",
      "=",
      "t2",
      ".",
      "treatment_type_code",
      "group",
      "by",
      "t1",
      ".",
      "treatment_type_code",
      "order",
      "by",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "What is the describing of the treatment type that costs the least money in total ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "describing",
      "of",
      "the",
      "treatment",
      "type",
      "that",
      "costs",
      "the",
      "least",
      "money",
      "in",
      "total",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.treatment_type_description",
      "FROM",
      "Treatment_types",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.treatment_type_code",
      "=",
      "T2.treatment_type_code",
      "GROUP",
      "BY",
      "T1.treatment_type_code",
      "ORDER",
      "BY",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      "ASC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "treatment_type_description",
      "from",
      "treatment_types",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "treatment_type_code",
      "=",
      "t2",
      ".",
      "treatment_type_code",
      "group",
      "by",
      "t1",
      ".",
      "treatment_type_code",
      "order",
      "by",
      "sum",
      "(",
      "cost_of_treatment",
      ")",
      "asc",
      "limit",
      "value"
    ],
    "question": "Give me the describing of the treatment type whose total cost is the lowest .",
    "question_toks": [
      "Give",
      "me",
      "the",
      "describing",
      "of",
      "the",
      "treatment",
      "type",
      "whose",
      "total",
      "cost",
      "is",
      "the",
      "lowest",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                8,
                false
              ],
              null
            ],
            [
              0,
              47,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          8,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T1.zip_code",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "JOIN",
      "Treatments",
      "AS",
      "T3",
      "ON",
      "T2.dog_id",
      "=",
      "T3.dog_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "sum",
      "(",
      "T3.cost_of_treatment",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t1",
      ".",
      "zip_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "dog_id",
      "=",
      "t3",
      ".",
      "dog_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "sum",
      "(",
      "t3",
      ".",
      "cost_of_treatment",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Which owner has paid the largest amount of money in total for their dogs ? Show the ownership id and zip code .",
    "question_toks": [
      "Which",
      "owner",
      "has",
      "paid",
      "the",
      "largest",
      "amount",
      "of",
      "money",
      "in",
      "total",
      "for",
      "their",
      "dogs",
      "?",
      "Show",
      "the",
      "ownership",
      "id",
      "and",
      "zip",
      "code",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "T1.owner_id",
      ",",
      "T1.zip_code",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "JOIN",
      "Treatments",
      "AS",
      "T3",
      "ON",
      "T2.dog_id",
      "=",
      "T3.dog_id",
      "GROUP",
      "BY",
      "T1.owner_id",
      "ORDER",
      "BY",
      "sum",
      "(",
      "T3.cost_of_treatment",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "owner_id",
      ",",
      "t1",
      ".",
      "zip_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "join",
      "treatments",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "dog_id",
      "=",
      "t3",
      ".",
      "dog_id",
      "group",
      "by",
      "t1",
      ".",
      "owner_id",
      "order",
      "by",
      "sum",
      "(",
      "t3",
      ".",
      "cost_of_treatment",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Find the ownership id and zip code of the owner who spent the most money in total for his or her dogs .",
    "question_toks": [
      "Find",
      "the",
      "ownership",
      "id",
      "and",
      "zip",
      "code",
      "of",
      "the",
      "owner",
      "who",
      "spent",
      "the",
      "most",
      "money",
      "in",
      "total",
      "for",
      "his",
      "or",
      "her",
      "dogs",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              4,
              49,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                16,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.cell_number",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Which professionals have done at least two types of treatments ? List the professionally id and cell phone .",
    "question_toks": [
      "Which",
      "professionals",
      "have",
      "done",
      "at",
      "least",
      "two",
      "types",
      "of",
      "treatments",
      "?",
      "List",
      "the",
      "professionally",
      "id",
      "and",
      "cell",
      "phone",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
    "query_toks": [
      "SELECT",
      "T1.professional_id",
      ",",
      "T1.cell_number",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "GROUP",
      "BY",
      "T1.professional_id",
      "HAVING",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "2"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "professional_id",
      ",",
      "t1",
      ".",
      "cell_number",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "group",
      "by",
      "t1",
      ".",
      "professional_id",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "=",
      "value"
    ],
    "question": "Find the id and mobile phone of the professionals who operate two or more types of treatments .",
    "question_toks": [
      "Find",
      "the",
      "id",
      "and",
      "mobile",
      "phone",
      "of",
      "the",
      "professionals",
      "who",
      "operate",
      "two",
      "or",
      "more",
      "types",
      "of",
      "treatments",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [
        [
          0,
          33,
          false
        ]
      ],
      "having": [
        [
          false,
          5,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          2.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T1.last_name",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "WHERE",
      "cost_of_treatment",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "cost_of_treatment",
      ")",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "where",
      "cost_of_treatment",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "cost_of_treatment",
      ")",
      "from",
      "treatments",
      ")"
    ],
    "question": "What are the first name and last name of the professionally who have done treatment with cost below average ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "first",
      "name",
      "and",
      "last",
      "name",
      "of",
      "the",
      "professionally",
      "who",
      "have",
      "done",
      "treatment",
      "with",
      "cost",
      "below",
      "average",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              49,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      49,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T1.last_name",
      "FROM",
      "Professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "WHERE",
      "cost_of_treatment",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "cost_of_treatment",
      ")",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "last_name",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "where",
      "cost_of_treatment",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "cost_of_treatment",
      ")",
      "from",
      "treatments",
      ")"
    ],
    "question": "Which professionals have operated a treating that costs less than the average ? Give me theor first names and last names .",
    "question_toks": [
      "Which",
      "professionals",
      "have",
      "operated",
      "a",
      "treating",
      "that",
      "costs",
      "less",
      "than",
      "the",
      "average",
      "?",
      "Give",
      "me",
      "theor",
      "first",
      "names",
      "and",
      "last",
      "names",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                40,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              49,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      49,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks": [
      "SELECT",
      "T1.date_of_treatment",
      ",",
      "T2.first_name",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "Professionals",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "date_of_treatment",
      ",",
      "t2",
      ".",
      "first_name",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "professionals",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question": "List the date of each treatment , together with the first name of the practitioner who operated it .",
    "question_toks": [
      "List",
      "the",
      "date",
      "of",
      "each",
      "treatment",
      ",",
      "together",
      "with",
      "the",
      "first",
      "name",
      "of",
      "the",
      "practitioner",
      "who",
      "operated",
      "it",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "query_toks": [
      "SELECT",
      "T1.date_of_treatment",
      ",",
      "T2.first_name",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "Professionals",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "date_of_treatment",
      ",",
      "t2",
      ".",
      "first_name",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "professionals",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id"
    ],
    "question": "What are the date and the operating firm 's first name of each treatment ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "date",
      "and",
      "the",
      "operating",
      "firm",
      "'s",
      "first",
      "name",
      "of",
      "each",
      "treatment",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                46,
                false
              ],
              null
            ],
            [
              0,
              33,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "query_toks": [
      "SELECT",
      "T1.cost_of_treatment",
      ",",
      "T2.treatment_type_description",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "treatment_types",
      "AS",
      "T2",
      "ON",
      "T1.treatment_type_code",
      "=",
      "T2.treatment_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "cost_of_treatment",
      ",",
      "t2",
      ".",
      "treatment_type_description",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "treatment_types",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "treatment_type_code",
      "=",
      "t2",
      ".",
      "treatment_type_code"
    ],
    "question": "List the cost of each treatment and the corresponding treatment type designation .",
    "question_toks": [
      "List",
      "the",
      "cost",
      "of",
      "each",
      "treatment",
      "and",
      "the",
      "corresponding",
      "treatment",
      "type",
      "designation",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "query_toks": [
      "SELECT",
      "T1.cost_of_treatment",
      ",",
      "T2.treatment_type_description",
      "FROM",
      "Treatments",
      "AS",
      "T1",
      "JOIN",
      "treatment_types",
      "AS",
      "T2",
      "ON",
      "T1.treatment_type_code",
      "=",
      "T2.treatment_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "cost_of_treatment",
      ",",
      "t2",
      ".",
      "treatment_type_description",
      "from",
      "treatments",
      "as",
      "t1",
      "join",
      "treatment_types",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "treatment_type_code",
      "=",
      "t2",
      ".",
      "treatment_type_code"
    ],
    "question": "What are the cost and treatment type designation of each treatment ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "cost",
      "and",
      "treatment",
      "type",
      "designation",
      "of",
      "each",
      "treatment",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                47,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            7
          ],
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.last_name",
      ",",
      "T2.size_code",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t2",
      ".",
      "size_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question": "List each owner 's first name , main name , and the size of his for her dog .",
    "question_toks": [
      "List",
      "each",
      "owner",
      "'s",
      "first",
      "name",
      ",",
      "main",
      "name",
      ",",
      "and",
      "the",
      "size",
      "of",
      "his",
      "for",
      "her",
      "dog",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T1.last_name",
      ",",
      "T2.size_code",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t1",
      ".",
      "last_name",
      ",",
      "t2",
      ".",
      "size_code",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question": "What are each individual 's first name , last name , and the size of their dog ?",
    "question_toks": [
      "What",
      "are",
      "each",
      "individual",
      "'s",
      "first",
      "name",
      ",",
      "last",
      "name",
      ",",
      "and",
      "the",
      "size",
      "of",
      "their",
      "dog",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question": "List pairs of the owner 's initial name and the dogs 's name .",
    "question_toks": [
      "List",
      "pairs",
      "of",
      "the",
      "owner",
      "'s",
      "initial",
      "name",
      "and",
      "the",
      "dogs",
      "'s",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id"
    ],
    "question": "What are each individual 's first name and their dogs 's name ?",
    "question_toks": [
      "What",
      "are",
      "each",
      "individual",
      "'s",
      "first",
      "name",
      "and",
      "their",
      "dogs",
      "'s",
      "name",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "query_toks": [
      "SELECT",
      "T1.name",
      ",",
      "T2.date_of_treatment",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.dog_id",
      "=",
      "T2.dog_id",
      "WHERE",
      "T1.breed_code",
      "=",
      "(",
      "SELECT",
      "breed_code",
      "FROM",
      "Dogs",
      "GROUP",
      "BY",
      "breed_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "date_of_treatment",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "dog_id",
      "=",
      "t2",
      ".",
      "dog_id",
      "where",
      "t1",
      ".",
      "breed_code",
      "=",
      "(",
      "select",
      "breed_code",
      "from",
      "dogs",
      "group",
      "by",
      "breed_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value",
      ")"
    ],
    "question": "List the names of the dogs of the rarest breed and the treatment time of them .",
    "question_toks": [
      "List",
      "the",
      "names",
      "of",
      "the",
      "dogs",
      "of",
      "the",
      "rarest",
      "breed",
      "and",
      "the",
      "treatment",
      "time",
      "of",
      "them",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [
              [
                0,
                23,
                false
              ]
            ],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
              "asc",
              [
                [
                  0,
                  [
                    3,
                    0,
                    false
                  ],
                  null
                ]
              ]
            ],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "query_toks": [
      "SELECT",
      "T1.name",
      ",",
      "T2.date_of_treatment",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.dog_id",
      "=",
      "T2.dog_id",
      "WHERE",
      "T1.breed_code",
      "=",
      "(",
      "SELECT",
      "breed_code",
      "FROM",
      "Dogs",
      "GROUP",
      "BY",
      "breed_code",
      "ORDER",
      "BY",
      "count",
      "(",
      "*",
      ")",
      "ASC",
      "LIMIT",
      "1",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "t2",
      ".",
      "date_of_treatment",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "dog_id",
      "=",
      "t2",
      ".",
      "dog_id",
      "where",
      "t1",
      ".",
      "breed_code",
      "=",
      "(",
      "select",
      "breed_code",
      "from",
      "dogs",
      "group",
      "by",
      "breed_code",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "asc",
      "limit",
      "value",
      ")"
    ],
    "question": "Which dogs are of the rarest breed ? Show their names and treatment time .",
    "question_toks": [
      "Which",
      "dogs",
      "are",
      "of",
      "the",
      "rarest",
      "breed",
      "?",
      "Show",
      "their",
      "names",
      "and",
      "treatment",
      "time",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                48,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              23,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [
              [
                0,
                23,
                false
              ]
            ],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
              "asc",
              [
                [
                  0,
                  [
                    3,
                    0,
                    false
                  ],
                  null
                ]
              ]
            ],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      23,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "WHERE",
      "T1.state",
      "=",
      "'Virginia",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "where",
      "t1",
      ".",
      "state",
      "=",
      "value"
    ],
    "question": "Which dogs are owned by someone who lives in Virginia ? List the owner 's first name and the canine 's name .",
    "question_toks": [
      "Which",
      "dogs",
      "are",
      "owned",
      "by",
      "someone",
      "who",
      "lives",
      "in",
      "Virginia",
      "?",
      "List",
      "the",
      "owner",
      "'s",
      "first",
      "name",
      "and",
      "the",
      "canine",
      "'s",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"Virginia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "query_toks": [
      "SELECT",
      "T1.first_name",
      ",",
      "T2.name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "WHERE",
      "T1.state",
      "=",
      "'Virginia",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "first_name",
      ",",
      "t2",
      ".",
      "name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "where",
      "t1",
      ".",
      "state",
      "=",
      "value"
    ],
    "question": "Find the one names of owners living in Virginia and the names of dogs they own .",
    "question_toks": [
      "Find",
      "the",
      "one",
      "names",
      "of",
      "owners",
      "living",
      "in",
      "Virginia",
      "and",
      "the",
      "names",
      "of",
      "dogs",
      "they",
      "own",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"Virginia\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.date_arrived",
      ",",
      "T1.date_departed",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.dog_id",
      "=",
      "T2.dog_id"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "date_arrived",
      ",",
      "t1",
      ".",
      "date_departed",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "dog_id",
      "=",
      "t2",
      ".",
      "dog_id"
    ],
    "question": "What are the arriving date and the departing date of the canine who have gone through a treatment ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "the",
      "canine",
      "who",
      "have",
      "gone",
      "through",
      "a",
      "treatment",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.date_arrived",
      ",",
      "T1.date_departed",
      "FROM",
      "Dogs",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.dog_id",
      "=",
      "T2.dog_id"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "date_arrived",
      ",",
      "t1",
      ".",
      "date_departed",
      "from",
      "dogs",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "dog_id",
      "=",
      "t2",
      ".",
      "dog_id"
    ],
    "question": "Find the arriving date and the departing date of the canine that received a treatment .",
    "question_toks": [
      "Find",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departing",
      "date",
      "of",
      "the",
      "canine",
      "that",
      "received",
      "a",
      "treatment",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                20,
                false
              ],
              null
            ],
            [
              0,
              45,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            5
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "query_toks": [
      "SELECT",
      "T1.last_name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "WHERE",
      "T2.age",
      "=",
      "(",
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "where",
      "t2",
      ".",
      "age",
      "=",
      "(",
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ],
    "question": "List the middle name of the owner owning the youngest dog .",
    "question_toks": [
      "List",
      "the",
      "middle",
      "name",
      "of",
      "the",
      "owner",
      "owning",
      "the",
      "youngest",
      "dog",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "query_toks": [
      "SELECT",
      "T1.last_name",
      "FROM",
      "Owners",
      "AS",
      "T1",
      "JOIN",
      "Dogs",
      "AS",
      "T2",
      "ON",
      "T1.owner_id",
      "=",
      "T2.owner_id",
      "WHERE",
      "T2.age",
      "=",
      "(",
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "last_name",
      "from",
      "owners",
      "as",
      "t1",
      "join",
      "dogs",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "owner_id",
      "=",
      "t2",
      ".",
      "owner_id",
      "where",
      "t2",
      ".",
      "age",
      "=",
      "(",
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ],
    "question": "Who owns the youngest dog ? Give me his or her one name .",
    "question_toks": [
      "Who",
      "owns",
      "the",
      "youngest",
      "dog",
      "?",
      "Give",
      "me",
      "his",
      "or",
      "her",
      "one",
      "name",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              21,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            4
          ],
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  1,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "query_toks": [
      "SELECT",
      "email_address",
      "FROM",
      "Professionals",
      "WHERE",
      "state",
      "=",
      "'Hawaii",
      "'",
      "OR",
      "state",
      "=",
      "'Wisconsin",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "email_address",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "value",
      "or",
      "state",
      "=",
      "value"
    ],
    "question": "List the emails of the professionals who live in the way of Hawaii or the state of Wisconsin .",
    "question_toks": [
      "List",
      "the",
      "emails",
      "of",
      "the",
      "professionals",
      "who",
      "live",
      "in",
      "the",
      "way",
      "of",
      "Hawaii",
      "or",
      "the",
      "state",
      "of",
      "Wisconsin",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Hawaii\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Wisconsin\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "query_toks": [
      "SELECT",
      "email_address",
      "FROM",
      "Professionals",
      "WHERE",
      "state",
      "=",
      "'Hawaii",
      "'",
      "OR",
      "state",
      "=",
      "'Wisconsin",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "email_address",
      "from",
      "professionals",
      "where",
      "state",
      "=",
      "value",
      "or",
      "state",
      "=",
      "value"
    ],
    "question": "What are the sent of the professionals living in either the state of Hawaii or the state of Wisconsin ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "sent",
      "of",
      "the",
      "professionals",
      "living",
      "in",
      "either",
      "the",
      "state",
      "of",
      "Hawaii",
      "or",
      "the",
      "state",
      "of",
      "Wisconsin",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Hawaii\"",
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              38,
              false
            ],
            null
          ],
          "\"Wisconsin\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT date_arrived ,  date_departed FROM Dogs",
    "query_toks": [
      "SELECT",
      "date_arrived",
      ",",
      "date_departed",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "date_arrived",
      ",",
      "date_departed",
      "from",
      "dogs"
    ],
    "question": "What are the arriving date and the departure date of all the dogs ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "arriving",
      "date",
      "and",
      "the",
      "departure",
      "date",
      "of",
      "all",
      "the",
      "dogs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT date_arrived ,  date_departed FROM Dogs",
    "query_toks": [
      "SELECT",
      "date_arrived",
      ",",
      "date_departed",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "date_arrived",
      ",",
      "date_departed",
      "from",
      "dogs"
    ],
    "question": "List the arrival date and the departure date for all the hounds .",
    "question_toks": [
      "List",
      "the",
      "arrival",
      "date",
      "and",
      "the",
      "departure",
      "date",
      "for",
      "all",
      "the",
      "hounds",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                30,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                32,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "dog_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "dog_id",
      ")",
      "from",
      "treatments"
    ],
    "question": "How many dogs went through any treating ?",
    "question_toks": [
      "How",
      "many",
      "dogs",
      "went",
      "through",
      "any",
      "treating",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                45,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "dog_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "dog_id",
      ")",
      "from",
      "treatments"
    ],
    "question": "Count the number of dogs that went through a therapy .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "dogs",
      "that",
      "went",
      "through",
      "a",
      "therapy",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                45,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "professional_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "professional_id",
      ")",
      "from",
      "treatments"
    ],
    "question": "How many professionally have performed any treatment to dogs ?",
    "question_toks": [
      "How",
      "many",
      "professionally",
      "have",
      "performed",
      "any",
      "treatment",
      "to",
      "dogs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                46,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "DISTINCT",
      "professional_id",
      ")",
      "FROM",
      "Treatments"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "distinct",
      "professional_id",
      ")",
      "from",
      "treatments"
    ],
    "question": "Find the number of professionals who have ever handled dogs .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "professionals",
      "who",
      "have",
      "ever",
      "handled",
      "dogs",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                46,
                true
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "query_toks": [
      "SELECT",
      "role_code",
      ",",
      "street",
      ",",
      "city",
      ",",
      "state",
      "FROM",
      "professionals",
      "WHERE",
      "city",
      "LIKE",
      "'",
      "%",
      "West",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "role_code",
      ",",
      "street",
      ",",
      "city",
      ",",
      "state",
      "from",
      "professionals",
      "where",
      "city",
      "like",
      "value"
    ],
    "question": "Which professionals live in a city containing the substring ' West ' ? List his or her role , way , city and state .",
    "question_toks": [
      "Which",
      "professionals",
      "live",
      "in",
      "a",
      "city",
      "containing",
      "the",
      "substring",
      "'",
      "West",
      "'",
      "?",
      "List",
      "his",
      "or",
      "her",
      "role",
      ",",
      "way",
      ",",
      "city",
      "and",
      "state",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"%West%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "query_toks": [
      "SELECT",
      "role_code",
      ",",
      "street",
      ",",
      "city",
      ",",
      "state",
      "FROM",
      "professionals",
      "WHERE",
      "city",
      "LIKE",
      "'",
      "%",
      "West",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "role_code",
      ",",
      "street",
      ",",
      "city",
      ",",
      "state",
      "from",
      "professionals",
      "where",
      "city",
      "like",
      "value"
    ],
    "question": "Find the part , street , city and state of the professionals living in a city that contains the substring ' West ' .",
    "question_toks": [
      "Find",
      "the",
      "part",
      ",",
      "street",
      ",",
      "city",
      "and",
      "state",
      "of",
      "the",
      "professionals",
      "living",
      "in",
      "a",
      "city",
      "that",
      "contains",
      "the",
      "substring",
      "'",
      "West",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                34,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                36,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                37,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                38,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              37,
              false
            ],
            null
          ],
          "\"%West%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      ",",
      "email_address",
      "FROM",
      "Owners",
      "WHERE",
      "state",
      "LIKE",
      "'",
      "%",
      "North",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      ",",
      "email_address",
      "from",
      "owners",
      "where",
      "state",
      "like",
      "value"
    ],
    "question": "Which owners live in the state whose name contains the substring ' North ' ? List his first name , last name and mail .",
    "question_toks": [
      "Which",
      "owners",
      "live",
      "in",
      "the",
      "state",
      "whose",
      "name",
      "contains",
      "the",
      "substring",
      "'",
      "North",
      "'",
      "?",
      "List",
      "his",
      "first",
      "name",
      ",",
      "last",
      "name",
      "and",
      "mail",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%North%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "query_toks": [
      "SELECT",
      "first_name",
      ",",
      "last_name",
      ",",
      "email_address",
      "FROM",
      "Owners",
      "WHERE",
      "state",
      "LIKE",
      "'",
      "%",
      "North",
      "%",
      "'"
    ],
    "query_toks_no_value": [
      "select",
      "first_name",
      ",",
      "last_name",
      ",",
      "email_address",
      "from",
      "owners",
      "where",
      "state",
      "like",
      "value"
    ],
    "question": "Return the first name , main name and email of the owners living in a state whose name contains the substring ' North ' .",
    "question_toks": [
      "Return",
      "the",
      "first",
      "name",
      ",",
      "main",
      "name",
      "and",
      "email",
      "of",
      "the",
      "owners",
      "living",
      "in",
      "a",
      "state",
      "whose",
      "name",
      "contains",
      "the",
      "substring",
      "'",
      "North",
      "'",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                11,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                12,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                17,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          9,
          [
            0,
            [
              0,
              15,
              false
            ],
            null
          ],
          "\"%North%\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Dogs",
      "WHERE",
      "age",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "age",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ],
    "question": "How many canine have an age below the average ?",
    "question_toks": [
      "How",
      "many",
      "canine",
      "have",
      "an",
      "age",
      "below",
      "the",
      "average",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Dogs",
      "WHERE",
      "age",
      "<",
      "(",
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "age",
      "<",
      "(",
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs",
      ")"
    ],
    "question": "Count the number of canine of an age below the average .",
    "question_toks": [
      "Count",
      "the",
      "number",
      "of",
      "canine",
      "of",
      "an",
      "age",
      "below",
      "the",
      "average",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              26,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  5,
                  [
                    0,
                    [
                      0,
                      26,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "cost_of_treatment",
      "FROM",
      "Treatments",
      "ORDER",
      "BY",
      "date_of_treatment",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "cost_of_treatment",
      "from",
      "treatments",
      "order",
      "by",
      "date_of_treatment",
      "desc",
      "limit",
      "value"
    ],
    "question": "How much does the most recent treated cost ?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "most",
      "recent",
      "treated",
      "cost",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              48,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "cost_of_treatment",
      "FROM",
      "Treatments",
      "ORDER",
      "BY",
      "date_of_treatment",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "cost_of_treatment",
      "from",
      "treatments",
      "order",
      "by",
      "date_of_treatment",
      "desc",
      "limit",
      "value"
    ],
    "question": "Show me the price of the most recently performed treatment .",
    "question_toks": [
      "Show",
      "me",
      "the",
      "price",
      "of",
      "the",
      "most",
      "recently",
      "performed",
      "treatment",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              48,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                49,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Dogs",
      "WHERE",
      "dog_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "dog_id",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "How many dogs have not gone through any treated ?",
    "question_toks": [
      "How",
      "many",
      "dogs",
      "have",
      "not",
      "gone",
      "through",
      "any",
      "treated",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Dogs",
      "WHERE",
      "dog_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "dog_id",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "dogs",
      "where",
      "dog_id",
      "not",
      "in",
      "(",
      "select",
      "dog_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "Tell me the number of dogs that have received any treated .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "number",
      "of",
      "dogs",
      "that",
      "have",
      "received",
      "any",
      "treated",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              20,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      45,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Owners",
      "WHERE",
      "owner_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "owner_id",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "owners",
      "where",
      "owner_id",
      "not",
      "in",
      "(",
      "select",
      "owner_id",
      "from",
      "dogs",
      ")"
    ],
    "question": "How many owners temporarily do not have any canine ?",
    "question_toks": [
      "How",
      "many",
      "owners",
      "temporarily",
      "do",
      "not",
      "have",
      "any",
      "canine",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Owners",
      "WHERE",
      "owner_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "owner_id",
      "FROM",
      "Dogs",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "owners",
      "where",
      "owner_id",
      "not",
      "in",
      "(",
      "select",
      "owner_id",
      "from",
      "dogs",
      ")"
    ],
    "question": "Find the number of ownership who do not own any dogs at this moment .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "ownership",
      "who",
      "do",
      "not",
      "own",
      "any",
      "dogs",
      "at",
      "this",
      "moment",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            4
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  5
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      21,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Professionals",
      "WHERE",
      "professional_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "professional_id",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "professionals",
      "where",
      "professional_id",
      "not",
      "in",
      "(",
      "select",
      "professional_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "How many professionals did not operate any treatment on canine ?",
    "question_toks": [
      "How",
      "many",
      "professionals",
      "did",
      "not",
      "operate",
      "any",
      "treatment",
      "on",
      "canine",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Professionals",
      "WHERE",
      "professional_id",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "professional_id",
      "FROM",
      "Treatments",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "professionals",
      "where",
      "professional_id",
      "not",
      "in",
      "(",
      "select",
      "professional_id",
      "from",
      "treatments",
      ")"
    ],
    "question": "Find the number of professionals who have not treated any canine .",
    "question_toks": [
      "Find",
      "the",
      "number",
      "of",
      "professionals",
      "who",
      "have",
      "not",
      "treated",
      "any",
      "canine",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              33,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  7
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      46,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "FROM",
      "Dogs",
      "WHERE",
      "abandoned_yn",
      "=",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "from",
      "dogs",
      "where",
      "abandoned_yn",
      "=",
      "value"
    ],
    "question": "List the dog name , age and fit of the dogs who have been abandoned ? 1 stands for yes , and 0 stands for no .",
    "question_toks": [
      "List",
      "the",
      "dog",
      "name",
      ",",
      "age",
      "and",
      "fit",
      "of",
      "the",
      "dogs",
      "who",
      "have",
      "been",
      "abandoned",
      "?",
      "1",
      "stands",
      "for",
      "yes",
      ",",
      "and",
      "0",
      "stands",
      "for",
      "no",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "query_toks": [
      "SELECT",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "FROM",
      "Dogs",
      "WHERE",
      "abandoned_yn",
      "=",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      ",",
      "age",
      ",",
      "weight",
      "from",
      "dogs",
      "where",
      "abandoned_yn",
      "=",
      "value"
    ],
    "question": "What are the dog name , age and weight of the canine that were abandoned ? Note that 1 stands for yes , and 0 stands for no in the tables .",
    "question_toks": [
      "What",
      "are",
      "the",
      "dog",
      "name",
      ",",
      "age",
      "and",
      "weight",
      "of",
      "the",
      "canine",
      "that",
      "were",
      "abandoned",
      "?",
      "Note",
      "that",
      "1",
      "stands",
      "for",
      "yes",
      ",",
      "and",
      "0",
      "stands",
      "for",
      "no",
      "in",
      "the",
      "tables",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                25,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                29,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              22,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT avg(age) FROM Dogs",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question": "What is the average age of all the canine ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "average",
      "age",
      "of",
      "all",
      "the",
      "canine",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT avg(age) FROM Dogs",
    "query_toks": [
      "SELECT",
      "avg",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "avg",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question": "Compute the average age of all the canine .",
    "question_toks": [
      "Compute",
      "the",
      "average",
      "age",
      "of",
      "all",
      "the",
      "canine",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            5,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT max(age) FROM Dogs",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question": "What is the age of the oldest canine ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "age",
      "of",
      "the",
      "oldest",
      "canine",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT max(age) FROM Dogs",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "age",
      ")",
      "FROM",
      "Dogs"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "age",
      ")",
      "from",
      "dogs"
    ],
    "question": "Tell me the age of the oldest canine .",
    "question_toks": [
      "Tell",
      "me",
      "the",
      "age",
      "of",
      "the",
      "oldest",
      "canine",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                26,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT charge_type ,  charge_amount FROM Charges",
    "query_toks": [
      "SELECT",
      "charge_type",
      ",",
      "charge_amount",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value": [
      "select",
      "charge_type",
      ",",
      "charge_amount",
      "from",
      "charges"
    ],
    "question": "How much does each charge type costs ? List both charge type and quantity .",
    "question_toks": [
      "How",
      "much",
      "does",
      "each",
      "charge",
      "type",
      "costs",
      "?",
      "List",
      "both",
      "charge",
      "type",
      "and",
      "quantity",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT charge_type ,  charge_amount FROM Charges",
    "query_toks": [
      "SELECT",
      "charge_type",
      ",",
      "charge_amount",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value": [
      "select",
      "charge_type",
      ",",
      "charge_amount",
      "from",
      "charges"
    ],
    "question": "List each load type and its amount .",
    "question_toks": [
      "List",
      "each",
      "load",
      "type",
      "and",
      "its",
      "amount",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT max(charge_amount) FROM Charges",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "charge_amount",
      ")",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "charge_amount",
      ")",
      "from",
      "charges"
    ],
    "question": "How much does the most expensive load type costs ?",
    "question_toks": [
      "How",
      "much",
      "does",
      "the",
      "most",
      "expensive",
      "load",
      "type",
      "costs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT max(charge_amount) FROM Charges",
    "query_toks": [
      "SELECT",
      "max",
      "(",
      "charge_amount",
      ")",
      "FROM",
      "Charges"
    ],
    "query_toks_no_value": [
      "select",
      "max",
      "(",
      "charge_amount",
      ")",
      "from",
      "charges"
    ],
    "question": "What is the fee amount of the most expensive charge type ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "fee",
      "amount",
      "of",
      "the",
      "most",
      "expensive",
      "charge",
      "type",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            1,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "query_toks": [
      "SELECT",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "FROM",
      "professionals"
    ],
    "query_toks_no_value": [
      "select",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "from",
      "professionals"
    ],
    "question": "List the mail , cell phone and home phone of all the professionals .",
    "question_toks": [
      "List",
      "the",
      "mail",
      ",",
      "cell",
      "phone",
      "and",
      "home",
      "phone",
      "of",
      "all",
      "the",
      "professionals",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "query_toks": [
      "SELECT",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "FROM",
      "professionals"
    ],
    "query_toks_no_value": [
      "select",
      "email_address",
      ",",
      "cell_number",
      ",",
      "home_phone",
      "from",
      "professionals"
    ],
    "question": "What are the email , cell phone and house phone of each professional ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "email",
      ",",
      "cell",
      "phone",
      "and",
      "house",
      "phone",
      "of",
      "each",
      "professional",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            6
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                41,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                43,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                42,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "breed_code",
      ",",
      "size_code",
      "FROM",
      "dogs"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "breed_code",
      ",",
      "size_code",
      "from",
      "dogs"
    ],
    "question": "What are all the possible breed type and sized type combinations ?",
    "question_toks": [
      "What",
      "are",
      "all",
      "the",
      "possible",
      "breed",
      "type",
      "and",
      "sized",
      "type",
      "combinations",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "breed_code",
      ",",
      "size_code",
      "FROM",
      "dogs"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "breed_code",
      ",",
      "size_code",
      "from",
      "dogs"
    ],
    "question": "Find the distinct breed type and size type combinations for canine .",
    "question_toks": [
      "Find",
      "the",
      "distinct",
      "breed",
      "type",
      "and",
      "size",
      "type",
      "combinations",
      "for",
      "canine",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            5
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                23,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                24,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T3.treatment_type_description",
      "FROM",
      "professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "JOIN",
      "Treatment_types",
      "AS",
      "T3",
      "ON",
      "T2.treatment_type_code",
      "=",
      "T3.treatment_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t3",
      ".",
      "treatment_type_description",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "join",
      "treatment_types",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "treatment_type_code",
      "=",
      "t3",
      ".",
      "treatment_type_code"
    ],
    "question": "List the every name of all the professionals along with the description of the treatment they have done .",
    "question_toks": [
      "List",
      "the",
      "every",
      "name",
      "of",
      "all",
      "the",
      "professionals",
      "along",
      "with",
      "the",
      "description",
      "of",
      "the",
      "treatment",
      "they",
      "have",
      "done",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "dog_kennels",
    "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.first_name",
      ",",
      "T3.treatment_type_description",
      "FROM",
      "professionals",
      "AS",
      "T1",
      "JOIN",
      "Treatments",
      "AS",
      "T2",
      "ON",
      "T1.professional_id",
      "=",
      "T2.professional_id",
      "JOIN",
      "Treatment_types",
      "AS",
      "T3",
      "ON",
      "T2.treatment_type_code",
      "=",
      "T3.treatment_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "first_name",
      ",",
      "t3",
      ".",
      "treatment_type_description",
      "from",
      "professionals",
      "as",
      "t1",
      "join",
      "treatments",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "professional_id",
      "=",
      "t2",
      ".",
      "professional_id",
      "join",
      "treatment_types",
      "as",
      "t3",
      "on",
      "t2",
      ".",
      "treatment_type_code",
      "=",
      "t3",
      ".",
      "treatment_type_code"
    ],
    "question": "What are each professional 's first name and description of the treated they have performed ?",
    "question_toks": [
      "What",
      "are",
      "each",
      "professional",
      "'s",
      "first",
      "name",
      "and",
      "description",
      "of",
      "the",
      "treated",
      "they",
      "have",
      "performed",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                33,
                false
              ],
              null
            ],
            [
              0,
              46,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            6
          ],
          [
            "table_unit",
            7
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                35,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT count(*) FROM singer",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question": "How many singing are there ?",
    "question_toks": [
      "How",
      "many",
      "singing",
      "are",
      "there",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT count(*) FROM singer",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer"
    ],
    "question": "What is the count of singing ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "count",
      "of",
      "singing",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "asc"
    ],
    "question": "List the name of singers in ascending order of la worth .",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "singers",
      "in",
      "ascending",
      "order",
      "of",
      "la",
      "worth",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "ASC"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "asc"
    ],
    "question": "What are the names of sung ordered by ascending net worth ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "sung",
      "ordered",
      "by",
      "ascending",
      "net",
      "worth",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [
        "asc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Birth_Year ,  Citizenship FROM singer",
    "query_toks": [
      "SELECT",
      "Birth_Year",
      ",",
      "Citizenship",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "birth_year",
      ",",
      "citizenship",
      "from",
      "singer"
    ],
    "question": "What are the birth year and citizen of singers ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "birth",
      "year",
      "and",
      "citizen",
      "of",
      "singers",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Birth_Year ,  Citizenship FROM singer",
    "query_toks": [
      "SELECT",
      "Birth_Year",
      ",",
      "Citizenship",
      "FROM",
      "singer"
    ],
    "query_toks_no_value": [
      "select",
      "birth_year",
      ",",
      "citizenship",
      "from",
      "singer"
    ],
    "question": "What are the birth years and citizenships of the singing ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "birth",
      "years",
      "and",
      "citizenships",
      "of",
      "the",
      "singing",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Citizenship",
      "!",
      "=",
      "``",
      "France",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "citizenship",
      "!",
      "=",
      "value"
    ],
    "question": "List the name of singers whose citizen is not \" France \" .",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "singers",
      "whose",
      "citizen",
      "is",
      "not",
      "\"",
      "France",
      "\"",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Citizenship",
      "!",
      "=",
      "``",
      "France",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "citizenship",
      "!",
      "=",
      "value"
    ],
    "question": "What are the names of the sung who are not French citizens ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "sung",
      "who",
      "are",
      "not",
      "French",
      "citizens",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          7,
          [
            0,
            [
              0,
              5,
              false
            ],
            null
          ],
          "\"France\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "=",
      "1948",
      "OR",
      "Birth_Year",
      "=",
      "1949"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "birth_year",
      "=",
      "value",
      "or",
      "birth_year",
      "=",
      "value"
    ],
    "question": "Show the name of singing whose birth year is either 1948 or 1949 ?",
    "question_toks": [
      "Show",
      "the",
      "name",
      "of",
      "singing",
      "whose",
      "birth",
      "year",
      "is",
      "either",
      "1948",
      "or",
      "1949",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1948.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1949.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "=",
      "1948",
      "OR",
      "Birth_Year",
      "=",
      "1949"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "birth_year",
      "=",
      "value",
      "or",
      "birth_year",
      "=",
      "value"
    ],
    "question": "What are the names of the singing whose birth years are either 1948 or 1949 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singing",
      "whose",
      "birth",
      "years",
      "are",
      "either",
      "1948",
      "or",
      "1949",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1948.0,
          null
        ],
        "or",
        [
          false,
          2,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1949.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the singer with the largest total worth ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "singer",
      "with",
      "the",
      "largest",
      "total",
      "worth",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "ORDER",
      "BY",
      "Net_Worth_Millions",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "order",
      "by",
      "net_worth_millions",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the name of the band who is worth the most ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "name",
      "of",
      "the",
      "band",
      "who",
      "is",
      "worth",
      "the",
      "most",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              0,
              4,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ],
    "question": "Show different citizenship of singers and the number of singing of each citizenship .",
    "question_toks": [
      "Show",
      "different",
      "citizenship",
      "of",
      "singers",
      "and",
      "the",
      "number",
      "of",
      "singing",
      "of",
      "each",
      "citizenship",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "SELECT",
      "Citizenship",
      ",",
      "COUNT",
      "(",
      "*",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      ",",
      "count",
      "(",
      "*",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ],
    "question": "For each citizenship , how many singing are from that country ?",
    "question_toks": [
      "For",
      "each",
      "citizenship",
      ",",
      "how",
      "many",
      "singing",
      "are",
      "from",
      "that",
      "country",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      "from",
      "singer",
      "group",
      "by",
      "citizenship",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "Please show the most common citizen of singers .",
    "question_toks": [
      "Please",
      "show",
      "the",
      "most",
      "common",
      "citizen",
      "of",
      "singers",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "query_toks": [
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship",
      "ORDER",
      "BY",
      "COUNT",
      "(",
      "*",
      ")",
      "DESC",
      "LIMIT",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      "from",
      "singer",
      "group",
      "by",
      "citizenship",
      "order",
      "by",
      "count",
      "(",
      "*",
      ")",
      "desc",
      "limit",
      "value"
    ],
    "question": "What is the msot common singing citizenship ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "msot",
      "common",
      "singing",
      "citizenship",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": 1,
      "orderBy": [
        "desc",
        [
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ]
        ]
      ],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      ",",
      "max",
      "(",
      "net_worth_millions",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ],
    "question": "Show different citizenships and the maximum de worth of singers of each citizenship .",
    "question_toks": [
      "Show",
      "different",
      "citizenships",
      "and",
      "the",
      "maximum",
      "de",
      "worth",
      "of",
      "singers",
      "of",
      "each",
      "citizenship",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query_toks": [
      "SELECT",
      "Citizenship",
      ",",
      "max",
      "(",
      "Net_Worth_Millions",
      ")",
      "FROM",
      "singer",
      "GROUP",
      "BY",
      "Citizenship"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      ",",
      "max",
      "(",
      "net_worth_millions",
      ")",
      "from",
      "singer",
      "group",
      "by",
      "citizenship"
    ],
    "question": "For each citizen , what is the maximum net worth ?",
    "question_toks": [
      "For",
      "each",
      "citizen",
      ",",
      "what",
      "is",
      "the",
      "maximum",
      "net",
      "worth",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [
        [
          0,
          5,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ],
          [
            1,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "query_toks": [
      "SELECT",
      "T2.Title",
      ",",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "title",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id"
    ],
    "question": "Show titles of songs and names of singing .",
    "question_toks": [
      "Show",
      "titles",
      "of",
      "songs",
      "and",
      "names",
      "of",
      "singing",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "query_toks": [
      "SELECT",
      "T2.Title",
      ",",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "title",
      ",",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id"
    ],
    "question": "What are the song where and singer names ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "song",
      "where",
      "and",
      "singer",
      "names",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                7,
                false
              ],
              null
            ]
          ],
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "WHERE",
      "T2.Sales",
      ">",
      "300000"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "where",
      "t2",
      ".",
      "sales",
      ">",
      "value"
    ],
    "question": "Show distinct names of singing that have songs with sales more than 300000 .",
    "question_toks": [
      "Show",
      "distinct",
      "names",
      "of",
      "singing",
      "that",
      "have",
      "songs",
      "with",
      "sales",
      "more",
      "than",
      "300000",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "query_toks": [
      "SELECT",
      "DISTINCT",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "WHERE",
      "T2.Sales",
      ">",
      "300000"
    ],
    "query_toks_no_value": [
      "select",
      "distinct",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "where",
      "t2",
      ".",
      "sales",
      ">",
      "value"
    ],
    "question": "what are the different names of the singing that have sales more than 300000 ?",
    "question_toks": [
      "what",
      "are",
      "the",
      "different",
      "names",
      "of",
      "the",
      "singing",
      "that",
      "have",
      "sales",
      "more",
      "than",
      "300000",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        true,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          3,
          [
            0,
            [
              0,
              9,
              false
            ],
            null
          ],
          300000.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "GROUP",
      "BY",
      "T1.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "Show the names of singing that have more than one song .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "singing",
      "that",
      "have",
      "more",
      "than",
      "one",
      "song",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "query_toks": [
      "SELECT",
      "T1.Name",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "GROUP",
      "BY",
      "T1.Name",
      "HAVING",
      "COUNT",
      "(",
      "*",
      ")",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t1",
      ".",
      "name",
      "having",
      "count",
      "(",
      "*",
      ")",
      ">",
      "value"
    ],
    "question": "What are the names of the singers that have more than one music ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "the",
      "singers",
      "that",
      "have",
      "more",
      "than",
      "one",
      "music",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [
        [
          false,
          3,
          [
            0,
            [
              3,
              0,
              false
            ],
            null
          ],
          1.0,
          null
        ]
      ],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "sum",
      "(",
      "T2.Sales",
      ")",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "GROUP",
      "BY",
      "T1.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "sum",
      "(",
      "t2",
      ".",
      "sales",
      ")",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t1",
      ".",
      "name"
    ],
    "question": "Show the names of singing and the total sales of their songs .",
    "question_toks": [
      "Show",
      "the",
      "names",
      "of",
      "singing",
      "and",
      "the",
      "total",
      "sales",
      "of",
      "their",
      "songs",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "query_toks": [
      "SELECT",
      "T1.Name",
      ",",
      "sum",
      "(",
      "T2.Sales",
      ")",
      "FROM",
      "singer",
      "AS",
      "T1",
      "JOIN",
      "song",
      "AS",
      "T2",
      "ON",
      "T1.Singer_ID",
      "=",
      "T2.Singer_ID",
      "GROUP",
      "BY",
      "T1.Name"
    ],
    "query_toks_no_value": [
      "select",
      "t1",
      ".",
      "name",
      ",",
      "sum",
      "(",
      "t2",
      ".",
      "sales",
      ")",
      "from",
      "singer",
      "as",
      "t1",
      "join",
      "song",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "singer_id",
      "=",
      "t2",
      ".",
      "singer_id",
      "group",
      "by",
      "t1",
      ".",
      "name"
    ],
    "question": "For each one name , what is the total sales for their songs ?",
    "question_toks": [
      "For",
      "each",
      "one",
      "name",
      ",",
      "what",
      "is",
      "the",
      "total",
      "sales",
      "for",
      "their",
      "songs",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                1,
                false
              ],
              null
            ],
            [
              0,
              8,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            0
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          2,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ],
          [
            4,
            [
              0,
              [
                0,
                9,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Singer_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Singer_ID",
      "FROM",
      "song",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "singer_id",
      "not",
      "in",
      "(",
      "select",
      "singer_id",
      "from",
      "song",
      ")"
    ],
    "question": "List the name of singers that do not have any music .",
    "question_toks": [
      "List",
      "the",
      "name",
      "of",
      "singers",
      "that",
      "do",
      "not",
      "have",
      "any",
      "music",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "query_toks": [
      "SELECT",
      "Name",
      "FROM",
      "singer",
      "WHERE",
      "Singer_ID",
      "NOT",
      "IN",
      "(",
      "SELECT",
      "Singer_ID",
      "FROM",
      "song",
      ")"
    ],
    "query_toks_no_value": [
      "select",
      "name",
      "from",
      "singer",
      "where",
      "singer_id",
      "not",
      "in",
      "(",
      "select",
      "singer_id",
      "from",
      "song",
      ")"
    ],
    "question": "What is the sname of every sing that does not have any tune ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "sname",
      "of",
      "every",
      "sing",
      "that",
      "does",
      "not",
      "have",
      "any",
      "tune",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          true,
          8,
          [
            0,
            [
              0,
              1,
              false
            ],
            null
          ],
          {
            "except": null,
            "from": {
              "conds": [],
              "table_units": [
                [
                  "table_unit",
                  1
                ]
              ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
              false,
              [
                [
                  0,
                  [
                    0,
                    [
                      0,
                      8,
                      false
                    ],
                    null
                  ]
                ]
              ]
            ],
            "union": null,
            "where": []
          },
          null
        ]
      ]
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "query_toks": [
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "<",
      "1945",
      "INTERSECT",
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      ">",
      "1955"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      "<",
      "value",
      "intersect",
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      ">",
      "value"
    ],
    "question": "Show the citizenship shared by sing with birth year before 1945 and after 1955 .",
    "question_toks": [
      "Show",
      "the",
      "citizenship",
      "shared",
      "by",
      "sing",
      "with",
      "birth",
      "year",
      "before",
      "1945",
      "and",
      "after",
      "1955",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            1955.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1945.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "singer",
    "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
    "query_toks": [
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      "<",
      "1945",
      "INTERSECT",
      "SELECT",
      "Citizenship",
      "FROM",
      "singer",
      "WHERE",
      "Birth_Year",
      ">",
      "1955"
    ],
    "query_toks_no_value": [
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      "<",
      "value",
      "intersect",
      "select",
      "citizenship",
      "from",
      "singer",
      "where",
      "birth_year",
      ">",
      "value"
    ],
    "question": "What are the citizenships that are shared by singers with a born year before 1945 and after 1955 ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "citizenships",
      "that",
      "are",
      "shared",
      "by",
      "singers",
      "with",
      "a",
      "born",
      "year",
      "before",
      "1945",
      "and",
      "after",
      "1955",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              0
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  5,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            3,
            [
              0,
              [
                0,
                3,
                false
              ],
              null
            ],
            1955.0,
            null
          ]
        ]
      },
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                5,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          4,
          [
            0,
            [
              0,
              3,
              false
            ],
            null
          ],
          1945.0,
          null
        ]
      ]
    }
  },
  {
    "db_id": "real_estate_properties",
    "query": "SELECT count(*) FROM Other_Available_Features",
    "query_toks": [
      "SELECT",
      "count",
      "(",
      "*",
      ")",
      "FROM",
      "Other_Available_Features"
    ],
    "query_toks_no_value": [
      "select",
      "count",
      "(",
      "*",
      ")",
      "from",
      "other_available_features"
    ],
    "question": "How many available functionality are there in total ?",
    "question_toks": [
      "How",
      "many",
      "available",
      "functionality",
      "are",
      "there",
      "in",
      "total",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            2
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            3,
            [
              0,
              [
                0,
                0,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "real_estate_properties",
    "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
    "query_toks": [
      "SELECT",
      "T2.feature_type_name",
      "FROM",
      "Other_Available_Features",
      "AS",
      "T1",
      "JOIN",
      "Ref_Feature_Types",
      "AS",
      "T2",
      "ON",
      "T1.feature_type_code",
      "=",
      "T2.feature_type_code",
      "WHERE",
      "T1.feature_name",
      "=",
      "``",
      "AirCon",
      "''"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "feature_type_name",
      "from",
      "other_available_features",
      "as",
      "t1",
      "join",
      "ref_feature_types",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "feature_type_code",
      "=",
      "t2",
      ".",
      "feature_type_code",
      "where",
      "t1",
      ".",
      "feature_name",
      "=",
      "value"
    ],
    "question": "What is the feature type name of fin AirCon ?",
    "question_toks": [
      "What",
      "is",
      "the",
      "feature",
      "type",
      "name",
      "of",
      "fin",
      "AirCon",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                6,
                false
              ],
              null
            ],
            [
              0,
              1,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            2
          ],
          [
            "table_unit",
            0
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                2,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              7,
              false
            ],
            null
          ],
          "\"AirCon\"",
          null
        ]
      ]
    }
  },
  {
    "db_id": "real_estate_properties",
    "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
    "query_toks": [
      "SELECT",
      "T2.property_type_description",
      "FROM",
      "Properties",
      "AS",
      "T1",
      "JOIN",
      "Ref_Property_Types",
      "AS",
      "T2",
      "ON",
      "T1.property_type_code",
      "=",
      "T2.property_type_code",
      "GROUP",
      "BY",
      "T1.property_type_code"
    ],
    "query_toks_no_value": [
      "select",
      "t2",
      ".",
      "property_type_description",
      "from",
      "properties",
      "as",
      "t1",
      "join",
      "ref_property_types",
      "as",
      "t2",
      "on",
      "t1",
      ".",
      "property_type_code",
      "=",
      "t2",
      ".",
      "property_type_code",
      "group",
      "by",
      "t1",
      ".",
      "property_type_code"
    ],
    "question": "Show the property type descriptions of everything belonging to that code .",
    "question_toks": [
      "Show",
      "the",
      "property",
      "type",
      "descriptions",
      "of",
      "everything",
      "belonging",
      "to",
      "that",
      "code",
      "."
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            [
              0,
              3,
              false
            ],
            null
          ]
        ],
        "table_units": [
          [
            "table_unit",
            3
          ],
          [
            "table_unit",
            1
          ]
        ]
      },
      "groupBy": [
        [
          0,
          10,
          false
        ]
      ],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                4,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": null,
      "where": []
    }
  },
  {
    "db_id": "real_estate_properties",
    "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
    "query_toks": [
      "SELECT",
      "property_name",
      "FROM",
      "Properties",
      "WHERE",
      "property_type_code",
      "=",
      "``",
      "House",
      "''",
      "UNION",
      "SELECT",
      "property_name",
      "FROM",
      "Properties",
      "WHERE",
      "property_type_code",
      "=",
      "``",
      "Apartment",
      "''",
      "AND",
      "room_count",
      ">",
      "1"
    ],
    "query_toks_no_value": [
      "select",
      "property_name",
      "from",
      "properties",
      "where",
      "property_type_code",
      "=",
      "value",
      "union",
      "select",
      "property_name",
      "from",
      "properties",
      "where",
      "property_type_code",
      "=",
      "value",
      "and",
      "room_count",
      ">",
      "value"
    ],
    "question": "What are the names of properties that are either houses or residences with more than 1 room ?",
    "question_toks": [
      "What",
      "are",
      "the",
      "names",
      "of",
      "properties",
      "that",
      "are",
      "either",
      "houses",
      "or",
      "residences",
      "with",
      "more",
      "than",
      "1",
      "room",
      "?"
    ],
    "sql": {
      "except": null,
      "from": {
        "conds": [],
        "table_units": [
          [
            "table_unit",
            3
          ]
        ]
      },
      "groupBy": [],
      "having": [],
      "intersect": null,
      "limit": null,
      "orderBy": [],
      "select": [
        false,
        [
          [
            0,
            [
              0,
              [
                0,
                13,
                false
              ],
              null
            ]
          ]
        ]
      ],
      "union": {
        "except": null,
        "from": {
          "conds": [],
          "table_units": [
            [
              "table_unit",
              3
            ]
          ]
        },
        "groupBy": [],
        "having": [],
        "intersect": null,
        "limit": null,
        "orderBy": [],
        "select": [
          false,
          [
            [
              0,
              [
                0,
                [
                  0,
                  13,
                  false
                ],
                null
              ]
            ]
          ]
        ],
        "union": null,
        "where": [
          [
            false,
            2,
            [
              0,
              [
                0,
                10,
                false
              ],
              null
            ],
            "\"Apartment\"",
            null
          ],
          "and",
          [
            false,
            3,
            [
              0,
              [
                0,
                15,
                false
              ],
              null
            ],
            1.0,
            null
          ]
        ]
      },
      "where": [
        [
          false,
          2,
          [
            0,
            [
              0,
              10,
              false
            ],
            null
          ],
          "\"House\"",
          null
        ]
      ]
    }
  }
]